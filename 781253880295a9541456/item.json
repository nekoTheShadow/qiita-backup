{"rendered_body":"<p>この記事は「ベストプラクティスを自らしめす」というよりは、「ベストプラクティスがよくわからんので、とりあえずQiitaに書いておけば、詳しい人が教えてくれるだろう」という他力本願的な動機に基づいています(´・ω・｀) インターネットの集合知にすがってみるテスト。</p>\n\n<p>まずインターネット上のブログ記事などでよく見つかるのがBufferedReaderを利用するもの。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">stdin</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">BufferedReader</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">InputStreamReader</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">));</span>\n\n<span class=\"c1\">// 標準入力を1行ずつ読み出す。</span>\n<span class=\"nc\">String</span> <span class=\"n\">line</span><span class=\"o\">;</span>\n<span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">readLine</span><span class=\"o\">())</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// 標準入力から与えられる値が数値の場合は自ら変換する必要がある。</span>\n<span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">readLine</span><span class=\"o\">())</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">);</span>\n    <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// streamにつなげやすい。</span>\n<span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">lines</span><span class=\"o\">().</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n<span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">lines</span><span class=\"o\">().</span><span class=\"na\">mapToInt</span><span class=\"o\">(</span><span class=\"nl\">Integer:</span><span class=\"o\">:</span><span class=\"n\">valueOf</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>この方式のメリット・デメリットを簡単にまとめると、</p>\n\n<ul>\n<li>ネット上でサンプルが見つけやすい。この「サンプルが豊富」というのは実務プログラミングでは意外とばかにならない。\n\n<ul>\n<li>ただし後述するScannerに比べると、タイプ数が多く、スクリプトレベルのプログラミングだと、やや面倒。</li>\n<li>コンストラクタを2回書くあたりは、理解していても、美しいとは言い難い(´・ω・｀)</li>\n</ul>\n</li>\n<li>Java8より導入されたStreamへつなげやすい。</li>\n<li>バッファリングしているので、高速に動作しそう(未確認)</li>\n<li>検査例外IOExceptionを処理する必要がある。ちょっとしたスクリプトレベルだとこれはちょっぴり邪魔くさい。</li>\n</ul>\n\n<p>ところで個人的な話をすると、Javaで標準入力を使うのは競技プログラミングが9割。要は「ちゃっちゃと書いて、ちゃっちゃと動かしたい」という場合が多い。また競技プログラミングにありがちなのが「1行目は数値で、2行以降は文字列」というような入力形式で、こういうときにはさまざまな型の入力を手早くさばく必要があります。こういう場合にはScannerのほうが便利であると感じることが多いように思います。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">stdin</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Scanner</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">in</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 標準入力を1行ずつ読み出す。</span>\n<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">hasNextLine</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">nextLine</span><span class=\"o\">();</span>\n    <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">line</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">// たとえば次のような入力があるとする ---&gt; 1000 10.005 HOGE</span>\n<span class=\"c1\">// このような複雑な入力でも比較的処理しやすい。</span>\n<span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">nextInt</span><span class=\"o\">();</span>\n<span class=\"kt\">double</span> <span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">nextDouble</span><span class=\"o\">();</span>\n<span class=\"nc\">String</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">nextLine</span><span class=\"o\">();</span>\n\n<span class=\"c1\">// Streamにはややつなげづらい。mapToObjなどを利用するには、ひと工夫必要になる。</span>\n<span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"na\">forEachRemaining</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>こちらについても、メリット・デメリットをまとめておきます。</p>\n\n<ul>\n<li>とにかく多機能。複雑な入力を処理しやすい。\n\n<ul>\n<li>ただ「多機能すぎてよくわからん」と思わなくはない。競技プログラミングならともかく、実務ではそれほど複雑な入力があるかと問われると疑問。</li>\n</ul>\n</li>\n<li>検査例外を投げないため、「ちゃっちゃと書いて、ちゃっちゃと動かしたい」という場合には便利。</li>\n<li>Streamにはつなげづらい。ConsumerはともかくFunctionを利用しづらいのはつらい。</li>\n<li>バッファリングしているのかは実装依存。多分していない(未確認)</li>\n</ul>\n\n<hr>\n\n<p>こう書くと、両者ともにメリット・デメリットがあるようです(当たり前)。ちょっとしたスクリプトレベルのプログラミングだと後者のほうが楽ちんですが、前者のほうが現代的というのは間違いない。実務的なプログラミングでは前者を採用するのがよさそうですね(´・ω・｀)</p>\n","body":"この記事は「ベストプラクティスを自らしめす」というよりは、「ベストプラクティスがよくわからんので、とりあえずQiitaに書いておけば、詳しい人が教えてくれるだろう」という他力本願的な動機に基づいています(´・ω・｀) インターネットの集合知にすがってみるテスト。\n\nまずインターネット上のブログ記事などでよく見つかるのがBufferedReaderを利用するもの。\n\n```java\nvar stdin = new BufferedReader(new InputStreamReader(System.in));\n\n// 標準入力を1行ずつ読み出す。\nString line;\nwhile ((line = stdin.readLine()) != null) {\n    doSomething(line);\n}\n\n// 標準入力から与えられる値が数値の場合は自ら変換する必要がある。\nwhile ((line = stdin.readLine()) != null) {\n    int i = Integer.valueOf(line);\n    doSomething(i);\n}\n\n// streamにつなげやすい。\nstdin.lines().forEach(System.out::println);\nstdin.lines().mapToInt(Integer::valueOf);\n```\n\nこの方式のメリット・デメリットを簡単にまとめると、\n\n- ネット上でサンプルが見つけやすい。この「サンプルが豊富」というのは実務プログラミングでは意外とばかにならない。\n    - ただし後述するScannerに比べると、タイプ数が多く、スクリプトレベルのプログラミングだと、やや面倒。\n    - コンストラクタを2回書くあたりは、理解していても、美しいとは言い難い(´・ω・｀)\n- Java8より導入されたStreamへつなげやすい。\n- バッファリングしているので、高速に動作しそう(未確認)\n- 検査例外IOExceptionを処理する必要がある。ちょっとしたスクリプトレベルだとこれはちょっぴり邪魔くさい。\n\nところで個人的な話をすると、Javaで標準入力を使うのは競技プログラミングが9割。要は「ちゃっちゃと書いて、ちゃっちゃと動かしたい」という場合が多い。また競技プログラミングにありがちなのが「1行目は数値で、2行以降は文字列」というような入力形式で、こういうときにはさまざまな型の入力を手早くさばく必要があります。こういう場合にはScannerのほうが便利であると感じることが多いように思います。\n\n```java\nvar stdin = new Scanner(System.in);\n\n// 標準入力を1行ずつ読み出す。\nwhile (stdin.hasNextLine()) {\n    var line = stdin.nextLine();\n    doSomething(line);\n}\n\n// たとえば次のような入力があるとする ---> 1000 10.005 HOGE\n// このような複雑な入力でも比較的処理しやすい。\nint i = stdin.nextInt();\ndouble d = stdin.nextDouble();\nString s = stdin.nextLine();\n\n// Streamにはややつなげづらい。mapToObjなどを利用するには、ひと工夫必要になる。\nstdin.forEachRemaining(System.out::println);\n```\n\nこちらについても、メリット・デメリットをまとめておきます。\n\n- とにかく多機能。複雑な入力を処理しやすい。\n    - ただ「多機能すぎてよくわからん」と思わなくはない。競技プログラミングならともかく、実務ではそれほど複雑な入力があるかと問われると疑問。\n- 検査例外を投げないため、「ちゃっちゃと書いて、ちゃっちゃと動かしたい」という場合には便利。\n- Streamにはつなげづらい。ConsumerはともかくFunctionを利用しづらいのはつらい。\n- バッファリングしているのかは実装依存。多分していない(未確認)\n\n***\n\nこう書くと、両者ともにメリット・デメリットがあるようです(当たり前)。ちょっとしたスクリプトレベルのプログラミングだと後者のほうが楽ちんですが、前者のほうが現代的というのは間違いない。実務的なプログラミングでは前者を採用するのがよさそうですね(´・ω・｀)\n","coediting":false,"comments_count":0,"created_at":"2018-05-26T10:30:45+09:00","group":null,"id":"781253880295a9541456","likes_count":12,"private":false,"reactions_count":0,"stocks_count":11,"tags":[{"name":"Java","versions":[]}],"title":"Javaで標準入力を読み込む","updated_at":"2018-05-26T10:30:45+09:00","url":"https://qiita.com/neko_the_shadow/items/781253880295a9541456","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":37,"github_login_name":null,"id":"neko_the_shadow","items_count":216,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":16741,"team_membership":null,"organization_url_name":null,"slide":false}