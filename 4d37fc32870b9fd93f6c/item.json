{"rendered_body":"<p>データベースアクセス層(いわゆるDAO)からとあるテーブルの行の更新情報がDBに引き渡されるとします。そのテーブルは主キーによって行が一意に特定されるため、渡された更新情報に含まれる主キーの有無によって、更新と挿入を切り替えます。いいかえれば<strong>「主キーがテーブルに存在するときは<code>update</code>、存在しないときは<code>insert</code>」</strong>ということをしたいわけです。たとえば疑似コードで書けば次のようになります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>if (primary_key in table.primary_keys ) then\n    update table \nelse \n    insert table\nend\n</pre></div></div>\n\n<p>かえってわかりにくいような……。それはさておき、以上のような要件を達成するには<code>merge</code>を利用します。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><span class=\"c1\">-- テーブル「tbl」を作成する。</span>\n<span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"n\">tbl</span> <span class=\"p\">(</span>\n    <span class=\"n\">id</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">not</span> <span class=\"k\">null</span> <span class=\"k\">primary</span> <span class=\"k\">key</span><span class=\"p\">,</span>\n    <span class=\"n\">value</span> <span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">-- 初期化: テーブルの内容を作成する。</span>\n<span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"n\">tbl</span> <span class=\"k\">values</span>\n    <span class=\"p\">(</span><span class=\"s1\">'AAA'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'BBB'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'CCC'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">-- 初期状態を確認しておく。</span>\n<span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">tbl</span><span class=\"p\">;</span>\n\n<span class=\"c1\">-- updateのサンプル: id = 'AAA'が存在するときはupdate/ないときはinsertしたい。</span>\n<span class=\"n\">merge</span> <span class=\"k\">into</span> <span class=\"n\">tbl</span>\n<span class=\"k\">using</span> <span class=\"p\">(</span><span class=\"k\">select</span> <span class=\"s1\">'AAA'</span> <span class=\"k\">as</span> <span class=\"n\">id</span> <span class=\"k\">from</span> <span class=\"n\">sysibm</span><span class=\"p\">.</span><span class=\"n\">sysdummy1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">condition</span>\n<span class=\"k\">on</span> <span class=\"n\">tbl</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">condition</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"k\">when</span> <span class=\"n\">matched</span> <span class=\"k\">then</span>\n    <span class=\"k\">update</span> <span class=\"k\">set</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'updated A'</span>\n<span class=\"k\">when</span> <span class=\"k\">not</span> <span class=\"n\">matched</span> <span class=\"k\">then</span>\n    <span class=\"k\">insert</span> <span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">values</span> <span class=\"p\">(</span><span class=\"s1\">'AAA'</span><span class=\"p\">,</span> <span class=\"s1\">'inserted A'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">-- insertのサンプル: id = 'DDD'が存在するときはupdate/ないときはinsertしたい。</span>\n<span class=\"n\">merge</span> <span class=\"k\">into</span> <span class=\"n\">tbl</span>\n<span class=\"k\">using</span> <span class=\"p\">(</span><span class=\"k\">select</span> <span class=\"s1\">'DDD'</span> <span class=\"k\">as</span> <span class=\"n\">id</span> <span class=\"k\">from</span> <span class=\"n\">sysibm</span><span class=\"p\">.</span><span class=\"n\">sysdummy1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">condition</span>\n<span class=\"k\">on</span> <span class=\"n\">tbl</span><span class=\"p\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">condition</span><span class=\"p\">.</span><span class=\"n\">id</span>\n<span class=\"k\">when</span> <span class=\"n\">matched</span> <span class=\"k\">then</span>\n    <span class=\"k\">update</span> <span class=\"k\">set</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'updated D'</span>\n<span class=\"k\">when</span> <span class=\"k\">not</span> <span class=\"n\">matched</span> <span class=\"k\">then</span>\n    <span class=\"k\">insert</span> <span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">values</span> <span class=\"p\">(</span><span class=\"s1\">'DDD'</span><span class=\"p\">,</span> <span class=\"s1\">'inserted D'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">-- id = 'AAA'が更新され、id = 'DDD'が挿入されていることを確認する。</span>\n<span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">tbl</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/*\n=== 1回目のselect文の結果 ===\n\nselect * from tbl\n\nID         VALUE\n---------- ----------\nAAA        A\nBBB        B\nCCC        C\n\n  3 レコードが選択されました。\n\n\n === 2回目のselect文の結果 ===\n\nselect * from tbl\n\nID         VALUE\n---------- ----------\nAAA        updated A\nBBB        B\nCCC        C\nDDD        inserted D\n\n  4 レコードが選択されました。\n\n*/</span>\n</pre></div></div>\n\n<p><code>merge</code>を利用すると「主キーがテーブルに存在するときはその行を更新/<code>update</code>、存在しないときは挿入/<code>insert</code>」を実現できることが上記の例から確認できました。</p>\n\n<p>ポイントとしては<code>using</code>節の使い方でしょうか。<strong><code>using</code>節ではテーブルを指定する必要があるので、上記の例ではダミー表を活用することにより、疑似的にテーブルを実現しています。</strong></p>\n\n<p>なお上記の例はDB2を利用しているため、ダミーのテーブルの名前が<code>sysibm.sysdummy1</code>になっています。DB2以外を利用する場合は別のダミー表名を指定するなり、<code>from</code>節を省略するなりして、適宜読み替えてください。</p>\n","body":"\nデータベースアクセス層(いわゆるDAO)からとあるテーブルの行の更新情報がDBに引き渡されるとします。そのテーブルは主キーによって行が一意に特定されるため、渡された更新情報に含まれる主キーの有無によって、更新と挿入を切り替えます。いいかえれば__「主キーがテーブルに存在するときは`update`、存在しないときは`insert`」__ということをしたいわけです。たとえば疑似コードで書けば次のようになります。\n\n```\nif (primary_key in table.primary_keys ) then\n    update table \nelse \n    insert table\nend\n```\n\nかえってわかりにくいような……。それはさておき、以上のような要件を達成するには`merge`を利用します。\n\n```sql\n-- テーブル「tbl」を作成する。\ncreate table tbl (\n\tid varchar(10) not null primary key,\n\tvalue varchar(10)\n);\n\n-- 初期化: テーブルの内容を作成する。\ninsert into tbl values\n\t('AAA', 'A'),\n\t('BBB', 'B'),\n\t('CCC', 'C');\n\n-- 初期状態を確認しておく。\nselect * from tbl;\n\n-- updateのサンプル: id = 'AAA'が存在するときはupdate/ないときはinsertしたい。\nmerge into tbl\nusing (select 'AAA' as id from sysibm.sysdummy1) as condition\non tbl.id = condition.id\nwhen matched then\n\tupdate set value = 'updated A'\nwhen not matched then\n\tinsert (id, value) values ('AAA', 'inserted A');\n\n-- insertのサンプル: id = 'DDD'が存在するときはupdate/ないときはinsertしたい。\nmerge into tbl\nusing (select 'DDD' as id from sysibm.sysdummy1) as condition\non tbl.id = condition.id\nwhen matched then\n\tupdate set value = 'updated D'\nwhen not matched then\n\tinsert (id, value) values ('DDD', 'inserted D');\n\n-- id = 'AAA'が更新され、id = 'DDD'が挿入されていることを確認する。\nselect * from tbl;\n\n/*\n=== 1回目のselect文の結果 ===\n\nselect * from tbl\n\nID         VALUE\n---------- ----------\nAAA        A\nBBB        B\nCCC        C\n\n  3 レコードが選択されました。\n \n \n === 2回目のselect文の結果 ===\n\nselect * from tbl\n\nID         VALUE\n---------- ----------\nAAA        updated A\nBBB        B\nCCC        C\nDDD        inserted D\n\n  4 レコードが選択されました。\n\n*/\n```\n\n`merge`を利用すると「主キーがテーブルに存在するときはその行を更新/`update`、存在しないときは挿入/`insert`」を実現できることが上記の例から確認できました。\n\nポイントとしては`using`節の使い方でしょうか。__`using`節ではテーブルを指定する必要があるので、上記の例ではダミー表を活用することにより、疑似的にテーブルを実現しています。__\n\nなお上記の例はDB2を利用しているため、ダミーのテーブルの名前が`sysibm.sysdummy1`になっています。DB2以外を利用する場合は別のダミー表名を指定するなり、`from`節を省略するなりして、適宜読み替えてください。\n","coediting":false,"comments_count":0,"created_at":"2016-12-21T23:59:01+09:00","group":null,"id":"4d37fc32870b9fd93f6c","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"SQL","versions":[]}],"title":"主キーの有無によりinsertとupdateを切り替えるにはmergeを活用する","updated_at":"2016-12-22T00:01:35+09:00","url":"https://qiita.com/neko_the_shadow/items/4d37fc32870b9fd93f6c","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":33,"github_login_name":null,"id":"neko_the_shadow","items_count":171,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}