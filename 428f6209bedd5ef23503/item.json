{"rendered_body":"<p><strong>一人暮らしのワンルームアパートでYouTubeを見ながら、コンビニ弁当をつつく</strong>という、日本でもっとも文化的なクリスマスイブの過ごし方をしているのですが、残念ながら足りないものがありました。クリスマスツリーです。一人暮らしの独身男性が住むワンルームアパートにクリスマスツリーがあるほうが珍しいとは思いますが、しかしクリスマスツリーがないと、わたしのハイソサエティなクリスマスイブライフのクオリティが下がってしまうのも事実。そこでここはプログラマらしく、クリスマスツリーをアスキーアートとして出力するスクリプトを書いてみることにしました。</p>\n\n<p>簡単な要件としては以下の通りです:</p>\n\n<ul>\n<li>クリスマスツリーは葉と幹そして飾りの3部分からなる\n\n<ul>\n<li>葉の形状は二等辺三角形。</li>\n<li>幹は長方形で、高さは葉の半分。幅は葉の3分の1程度とする。</li>\n<li>飾りは葉の部分に装飾される。量としては葉の6分の1程度にすると見栄えがよさそう。\n-なお 飾りはランダムに生成する。</li>\n</ul>\n</li>\n<li>「アスキーアート」ということで、アスキー文字のみで作成する。\n\n<ul>\n<li>葉は<code>*</code>、幹は<code>#</code>、飾りはそれ以外のアスキー文字記号をいくつか選ぶ。</li>\n</ul>\n</li>\n</ul>\n\n<p>というわけで実際に作成してみました。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code>\n<span class=\"c1\"># クリスマスツリーを生成する。</span>\n<span class=\"c1\"># @param leaf_height 葉の高さ</span>\n<span class=\"c1\"># @return クリスマスツリー[String]</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_tree</span><span class=\"p\">(</span><span class=\"n\">leaf_height</span><span class=\"p\">)</span>\n  <span class=\"c1\"># 葉部分の高さが小さい場合は例外を投げる。</span>\n  <span class=\"k\">raise</span> <span class=\"no\">ArgumentError</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"s2\">\"しょぼくなるのでだめです\"</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">leaf_height</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span>\n\n  <span class=\"c1\"># 葉部分の最大の長さ、幹部分の高さと幅をそれぞれ求めておく。</span>\n  <span class=\"n\">leaf_width</span> <span class=\"o\">=</span> <span class=\"n\">leaf_height</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"n\">stem_width</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">leaf_width</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"nf\">odd?</span> <span class=\"p\">?</span> <span class=\"n\">leaf_width</span> <span class=\"o\">/</span> <span class=\"mi\">3</span> <span class=\"p\">:</span> <span class=\"n\">leaf_width</span> <span class=\"o\">/</span> <span class=\"mi\">3</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n  <span class=\"n\">stem_height</span> <span class=\"o\">=</span> <span class=\"n\">leaf_height</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n\n  <span class=\"c1\"># ツリー全体を二次元配列により表現する。</span>\n  <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">leaf_height</span> <span class=\"o\">+</span> <span class=\"n\">stem_height</span><span class=\"p\">){</span><span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">leaf_width</span><span class=\"p\">,</span> <span class=\"s2\">\"</span><span class=\"se\">\\s</span><span class=\"s2\">\"</span><span class=\"p\">)}</span>\n\n  <span class=\"c1\"># 葉の座標を配列に格納する: </span>\n  <span class=\"n\">leaf_coordinates</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">leaf_height</span><span class=\"p\">).</span><span class=\"nf\">flat_map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">leaf_height</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n    <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">...</span><span class=\"p\">(</span><span class=\"n\">start</span> <span class=\"o\">+</span> <span class=\"n\">length</span><span class=\"p\">)).</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">j</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">]}</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"c1\"># 飾りの座標を格納する: 葉部分にランダムで飾り付ける。飾りの割合は葉全体の1/6程度にする。</span>\n  <span class=\"n\">decoration_coordinates</span> <span class=\"o\">=</span> <span class=\"n\">leaf_coordinates</span><span class=\"p\">.</span><span class=\"nf\">sample</span><span class=\"p\">(</span><span class=\"n\">leaf_coordinates</span><span class=\"p\">.</span><span class=\"nf\">size</span> <span class=\"o\">/</span> <span class=\"mi\">6</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># 幹の座標を配列に格納する: 幹の高さは葉の1/2、幅は葉の1/3程度とする。</span>\n  <span class=\"n\">blank_length</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">leaf_width</span> <span class=\"o\">-</span> <span class=\"n\">stem_width</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">2</span>\n  <span class=\"n\">stem_coordinates</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">stem_height</span><span class=\"p\">].</span><span class=\"nf\">product</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">stem_width</span><span class=\"p\">])</span>\n                                       <span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">|</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">leaf_height</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"n\">blank_length</span><span class=\"p\">]}</span>\n\n  <span class=\"c1\"># 葉、飾り、幹のそれぞれを二次元配列treeにマッピングする。</span>\n  <span class=\"n\">leaf_coordinates</span><span class=\"p\">.</span><span class=\"nf\">each</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">|</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"*\"</span><span class=\"p\">}</span>\n  <span class=\"n\">decoration_coordinates</span><span class=\"p\">.</span><span class=\"nf\">each</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">|</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"sx\">%w(? $ @ &amp;)</span><span class=\"p\">.</span><span class=\"nf\">sample</span><span class=\"p\">}</span>\n  <span class=\"n\">stem_coordinates</span><span class=\"p\">.</span><span class=\"nf\">each</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">|</span> <span class=\"n\">tree</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"#\"</span><span class=\"p\">}</span>\n\n  <span class=\"c1\"># 二次元配列を人の目にわかりやすい文字列に変換する。</span>\n  <span class=\"n\">tree</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:join</span><span class=\"p\">).</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">puts</span> <span class=\"n\">create_tree</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#          *</span>\n<span class=\"c1\">#         ***</span>\n<span class=\"c1\">#        *****</span>\n<span class=\"c1\">#       *****?*</span>\n<span class=\"c1\">#      **&amp;******</span>\n<span class=\"c1\">#     ******@****</span>\n<span class=\"c1\">#    *$***********</span>\n<span class=\"c1\">#   *******$**@****</span>\n<span class=\"c1\">#  ****@*****@******</span>\n<span class=\"c1\"># &amp;**?*@****$**@&amp;$**@</span>\n<span class=\"c1\">#        #####</span>\n<span class=\"c1\">#        #####</span>\n<span class=\"c1\">#        #####</span>\n<span class=\"c1\">#        #####</span>\n<span class=\"c1\">#        #####</span>\n\n<span class=\"nb\">puts</span> <span class=\"n\">create_tree</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#               *</span>\n<span class=\"c1\">#              ***</span>\n<span class=\"c1\">#             *****</span>\n<span class=\"c1\">#            *******</span>\n<span class=\"c1\">#           *@**?***$</span>\n<span class=\"c1\">#          *?***$*****</span>\n<span class=\"c1\">#         *****$****&amp;*@</span>\n<span class=\"c1\">#        &amp;*$***&amp;**$*****</span>\n<span class=\"c1\">#       **?****?*********</span>\n<span class=\"c1\">#      ********&amp;*&amp;****@***</span>\n<span class=\"c1\">#     **$*****$*&amp;**********</span>\n<span class=\"c1\">#    ************?*&amp;@****?**</span>\n<span class=\"c1\">#   ********$****?????*?***&amp;*</span>\n<span class=\"c1\">#  ********?****&amp;*******@*****</span>\n<span class=\"c1\"># ***@******************?******</span>\n<span class=\"c1\">#           #########</span>\n<span class=\"c1\">#           #########</span>\n<span class=\"c1\">#           #########</span>\n<span class=\"c1\">#           #########</span>\n<span class=\"c1\">#           #########</span>\n<span class=\"c1\">#           #########</span>\n<span class=\"c1\">#           #########</span>\n\n<span class=\"k\">begin</span> \n  <span class=\"nb\">puts</span> <span class=\"n\">create_tree</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">rescue</span> <span class=\"o\">=&gt;</span> <span class=\"n\">e</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">e</span><span class=\"p\">.</span><span class=\"nf\">message</span> <span class=\"c1\">#=&gt; しょぼくなるのでだめです</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>なかなか見栄えの良いクリスマスツリーができたのではないでしょうか。ちょっと張り切りすぎて、コメントをたくさん書きすぎたのは反省ですね。</p>\n\n<p>それはさておき、クリスマスツリーができたということで、クリスマスイブ生活のクオリティも一層上がったように思います。<strong>なおクリスマス当日(日曜日)は休日出勤。サービス残業ならぬサービス出勤で、手当なんぞは夢のまた夢。</strong>クリスマスイブ以上に楽しいクリスマスがやってきそうですね。がってむ(´・ω・`)</p>\n","body":"\n__一人暮らしのワンルームアパートでYouTubeを見ながら、コンビニ弁当をつつく__という、日本でもっとも文化的なクリスマスイブの過ごし方をしているのですが、残念ながら足りないものがありました。クリスマスツリーです。一人暮らしの独身男性が住むワンルームアパートにクリスマスツリーがあるほうが珍しいとは思いますが、しかしクリスマスツリーがないと、わたしのハイソサエティなクリスマスイブライフのクオリティが下がってしまうのも事実。そこでここはプログラマらしく、クリスマスツリーをアスキーアートとして出力するスクリプトを書いてみることにしました。\n\n簡単な要件としては以下の通りです:\n\n- クリスマスツリーは葉と幹そして飾りの3部分からなる\n    - 葉の形状は二等辺三角形。\n    - 幹は長方形で、高さは葉の半分。幅は葉の3分の1程度とする。\n    - 飾りは葉の部分に装飾される。量としては葉の6分の1程度にすると見栄えがよさそう。\n        -なお 飾りはランダムに生成する。\n- 「アスキーアート」ということで、アスキー文字のみで作成する。\n    - 葉は`*`、幹は`#`、飾りはそれ以外のアスキー文字記号をいくつか選ぶ。\n\nというわけで実際に作成してみました。\n\n```rb\n\n# クリスマスツリーを生成する。\n# @param leaf_height 葉の高さ\n# @return クリスマスツリー[String]\ndef create_tree(leaf_height)\n  # 葉部分の高さが小さい場合は例外を投げる。\n  raise ArgumentError.new(\"しょぼくなるのでだめです\") if leaf_height < 5\n\n  # 葉部分の最大の長さ、幹部分の高さと幅をそれぞれ求めておく。\n  leaf_width = leaf_height * 2 - 1\n  stem_width = (leaf_width / 3).odd? ? leaf_width / 3 : leaf_width / 3 - 1\n  stem_height = leaf_height / 2\n\n  # ツリー全体を二次元配列により表現する。\n  tree = Array.new(leaf_height + stem_height){Array.new(leaf_width, \"\\s\")}\n\n  # 葉の座標を配列に格納する: \n  leaf_coordinates = (0...leaf_height).flat_map do |i|\n    start = leaf_height - i - 1\n    length = (i + 1) * 2 - 1\n    (start...(start + length)).map{|j| [i, j]}\n  end\n\n  # 飾りの座標を格納する: 葉部分にランダムで飾り付ける。飾りの割合は葉全体の1/6程度にする。\n  decoration_coordinates = leaf_coordinates.sample(leaf_coordinates.size / 6)\n\n  # 幹の座標を配列に格納する: 幹の高さは葉の1/2、幅は葉の1/3程度とする。\n  blank_length = (leaf_width - stem_width) / 2\n  stem_coordinates = [*0...stem_height].product([*0...stem_width])\n                                       .map{|i, j| [i + leaf_height, j + blank_length]}\n  \n  # 葉、飾り、幹のそれぞれを二次元配列treeにマッピングする。\n  leaf_coordinates.each{|x, y| tree[x][y] = \"*\"}\n  decoration_coordinates.each{|x, y| tree[x][y] = %w(? $ @ &).sample}\n  stem_coordinates.each{|x, y| tree[x][y] = \"#\"}\n\n  # 二次元配列を人の目にわかりやすい文字列に変換する。\n  tree.map(&:join).join(\"\\n\")\nend\n\nputs create_tree(10)\n\n#          *\n#         ***\n#        *****\n#       *****?*\n#      **&******\n#     ******@****\n#    *$***********\n#   *******$**@****\n#  ****@*****@******\n# &**?*@****$**@&$**@\n#        #####\n#        #####\n#        #####\n#        #####\n#        #####\n\nputs create_tree(15)\n\n#               *\n#              ***\n#             *****\n#            *******\n#           *@**?***$\n#          *?***$*****\n#         *****$****&*@\n#        &*$***&**$*****\n#       **?****?*********\n#      ********&*&****@***\n#     **$*****$*&**********\n#    ************?*&@****?**\n#   ********$****?????*?***&*\n#  ********?****&*******@*****\n# ***@******************?******\n#           #########\n#           #########\n#           #########\n#           #########\n#           #########\n#           #########\n#           #########\n\nbegin \n  puts create_tree(3)\nrescue => e\n  puts e.message #=> しょぼくなるのでだめです\nend\n```\n\nなかなか見栄えの良いクリスマスツリーができたのではないでしょうか。ちょっと張り切りすぎて、コメントをたくさん書きすぎたのは反省ですね。\n\nそれはさておき、クリスマスツリーができたということで、クリスマスイブ生活のクオリティも一層上がったように思います。__なおクリスマス当日(日曜日)は休日出勤。サービス残業ならぬサービス出勤で、手当なんぞは夢のまた夢。__クリスマスイブ以上に楽しいクリスマスがやってきそうですね。がってむ(´・ω・`)\n","coediting":false,"comments_count":0,"created_at":"2016-12-24T23:07:57+09:00","group":null,"id":"428f6209bedd5ef23503","likes_count":4,"private":false,"reactions_count":0,"stocks_count":3,"tags":[{"name":"Ruby","versions":[]}],"title":"クリスマスツリーのアスキーアートを生成するRubyスクリプトを書いた","updated_at":"2016-12-24T23:10:41+09:00","url":"https://qiita.com/neko_the_shadow/items/428f6209bedd5ef23503","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":2213,"team_membership":null,"organization_url_name":null}