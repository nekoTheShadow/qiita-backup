{"rendered_body":"<h1 data-sourcepos=\"1:1-1:14\">\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h1>\n<p data-sourcepos=\"3:1-3:318\">自分はお堅いSIer勤めということもあり、外部ライブラリが利用できないことがよくあります。そういう環境で、Javaを使って、ちょっとしたツールなどを作成したいという場合、ロギングにはjava.util.logging(JUL)を利用することになります。</p>\n<p data-sourcepos=\"5:1-5:300\">JULの設定方法はいろいろありますが、ちょっとしたツールを作りたいだけなので、ソースコード内で簡単に設定して終わりにしたいです。こういう場合に自分はどうしているのか、というのをここで紹介したいと思います。</p>\n<h1 data-sourcepos=\"7:1-7:14\">\n<span id=\"設定方法\" class=\"fragment\"></span><a href=\"#%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>設定方法</h1>\n<p data-sourcepos=\"9:1-9:63\">自分がログにもとめる要件は以下の通りです。</p>\n<ul data-sourcepos=\"11:1-14:0\">\n<li data-sourcepos=\"11:1-11:56\">コンソールとファイルにログを記録する</li>\n<li data-sourcepos=\"12:1-12:185\">ログフォーマットはコンソールとファイルで同じでよいが、SimpleFormatterのデフォルトだとわかりにくいので、わかりやすいものにしたい</li>\n<li data-sourcepos=\"13:1-14:0\">ファイル名はapp_<em>yyyymmdd</em>.logとする (yyyymmddは実行日付)。ログファイルは追記して使う。</li>\n</ul>\n<p data-sourcepos=\"15:1-15:121\">これを実現したい場合、mainメソッドの一番最初に、JULの設定処理を記載すればよいです。</p>\n<div class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"17:1-40:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Properties</span> <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Properties</span><span class=\"o\">();</span>\n    <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">setProperty</span><span class=\"o\">(</span><span class=\"s\">\"handlers\"</span><span class=\"o\">,</span> <span class=\"s\">\"java.util.logging.FileHandler, java.util.logging.ConsoleHandler\"</span><span class=\"o\">);</span>\n    <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">setProperty</span><span class=\"o\">(</span><span class=\"s\">\"java.util.logging.SimpleFormatter.format\"</span><span class=\"o\">,</span> <span class=\"s\">\"%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %4$s %2$s %5$s%6$s%n\"</span><span class=\"o\">);</span>\n    <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">setProperty</span><span class=\"o\">(</span><span class=\"s\">\"java.util.logging.FileHandler.pattern\"</span><span class=\"o\">,</span> <span class=\"s\">\"app_%s.log\"</span><span class=\"o\">.</span><span class=\"na\">formatted</span><span class=\"o\">(</span><span class=\"nc\">DateTimeFormatter</span><span class=\"o\">.</span><span class=\"na\">ofPattern</span><span class=\"o\">(</span><span class=\"s\">\"yyyyMMdd\"</span><span class=\"o\">).</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"nc\">LocalDateTime</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">())));</span>\n    <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">setProperty</span><span class=\"o\">(</span><span class=\"s\">\"java.util.logging.FileHandler.formatter\"</span><span class=\"o\">,</span> <span class=\"s\">\"java.util.logging.SimpleFormatter\"</span><span class=\"o\">);</span>\n    <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">setProperty</span><span class=\"o\">(</span><span class=\"s\">\"java.util.logging.FileHandler.append\"</span><span class=\"o\">,</span> <span class=\"s\">\"true\"</span><span class=\"o\">);</span>\n\n    <span class=\"k\">try</span> <span class=\"o\">{</span>\n        <span class=\"nc\">ByteArrayOutputStream</span> <span class=\"n\">byteArrayOutputStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ByteArrayOutputStream</span><span class=\"o\">();</span>\n        <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">store</span><span class=\"o\">(</span><span class=\"n\">byteArrayOutputStream</span><span class=\"o\">,</span> <span class=\"s\">\"\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">ByteArrayInputStream</span> <span class=\"n\">byteArrayInputStream</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ByteArrayInputStream</span><span class=\"o\">(</span><span class=\"n\">byteArrayOutputStream</span><span class=\"o\">.</span><span class=\"na\">toByteArray</span><span class=\"o\">());</span>\n\n        <span class=\"nc\">LogManager</span> <span class=\"n\">logManager</span> <span class=\"o\">=</span> <span class=\"nc\">LogManager</span><span class=\"o\">.</span><span class=\"na\">getLogManager</span><span class=\"o\">();</span>\n        <span class=\"n\">logManager</span><span class=\"o\">.</span><span class=\"na\">reset</span><span class=\"o\">();</span>\n        <span class=\"n\">logManager</span><span class=\"o\">.</span><span class=\"na\">readConfiguration</span><span class=\"o\">(</span><span class=\"n\">byteArrayInputStream</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UncheckedIOException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// Main Routine</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"42:1-42:222\">やっていることは単純。JULの設定ファイルであるlogging.propertiesファイルに書く内容をソースコード上にハードコードして、ロガーの設定を上書きしているだけです。</p>\n<h1 data-sourcepos=\"44:1-44:11\">\n<span id=\"使用例\" class=\"fragment\"></span><a href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>使用例</h1>\n<p data-sourcepos=\"46:1-46:108\">では、実際に利用してみましょう。以下のようなソースコードがあるとします。</p>\n<div class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"48:1-64:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">XXXService</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">Logger</span> <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"nc\">Logger</span><span class=\"o\">.</span><span class=\"na\">getLogger</span><span class=\"o\">(</span><span class=\"nc\">XXXService</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">log</span><span class=\"o\">(</span><span class=\"nc\">Level</span><span class=\"o\">.</span><span class=\"na\">INFO</span><span class=\"o\">,</span> <span class=\"s\">\"START\"</span><span class=\"o\">);</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">lines</span> <span class=\"o\">=</span> <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">readAllLines</span><span class=\"o\">(</span><span class=\"nc\">Path</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"s\">\"/not/found/text\"</span><span class=\"o\">));</span>\n            <span class=\"c1\">/// Do Something</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">log</span><span class=\"o\">(</span><span class=\"nc\">Level</span><span class=\"o\">.</span><span class=\"na\">SEVERE</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getMessage</span><span class=\"o\">(),</span> <span class=\"n\">e</span><span class=\"o\">);</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UncheckedIOException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"na\">log</span><span class=\"o\">(</span><span class=\"nc\">Level</span><span class=\"o\">.</span><span class=\"na\">INFO</span><span class=\"o\">,</span> <span class=\"s\">\"END\"</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"66:1-66:132\">これを実行すると、コンソールとapp_<em>yyyymmdd</em>.logファイルに次のようなログが記録されるはずです。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"68:1-85:3\"><div class=\"highlight\"><pre><code>2023-10-01 12:25:58.585 情報 com.jp.tool.XXXService run START\n2023-10-01 12:25:58.653 重大 com.jp.tool.XXXService run \\not\\found\\text\njava.nio.file.NoSuchFileException: \\not\\found\\text\n\tat java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)\n\tat java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:380)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:432)\n\tat java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:422)\n\tat java.base/java.nio.file.Files.newInputStream(Files.java:160)\n\tat java.base/java.nio.file.Files.newBufferedReader(Files.java:2922)\n\tat java.base/java.nio.file.Files.readAllLines(Files.java:3412)\n\tat java.base/java.nio.file.Files.readAllLines(Files.java:3453)\n\tat com.jp.tool.XXXService.run(XXXService.java:17)\n\tat com.jp.tool.Main.main(Main.java:35)\n</code></pre></div></div>\n<h1 data-sourcepos=\"87:1-87:14\">\n<span id=\"環境情報\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>環境情報</h1>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"89:1-98:3\"><div class=\"highlight\"><pre><code>D:\\&gt;javac -version\njavac 17.0.3\n\nD:\\&gt;java -version\nopenjdk version \"17.0.3\" 2022-04-19\nOpenJDK Runtime Environment Temurin-17.0.3+7 (build 17.0.3+7)\nOpenJDK 64-Bit Server VM Temurin-17.0.3+7 (build 17.0.3+7, mixed mode, sharing)\n\n</code></pre></div></div>\n","body":"# はじめに\n\n自分はお堅いSIer勤めということもあり、外部ライブラリが利用できないことがよくあります。そういう環境で、Javaを使って、ちょっとしたツールなどを作成したいという場合、ロギングにはjava.util.logging(JUL)を利用することになります。\n\nJULの設定方法はいろいろありますが、ちょっとしたツールを作りたいだけなので、ソースコード内で簡単に設定して終わりにしたいです。こういう場合に自分はどうしているのか、というのをここで紹介したいと思います。\n\n# 設定方法\n\n自分がログにもとめる要件は以下の通りです。\n\n- コンソールとファイルにログを記録する\n- ログフォーマットはコンソールとファイルで同じでよいが、SimpleFormatterのデフォルトだとわかりにくいので、わかりやすいものにしたい\n- ファイル名はapp_*yyyymmdd*.logとする (yyyymmddは実行日付)。ログファイルは追記して使う。\n\nこれを実現したい場合、mainメソッドの一番最初に、JULの設定処理を記載すればよいです。\n\n```java\npublic static void main(String[] args) {\n    Properties properties = new Properties();\n    properties.setProperty(\"handlers\", \"java.util.logging.FileHandler, java.util.logging.ConsoleHandler\");\n    properties.setProperty(\"java.util.logging.SimpleFormatter.format\", \"%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL %4$s %2$s %5$s%6$s%n\");\n    properties.setProperty(\"java.util.logging.FileHandler.pattern\", \"app_%s.log\".formatted(DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(LocalDateTime.now())));\n    properties.setProperty(\"java.util.logging.FileHandler.formatter\", \"java.util.logging.SimpleFormatter\");\n    properties.setProperty(\"java.util.logging.FileHandler.append\", \"true\");\n\n    try {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        properties.store(byteArrayOutputStream, \"\");\n        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n\n        LogManager logManager = LogManager.getLogManager();\n        logManager.reset();\n        logManager.readConfiguration(byteArrayInputStream);\n    } catch (IOException e) {\n        throw new UncheckedIOException(e);\n    }\n\n    // Main Routine\n}\n```\n\nやっていることは単純。JULの設定ファイルであるlogging.propertiesファイルに書く内容をソースコード上にハードコードして、ロガーの設定を上書きしているだけです。\n\n# 使用例\n\nでは、実際に利用してみましょう。以下のようなソースコードがあるとします。\n\n```java\npublic class XXXService {\n    private static final Logger logger = Logger.getLogger(XXXService.class.getName());\n\n    public void run() {\n        logger.log(Level.INFO, \"START\");\n        try {\n            List<String> lines = Files.readAllLines(Path.of(\"/not/found/text\"));\n            /// Do Something\n        } catch (IOException e) {\n            logger.log(Level.SEVERE, e.getMessage(), e);\n            throw new UncheckedIOException(e);\n        }\n        logger.log(Level.INFO, \"END\");\n    }\n}\n```\n\nこれを実行すると、コンソールとapp_*yyyymmdd*.logファイルに次のようなログが記録されるはずです。\n\n```\n2023-10-01 12:25:58.585 情報 com.jp.tool.XXXService run START\n2023-10-01 12:25:58.653 重大 com.jp.tool.XXXService run \\not\\found\\text\njava.nio.file.NoSuchFileException: \\not\\found\\text\n\tat java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)\n\tat java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:236)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:380)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:432)\n\tat java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:422)\n\tat java.base/java.nio.file.Files.newInputStream(Files.java:160)\n\tat java.base/java.nio.file.Files.newBufferedReader(Files.java:2922)\n\tat java.base/java.nio.file.Files.readAllLines(Files.java:3412)\n\tat java.base/java.nio.file.Files.readAllLines(Files.java:3453)\n\tat com.jp.tool.XXXService.run(XXXService.java:17)\n\tat com.jp.tool.Main.main(Main.java:35)\n```\n\n# 環境情報\n\n```\nD:\\>javac -version\njavac 17.0.3\n\nD:\\>java -version\nopenjdk version \"17.0.3\" 2022-04-19\nOpenJDK Runtime Environment Temurin-17.0.3+7 (build 17.0.3+7)\nOpenJDK 64-Bit Server VM Temurin-17.0.3+7 (build 17.0.3+7, mixed mode, sharing)\n\n```\n","coediting":false,"comments_count":0,"created_at":"2023-10-01T12:37:01+09:00","group":null,"id":"c715ef74846616503fc5","likes_count":0,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Java","versions":[]}],"title":"ソースコード内で簡単に設定してjava.util.logging(JUL)を利用したい","updated_at":"2023-10-01T12:37:01+09:00","url":"https://qiita.com/neko_the_shadow/items/c715ef74846616503fc5","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":38,"github_login_name":"nekoTheShadow","id":"neko_the_shadow","items_count":224,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":437,"team_membership":null,"organization_url_name":null,"slide":false}