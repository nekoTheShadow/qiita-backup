{"rendered_body":"<p><a href=\"https://codeiq.jp/q/2628\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「『スクエア・カルテット』問題」</a>の出題期間が終了したということで、自分が提出したコードを公表してみたいと思います。最初はPythonで書いており、実際に提出までしたのですが――なぜか途中で気が変わりSchemeへと変更。おそらくPythonについてはだれかほかの方がコードを公開してくれると思うので、自分はユーザーの少ないSchemeに絞りたいと思います。</p>\n\n<hr>\n\n<p><strong>2016/11/17追記:</strong><br>\n公開されたコードについて出題者の<a href=\"https://twitter.com/riverplus\" rel=\"nofollow noopener\" target=\"_blank\">@riverplusさん</a>がまとめてくださっていたようです。わたしはこれから勉強します(´・ω・`)<br>\n<a href=\"http://togetter.com/li/922419\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://togetter.com/li/922419</a></p>\n\n<hr>\n\n<div class=\"code-frame\" data-lang=\"scm\"><div class=\"highlight\"><pre><code>; n(= b*b-a*a)があたえられたとき、ありうるpとq(p &gt; q)の組み合わせを作り、リストに格納する\n; (make-pq-list 91) =&gt; '((13 . 7) (91 . 1)) [約数]\n(define (make-pq-list n)\n  (let loop ((q 1) (pq-list '()))\n    (if (&gt;= q (sqrt n))\n      pq-list\n      (loop (+ q 1)\n            (if (zero? (modulo n q))\n              (cons `(,(quotient n q) . ,q) pq-list)\n              pq-list)))))\n\n; 問題文のF(a, b)\n; (F 3 10) =&gt; 104\n(define (F a b)\n  (let loop ((pq-list (make-pq-list (- (* b b) (* a a)))) (sum 0))\n    (if (null? pq-list)\n      sum\n      (let ((p (car (car pq-list))) (q (cdr (car pq-list))))\n        (loop (cdr pq-list)\n              (if (even? (+ p q)) ; p + qが偶数のとき、p - qも偶数\n                (+ sum p) ; p = x + y\n                sum))))))\n\n; メイン関数。入力を処理して関数Fに渡し、その結果を出力する\n(define (MAIN)\n  (let* ((a (read)) (b (read)))\n    (write (F a b))))\n\n(MAIN)\n\n; == 方針 ==\n; x ** 2 + a ** 2 = y ** 2 + b ** 2\n;     &lt;=&gt; x ** 2 - y ** 2 = b ** 2 - a ** 2\n;     &lt;=&gt; (x + y)(x - y) = b ** 2 - a ** 2\n; x + y = p, x - y = q, b ** 2 - a ** 2 = n (p &gt; q, nは0以上の整数)とすると\n;     p = x + y &lt;=&gt; x = (p + q) / 2\n;     q = x - y &lt;=&gt; y = (p - q) / 2\n;     n = p * q\n; p, qがとりうる値はnの約数であることを利用して求める\n; p, qがわかればx, yおよびx + yの値も決定する\n; ただしx, yは自然数、つまりp + q, p - qはともに偶数である必要がある\n</code></pre></div></div>\n\n<p>アルゴリズムについては下部の「方針」に書いた通り――というかあれ以上にどう書いていいのか、わたしにはわかりません(´・ω・`)。数学的な説明はわたしより何倍も偉い人が書いてくれるはずなので、わたしも今から期待しています。</p>\n\n<p>ちなみにCodeIQで採用されているSchemeの処理系はGuile1.8.5です。この手のサイトでSchemeが利用できるのは珍しいのですが、処理系はやや古いので、CodeIQに関心がある全国20億人のSchemeプログラマのみなさんはお気を付けを。</p>\n","body":"[CodeIQ「『スクエア・カルテット』問題」](https://codeiq.jp/q/2628)の出題期間が終了したということで、自分が提出したコードを公表してみたいと思います。最初はPythonで書いており、実際に提出までしたのですが――なぜか途中で気が変わりSchemeへと変更。おそらくPythonについてはだれかほかの方がコードを公開してくれると思うので、自分はユーザーの少ないSchemeに絞りたいと思います。\n\n***\n__2016/11/17追記:__\n公開されたコードについて出題者の[@riverplusさん](https://twitter.com/riverplus)がまとめてくださっていたようです。わたしはこれから勉強します(´・ω・`)\nhttp://togetter.com/li/922419\n***\n\n```scm\n; n(= b*b-a*a)があたえられたとき、ありうるpとq(p > q)の組み合わせを作り、リストに格納する\n; (make-pq-list 91) => '((13 . 7) (91 . 1)) [約数]\n(define (make-pq-list n)\n  (let loop ((q 1) (pq-list '()))\n    (if (>= q (sqrt n))\n      pq-list\n      (loop (+ q 1)\n            (if (zero? (modulo n q))\n              (cons `(,(quotient n q) . ,q) pq-list)\n              pq-list)))))\n\n; 問題文のF(a, b)\n; (F 3 10) => 104\n(define (F a b)\n  (let loop ((pq-list (make-pq-list (- (* b b) (* a a)))) (sum 0))\n    (if (null? pq-list)\n      sum\n      (let ((p (car (car pq-list))) (q (cdr (car pq-list))))\n        (loop (cdr pq-list)\n              (if (even? (+ p q)) ; p + qが偶数のとき、p - qも偶数\n                (+ sum p) ; p = x + y\n                sum))))))\n\n; メイン関数。入力を処理して関数Fに渡し、その結果を出力する\n(define (MAIN)\n  (let* ((a (read)) (b (read)))\n    (write (F a b))))\n\n(MAIN)\n\n; == 方針 ==\n; x ** 2 + a ** 2 = y ** 2 + b ** 2\n;     <=> x ** 2 - y ** 2 = b ** 2 - a ** 2\n;     <=> (x + y)(x - y) = b ** 2 - a ** 2\n; x + y = p, x - y = q, b ** 2 - a ** 2 = n (p > q, nは0以上の整数)とすると\n;     p = x + y <=> x = (p + q) / 2\n;     q = x - y <=> y = (p - q) / 2\n;     n = p * q\n; p, qがとりうる値はnの約数であることを利用して求める\n; p, qがわかればx, yおよびx + yの値も決定する\n; ただしx, yは自然数、つまりp + q, p - qはともに偶数である必要がある\n```\n\nアルゴリズムについては下部の「方針」に書いた通り――というかあれ以上にどう書いていいのか、わたしにはわかりません(´・ω・`)。数学的な説明はわたしより何倍も偉い人が書いてくれるはずなので、わたしも今から期待しています。\n\nちなみにCodeIQで採用されているSchemeの処理系はGuile1.8.5です。この手のサイトでSchemeが利用できるのは珍しいのですが、処理系はやや古いので、CodeIQに関心がある全国20億人のSchemeプログラマのみなさんはお気を付けを。\n","coediting":false,"comments_count":0,"created_at":"2016-01-15T18:05:29+09:00","group":null,"id":"ca58449030611347b60c","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Scheme","versions":[]},{"name":"codeiq","versions":[]}],"title":"「『スクエア・カルテット』問題」に参加しました。","updated_at":"2016-01-17T22:14:27+09:00","url":"https://qiita.com/neko_the_shadow/items/ca58449030611347b60c","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":197,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}