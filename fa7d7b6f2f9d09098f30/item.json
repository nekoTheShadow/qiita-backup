{"rendered_body":"<p>Rubyには、<code>$1, $2, $3 ...</code>という特殊変数があり、<code>$n</code>には最後に成功したパターンマッチで n 番目の括弧にマッチした値が代入されます。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"s2\">\"abc\"</span> <span class=\"o\">=~</span> <span class=\"sr\">/(.)(.)(.)/</span>\n<span class=\"nb\">p</span> <span class=\"vg\">$1</span> <span class=\"c1\">#=&gt; \"a\"</span>\n<span class=\"nb\">p</span> <span class=\"vg\">$2</span> <span class=\"c1\">#=&gt; \"b\"</span>\n<span class=\"nb\">p</span> <span class=\"vg\">$3</span> <span class=\"c1\">#=&gt; \"c\"</span>\n</code></pre></div></div>\n\n<p><a href=\"https://docs.ruby-lang.org/ja/latest/method/Kernel/v/1.html\" rel=\"nofollow noopener\" target=\"_blank\">2020/09/26現在のるりま</a>には</p>\n\n<blockquote>\n<p>番号 n はいくらでも大きな正整数を利用できます。</p>\n</blockquote>\n\n<p>とありますが、実際には超巨大な値を使おうとすると、warningが表示されます (遊んでいるときに気が付いた)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ ruby -e '$9999999999999999'\n-e:1: warning: `$9999999999999999' is too big for a number variable, always nil\n</code></pre></div></div>\n\n<p>こうなると<code>$n</code>のnとしてどれだけの値が使えるのか気になってくるので、簡単な二分探索を使った以下のコードで調べてみたところ、自分の環境では最大値は1073741823のようでした。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"nb\">require</span> <span class=\"s1\">'stringio'</span>\n\n<span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ng</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">10</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"o\">-</span><span class=\"n\">ng</span><span class=\"p\">).</span><span class=\"nf\">abs</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"n\">io</span> <span class=\"o\">=</span> <span class=\"no\">StringIO</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n  <span class=\"vg\">$stderr</span> <span class=\"o\">=</span> <span class=\"n\">io</span>\n\n  <span class=\"n\">mi</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"o\">+</span><span class=\"n\">ng</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n  <span class=\"nb\">eval</span><span class=\"p\">(</span><span class=\"s2\">\"$</span><span class=\"si\">#{</span><span class=\"n\">mi</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">io</span><span class=\"p\">.</span><span class=\"nf\">size</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"n\">mi</span>\n  <span class=\"k\">else</span>\n    <span class=\"n\">ng</span> <span class=\"o\">=</span> <span class=\"n\">mi</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"vg\">$stderr</span> <span class=\"o\">=</span> <span class=\"no\">STDERR</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">p</span> <span class=\"n\">ok</span> <span class=\"c1\">#=&gt; 1073741823</span>\n</code></pre></div></div>\n\n<p>別の方法で確認してみても、<code>$1073741823</code>が最大で、それよりも大きい値になると警告がでるようです。ただ1073741823という値はいかにも環境依存っぽいので、環境によってはもっと大きい値まで使えるかもしれませんし、もっと小さい値で警告が出てくるかもしれません。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ ruby -e '$1073741823' \n#=&gt; 何も起きない\n\n$ ruby -e '$1073741824'\n#=&gt; 警告が出力される\n#=&gt; -e:1: warning: `$1073741824' is too big for a number variable, always nil\n</code></pre></div></div>\n\n<p>当然の疑問として、キャプチャ数が1073741823個を超える正規表現でマッチが成功した場合どうなるのかということですが、これは無問題。Rubyではキャプチャ数の上限が32767と決まっており、それを超えるような正規表現はコンパイルに失敗します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ ruby -e 'Regexp.compile(\"(.)\"*32767)' \n#=&gt; 何も起きない\n\n$ ruby -e 'Regexp.compile(\"(.)\"*32768)'\n#=&gt; RegexpErrorが発生する。メッセージは次の通り\n#=&gt; `initialize': too many capture groups are specified:\n</code></pre></div></div>\n\n<p>自分は以下のような二分探索を用いた簡単なスクリプトで32767という値を見つけましたが、Rubyの正規表現エンジンである鬼雲のソースコードを見ると、<a href=\"https://github.com/ruby/ruby/blob/c5eb24349a4535948514fe765c3ddb0628d81004/include/ruby/onigmo.h#L438\" rel=\"nofollow noopener\" target=\"_blank\"><code>ONIG_MAX_CAPTURE_GROUP_NUM</code>というキャプチャ数の上限を示す変数があって、これが32767になっているようです。</a> であれば、特殊変数<code>$1, $2, $3 ...</code>の側の最大値を32767にしてもよいような気はしますが(´・ω・`)</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\"><div class=\"highlight\"><pre><code><span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ng</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">8</span>\n\n<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"o\">-</span><span class=\"n\">ng</span><span class=\"p\">).</span><span class=\"nf\">abs</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n  <span class=\"n\">mi</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ok</span><span class=\"o\">+</span><span class=\"n\">ng</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n  <span class=\"k\">begin</span>\n    <span class=\"no\">Regexp</span><span class=\"p\">.</span><span class=\"nf\">compile</span><span class=\"p\">(</span><span class=\"s2\">\"(.)\"</span><span class=\"o\">*</span><span class=\"n\">mi</span><span class=\"p\">)</span>\n    <span class=\"n\">ok</span> <span class=\"o\">=</span> <span class=\"n\">mi</span>\n  <span class=\"k\">rescue</span> <span class=\"no\">RegexpError</span> <span class=\"o\">=&gt;</span> <span class=\"n\">e</span>\n    <span class=\"n\">ng</span> <span class=\"o\">=</span> <span class=\"n\">mi</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">p</span> <span class=\"n\">ok</span> <span class=\"c1\">#=&gt; 32767</span>\n</code></pre></div></div>\n\n<p><strong>環境情報</strong></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ ruby -v\nruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux]\n</code></pre></div></div>\n","body":"Rubyには、`$1, $2, $3 ...`という特殊変数があり、`$n`には最後に成功したパターンマッチで n 番目の括弧にマッチした値が代入されます。\n\n```ruby\n\"abc\" =~ /(.)(.)(.)/\np $1 #=> \"a\"\np $2 #=> \"b\"\np $3 #=> \"c\"\n```\n\n[2020/09/26現在のるりま](https://docs.ruby-lang.org/ja/latest/method/Kernel/v/1.html)には\n\n> 番号 n はいくらでも大きな正整数を利用できます。\n\nとありますが、実際には超巨大な値を使おうとすると、warningが表示されます (遊んでいるときに気が付いた)\n\n```\n$ ruby -e '$9999999999999999'\n-e:1: warning: `$9999999999999999' is too big for a number variable, always nil\n```\n\nこうなると`$n`のnとしてどれだけの値が使えるのか気になってくるので、簡単な二分探索を使った以下のコードで調べてみたところ、自分の環境では最大値は1073741823のようでした。\n\n```ruby\nrequire 'stringio'\n\nok = 0\nng = 10**10\n\nwhile (ok-ng).abs > 1\n  io = StringIO.new\n  $stderr = io\n\n  mi = (ok+ng)/2\n  eval(\"$#{mi}\")\n  if io.size == 0\n    ok = mi\n  else\n    ng = mi\n  end\n\n  $stderr = STDERR\nend\n\np ok #=> 1073741823\n```\n\n別の方法で確認してみても、`$1073741823`が最大で、それよりも大きい値になると警告がでるようです。ただ1073741823という値はいかにも環境依存っぽいので、環境によってはもっと大きい値まで使えるかもしれませんし、もっと小さい値で警告が出てくるかもしれません。\n\n```\n$ ruby -e '$1073741823' \n#=> 何も起きない\n\n$ ruby -e '$1073741824'\n#=> 警告が出力される\n#=> -e:1: warning: `$1073741824' is too big for a number variable, always nil\n```\n\n当然の疑問として、キャプチャ数が1073741823個を超える正規表現でマッチが成功した場合どうなるのかということですが、これは無問題。Rubyではキャプチャ数の上限が32767と決まっており、それを超えるような正規表現はコンパイルに失敗します。\n\n```\n$ ruby -e 'Regexp.compile(\"(.)\"*32767)' \n#=> 何も起きない\n\n$ ruby -e 'Regexp.compile(\"(.)\"*32768)'\n#=> RegexpErrorが発生する。メッセージは次の通り\n#=> `initialize': too many capture groups are specified:\n```\n\n自分は以下のような二分探索を用いた簡単なスクリプトで32767という値を見つけましたが、Rubyの正規表現エンジンである鬼雲のソースコードを見ると、[`ONIG_MAX_CAPTURE_GROUP_NUM`というキャプチャ数の上限を示す変数があって、これが32767になっているようです。](https://github.com/ruby/ruby/blob/c5eb24349a4535948514fe765c3ddb0628d81004/include/ruby/onigmo.h#L438) であれば、特殊変数`$1, $2, $3 ...`の側の最大値を32767にしてもよいような気はしますが(´・ω・`)\n\n```ruby\nok = 0\nng = 10**8\n\nwhile (ok-ng).abs > 1\n  mi = (ok+ng)/2\n  begin\n    Regexp.compile(\"(.)\"*mi)\n    ok = mi\n  rescue RegexpError => e\n    ng = mi\n  end\nend\n\np ok #=> 32767\n```\n\n**環境情報**\n\n```\n$ ruby -v\nruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux]\n```\n","coediting":false,"comments_count":0,"created_at":"2020-09-26T16:31:14+09:00","group":null,"id":"fa7d7b6f2f9d09098f30","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]}],"title":"特殊変数$1, $2, $3 ... で巨大な整数を使おうとすると、警告が表示される","updated_at":"2020-09-26T16:31:14+09:00","url":"https://qiita.com/neko_the_shadow/items/fa7d7b6f2f9d09098f30","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":183,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}