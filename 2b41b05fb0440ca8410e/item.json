{"rendered_body":"<p>Excel大好き日本企業にシステムを納めるJava大好きSIerとして働いている以上、避けては通れないのが<a href=\"https://poi.apache.org/\" rel=\"nofollow noopener\" target=\"_blank\">Apache POI</a>。POIはExcelのセルを抽象化した<code>Cell</code>というクラス(インタフェース)を持つのですが、この<code>Cell</code>から値を取り出すのが意外と面倒。とりわけ<strong>セルの表示形式(<code>CellType</code>)に合わせてメソッドを呼び分ける必要があり、かつ<code>CellType</code>に合致しないメソッドを呼び出した場合は即座に例外を投げる</strong>という仕様には何度苦しめられたことか(´・ω・｀)</p>\n\n<p>そこで<strong><code>CellType</code>を問わず、透過的にセルの値を取得できるユーティリティメソッド</strong>を準備しておくことにしました。なお簡単な仕様としては以下の通りです。</p>\n\n<ul>\n<li>POIがサポートする<code>CellType</code>のうち<code>BLANK</code>, <code>BOOLEAN</code>, <code>NUMERIC</code>, <code>STRING</code>のみを対象とする。ただし日付についてもサポートする。</li>\n<li>戻り値は<code>Object</code>型とする。キャストするなり<code>String#valueOf</code>なり好きにすること。</li>\n<li>サポートしない<code>ERROR</code>と<code>FORMULA</code>の場合は例外を送出する\n\n<ul>\n<li>以下はサンプルのため<code>RuntimeException</code>を投げているが、実際に利用する場合はちゃんとした例外(?)をスローすること。</li>\n</ul>\n</li>\n<li>\n<code>null</code>安全ではない。つまり引数が<code>null</code>の場合は<code>NullPointerException</code>を投げる。また万が一に備えてPOIがサポートしていない<code>CellType</code>のセルが引数と渡された場合も例外とする。</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kn\">package</span> <span class=\"nn\">my.excel</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Objects</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.Cell</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.CellType</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.DateUtil</span><span class=\"o\">;</span>\n\n<span class=\"kd\">final</span> <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CellUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Object</span> <span class=\"nf\">getCellValue</span><span class=\"o\">(</span><span class=\"nc\">Cell</span> <span class=\"n\">cell</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">requireNonNull</span><span class=\"o\">(</span><span class=\"n\">cell</span><span class=\"o\">,</span> <span class=\"s\">\"cell is null\"</span><span class=\"o\">);</span>\n\n        <span class=\"nc\">CellType</span> <span class=\"n\">cellType</span> <span class=\"o\">=</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"na\">getCellTypeEnum</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cellType</span> <span class=\"o\">==</span> <span class=\"nc\">CellType</span><span class=\"o\">.</span><span class=\"na\">BLANK</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cellType</span> <span class=\"o\">==</span> <span class=\"nc\">CellType</span><span class=\"o\">.</span><span class=\"na\">BOOLEAN</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"na\">getBooleanCellValue</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cellType</span> <span class=\"o\">==</span> <span class=\"nc\">CellType</span><span class=\"o\">.</span><span class=\"na\">ERROR</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">\"Error cell is unsupported\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cellType</span> <span class=\"o\">==</span> <span class=\"nc\">CellType</span><span class=\"o\">.</span><span class=\"na\">FORMULA</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">\"Formula cell is unsupported\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cellType</span> <span class=\"o\">==</span> <span class=\"nc\">CellType</span><span class=\"o\">.</span><span class=\"na\">NUMERIC</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">DateUtil</span><span class=\"o\">.</span><span class=\"na\">isCellDateFormatted</span><span class=\"o\">(</span><span class=\"n\">cell</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"na\">getDateCellValue</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"na\">getNumericCellValue</span><span class=\"o\">();</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">cellType</span> <span class=\"o\">==</span> <span class=\"nc\">CellType</span><span class=\"o\">.</span><span class=\"na\">STRING</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"na\">getStringCellValue</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> <span class=\"k\">else</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">\"Unknow type cell\"</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>では実際に利用してみましょう(´・ω・｀) まずは次のような<code>sample.xlsx</code>を用意します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/0c7548c0ec70d9e4b7ad920c586d230f388b4905/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353835392f35346636353932382d383333352d653064332d343639622d3063383333613138343532352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2F54f65928-8335-e0d3-469b-0c833a184525.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=592d57e7d6e604cd3f20af3d32e8297c\" alt=\"sample.PNG\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105859/54f65928-8335-e0d3-469b-0c833a184525.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2F54f65928-8335-e0d3-469b-0c833a184525.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0fd03c70bd46685cfaef2bbe9d8319c1 1x\" loading=\"lazy\"></a></p>\n\n<p>あとは次のようなコードを書いて、正しく読み込めるかどうかを確認してみます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kn\">package</span> <span class=\"nn\">my.excel</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Files</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Path</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Paths</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.EncryptedDocumentException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.openxml4j.exceptions.InvalidFormatException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.Cell</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.Row</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.Sheet</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.Workbook</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.poi.ss.usermodel.WorkbookFactory</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"o\">...</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"C:\\\\hogehoge\\\\sample.xlsx\"</span><span class=\"o\">);</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">Workbook</span> <span class=\"n\">workbook</span> <span class=\"o\">=</span> <span class=\"nc\">WorkbookFactory</span><span class=\"o\">.</span><span class=\"na\">create</span><span class=\"o\">(</span><span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">newInputStream</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Sheet</span> <span class=\"n\">sheet</span> <span class=\"o\">=</span> <span class=\"n\">workbook</span><span class=\"o\">.</span><span class=\"na\">getSheetAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">getLastRowNum</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n                <span class=\"nc\">Row</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">getRow</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">);</span>\n                <span class=\"nc\">Cell</span> <span class=\"n\">cell</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"na\">getCell</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"c1\">// B列のセルを取得する。</span>\n                <span class=\"nc\">Object</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nc\">CellUtils</span><span class=\"o\">.</span><span class=\"na\">getCellValue</span><span class=\"o\">(</span><span class=\"n\">cell</span><span class=\"o\">);</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">value</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> \n                    <span class=\"o\">|</span> <span class=\"nc\">InvalidFormatException</span> \n                    <span class=\"o\">|</span> <span class=\"nc\">EncryptedDocumentException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span> \n    <span class=\"o\">}</span>\n <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>コンパイルして実行した結果を確認してみると――確かに想定通り機能していることがわかります。やったね(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>ABC\ntrue\n100.0\nMon Jan 02 00:00:00 JST 2017\n</code></pre></div></div>\n","body":"\nExcel大好き日本企業にシステムを納めるJava大好きSIerとして働いている以上、避けては通れないのが[Apache POI](https://poi.apache.org/)。POIはExcelのセルを抽象化した`Cell`というクラス(インタフェース)を持つのですが、この`Cell`から値を取り出すのが意外と面倒。とりわけ__セルの表示形式(`CellType`)に合わせてメソッドを呼び分ける必要があり、かつ`CellType`に合致しないメソッドを呼び出した場合は即座に例外を投げる__という仕様には何度苦しめられたことか(´・ω・｀)\n\nそこで__`CellType`を問わず、透過的にセルの値を取得できるユーティリティメソッド__を準備しておくことにしました。なお簡単な仕様としては以下の通りです。\n\n- POIがサポートする`CellType`のうち`BLANK`, `BOOLEAN`, `NUMERIC`, `STRING`のみを対象とする。ただし日付についてもサポートする。\n- 戻り値は`Object`型とする。キャストするなり`String#valueOf`なり好きにすること。\n- サポートしない`ERROR`と`FORMULA`の場合は例外を送出する\n    - 以下はサンプルのため`RuntimeException`を投げているが、実際に利用する場合はちゃんとした例外(?)をスローすること。\n- `null`安全ではない。つまり引数が`null`の場合は`NullPointerException`を投げる。また万が一に備えてPOIがサポートしていない`CellType`のセルが引数と渡された場合も例外とする。\n\n\n```java\npackage my.excel;\n\nimport java.util.Objects;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.CellType;\nimport org.apache.poi.ss.usermodel.DateUtil;\n\nfinal public class CellUtils {\n\n    public static Object getCellValue(Cell cell) {\n        Objects.requireNonNull(cell, \"cell is null\");\n        \n        CellType cellType = cell.getCellTypeEnum();\n        if (cellType == CellType.BLANK) {\n            return null;\n        } else if (cellType == CellType.BOOLEAN) {\n            return cell.getBooleanCellValue();\n        } else if (cellType == CellType.ERROR) {\n            throw new RuntimeException(\"Error cell is unsupported\");\n        } else if (cellType == CellType.FORMULA) {\n            throw new RuntimeException(\"Formula cell is unsupported\");\n        } else if (cellType == CellType.NUMERIC) {\n            if (DateUtil.isCellDateFormatted(cell)) {\n                return cell.getDateCellValue();\n            } else {\n                return cell.getNumericCellValue();\n            }\n        } else if (cellType == CellType.STRING) {\n            return cell.getStringCellValue();\n        } else {\n            throw new RuntimeException(\"Unknow type cell\");\n        }\n    }\n    \n}\n```\nでは実際に利用してみましょう(´・ω・｀) まずは次のような`sample.xlsx`を用意します。\n\n![sample.PNG](https://qiita-image-store.s3.amazonaws.com/0/105859/54f65928-8335-e0d3-469b-0c833a184525.png)\n\nあとは次のようなコードを書いて、正しく読み込めるかどうかを確認してみます。\n\n```java\npackage my.excel;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport org.apache.poi.EncryptedDocumentException;\nimport org.apache.poi.openxml4j.exceptions.InvalidFormatException;\nimport org.apache.poi.ss.usermodel.Cell;\nimport org.apache.poi.ss.usermodel.Row;\nimport org.apache.poi.ss.usermodel.Sheet;\nimport org.apache.poi.ss.usermodel.Workbook;\nimport org.apache.poi.ss.usermodel.WorkbookFactory;\n\npublic class Main {\n    public static void main(String ... args) {\n        Path path = Paths.get(\"C:\\\\hogehoge\\\\sample.xlsx\");\n        try (Workbook workbook = WorkbookFactory.create(Files.newInputStream(path))) {\n            Sheet sheet = workbook.getSheetAt(0);\n            for (int i = 0; i <= sheet.getLastRowNum(); i++) {\n                Row row = sheet.getRow(i);\n                Cell cell = row.getCell(1); // B列のセルを取得する。\n                Object value = CellUtils.getCellValue(cell);\n                System.out.println(value);\n            }\n        } catch (IOException \n                    | InvalidFormatException \n                    | EncryptedDocumentException e) {\n            e.printStackTrace();\n        } \n    }\n }\n```\n\nコンパイルして実行した結果を確認してみると――確かに想定通り機能していることがわかります。やったね(´・ω・｀)\n\n```\nABC\ntrue\n100.0\nMon Jan 02 00:00:00 JST 2017\n```\n","coediting":false,"comments_count":0,"created_at":"2017-07-09T23:55:35+09:00","group":null,"id":"2b41b05fb0440ca8410e","likes_count":9,"private":false,"reactions_count":0,"stocks_count":12,"tags":[{"name":"Java","versions":[]},{"name":"POI","versions":[]}],"title":"CellTypeを問わず、Cellの値を透過的に取得したい(Apache POI)","updated_at":"2017-07-09T23:55:35+09:00","url":"https://qiita.com/neko_the_shadow/items/2b41b05fb0440ca8410e","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":207,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":24970,"team_membership":null}