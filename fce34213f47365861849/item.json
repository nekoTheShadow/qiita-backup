{"rendered_body":"<p>仕事のコードレビュー中、レビュイーから質問されたことをメモにしておきます(´・ω・｀)</p>\n\n<h1>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n\n<p>以下のような複合主キーを持つテーブルがあるとします。</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">t</span> <span class=\"p\">(</span>\n  <span class=\"n\">col1</span> <span class=\"nb\">CHAR</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"n\">col2</span> <span class=\"nb\">CHAR</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"n\">col3</span> <span class=\"nb\">CHAR</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"n\">col4</span> <span class=\"nb\">CHAR</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n  <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span> <span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">col3</span><span class=\"p\">,</span> <span class=\"n\">col4</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>このテーブルから以下のような条件を満たす行を取得したいとします (よくあるやつですね)</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">col1</th>\n<th style=\"text-align: center\">col2</th>\n<th style=\"text-align: center\">col3</th>\n<th style=\"text-align: center\">col4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">A</td>\n<td style=\"text-align: center\">B</td>\n<td style=\"text-align: center\">C</td>\n<td style=\"text-align: center\">D</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">E</td>\n<td style=\"text-align: center\">F</td>\n<td style=\"text-align: center\">G</td>\n<td style=\"text-align: center\">H</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">I</td>\n<td style=\"text-align: center\">J</td>\n<td style=\"text-align: center\">K</td>\n<td style=\"text-align: center\">L</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">M</td>\n<td style=\"text-align: center\">N</td>\n<td style=\"text-align: center\">O</td>\n<td style=\"text-align: center\">P</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">Q</td>\n<td style=\"text-align: center\">R</td>\n<td style=\"text-align: center\">S</td>\n<td style=\"text-align: center\">T</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">U</td>\n<td style=\"text-align: center\">V</td>\n<td style=\"text-align: center\">W</td>\n<td style=\"text-align: center\">X</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">Y</td>\n<td style=\"text-align: center\">Z</td>\n<td style=\"text-align: center\">A</td>\n<td style=\"text-align: center\">B</td>\n</tr>\n</tbody>\n</table>\n\n<p>SQLコーディング規約として、INの利用が推奨されていたこともあり、レビュイーの提出したSQLは以下のようなものでした (これをSQL1とします)</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">t</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">CONCAT</span><span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"s1\">'@'</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"s1\">'@'</span><span class=\"p\">,</span> <span class=\"n\">col3</span><span class=\"p\">,</span> <span class=\"s1\">'@'</span><span class=\"p\">,</span> <span class=\"n\">col4</span><span class=\"p\">)</span> <span class=\"k\">IN</span> <span class=\"p\">(</span>\n  <span class=\"s1\">'A@B@C@D'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'E@F@G@H'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'I@J@K@L'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'M@N@O@P'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Q@R@S@T'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'U@V@W@X'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'Y@Z@A@B'</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>自分はレビュアーとして「SQL1はインデックスが利かない可能性があるから、以下のように修正してほしい」とお願いしました (これをSQL2とします)</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">t</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'B'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'C'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'D'</span><span class=\"p\">)</span>\n   <span class=\"k\">OR</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'E'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'F'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'G'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'H'</span><span class=\"p\">)</span>\n   <span class=\"k\">OR</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'I'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'J'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'K'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'L'</span><span class=\"p\">)</span>\n   <span class=\"k\">OR</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'M'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'N'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'O'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'P'</span><span class=\"p\">)</span>\n   <span class=\"k\">OR</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'Q'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'R'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'S'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'T'</span><span class=\"p\">)</span>\n   <span class=\"k\">OR</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'U'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'V'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'W'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'X'</span><span class=\"p\">)</span>\n   <span class=\"k\">OR</span> <span class=\"p\">(</span><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"s1\">'Y'</span> <span class=\"k\">AND</span> <span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"s1\">'Z'</span> <span class=\"k\">AND</span> <span class=\"n\">col3</span> <span class=\"o\">=</span> <span class=\"s1\">'A'</span> <span class=\"k\">AND</span> <span class=\"n\">col4</span> <span class=\"o\">=</span> <span class=\"s1\">'B'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>ちなみにSQLServerはいわゆる行値式をサポートしていないため、以下のようなSQLは不正になります。</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">t</span>\n<span class=\"k\">WHERE</span> <span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">col3</span><span class=\"p\">,</span> <span class=\"n\">col4</span><span class=\"p\">)</span> <span class=\"k\">IN</span> <span class=\"p\">(</span>\n  <span class=\"p\">(</span><span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">,</span> <span class=\"s1\">'C'</span><span class=\"p\">,</span> <span class=\"s1\">'D'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'E'</span><span class=\"p\">,</span> <span class=\"s1\">'F'</span><span class=\"p\">,</span> <span class=\"s1\">'G'</span><span class=\"p\">,</span> <span class=\"s1\">'H'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'I'</span><span class=\"p\">,</span> <span class=\"s1\">'J'</span><span class=\"p\">,</span> <span class=\"s1\">'K'</span><span class=\"p\">,</span> <span class=\"s1\">'L'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'M'</span><span class=\"p\">,</span> <span class=\"s1\">'N'</span><span class=\"p\">,</span> <span class=\"s1\">'O'</span><span class=\"p\">,</span> <span class=\"s1\">'P'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'Q'</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"s1\">'S'</span><span class=\"p\">,</span> <span class=\"s1\">'T'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'U'</span><span class=\"p\">,</span> <span class=\"s1\">'V'</span><span class=\"p\">,</span> <span class=\"s1\">'W'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">),</span>\n  <span class=\"p\">(</span><span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"s1\">'Z'</span><span class=\"p\">,</span> <span class=\"s1\">'A'</span><span class=\"p\">,</span> <span class=\"s1\">'B'</span><span class=\"p\">)</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"実行計画\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E8%A8%88%E7%94%BB\"><i class=\"fa fa-link\"></i></a>実行計画</h1>\n\n<p>レビューコメントでいろいろ説明したのですが、いまいち納得してもらえなかったので、実際に実行計画を見てもらうことにしました。</p>\n\n<p>まず以下のようなSQLで、テストデータ456976件(=26の4乗)を投入します。</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">WITH</span> <span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"n\">alphabet</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n            <span class=\"k\">SELECT</span> <span class=\"s1\">'A'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'B'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'C'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'D'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'E'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'F'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'G'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'H'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'I'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'J'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'K'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'L'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'M'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'N'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'O'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'P'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'Q'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'R'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'S'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'T'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'U'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'V'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'W'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'X'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'Y'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span> <span class=\"k\">SELECT</span> <span class=\"s1\">'Z'</span>\n<span class=\"p\">)</span>\n<span class=\"k\">INSERT</span> <span class=\"k\">INTO</span> <span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"n\">col1</span><span class=\"p\">,</span> <span class=\"n\">col2</span><span class=\"p\">,</span> <span class=\"n\">col3</span><span class=\"p\">,</span> <span class=\"n\">col4</span><span class=\"p\">)</span>\n<span class=\"k\">SELECT</span> \n  <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">alphabet</span><span class=\"p\">,</span>\n  <span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">alphabet</span><span class=\"p\">,</span>\n  <span class=\"k\">c</span><span class=\"p\">.</span><span class=\"n\">alphabet</span><span class=\"p\">,</span>\n  <span class=\"n\">d</span><span class=\"p\">.</span><span class=\"n\">alphabet</span>\n<span class=\"k\">FROM</span> <span class=\"n\">s</span> <span class=\"k\">AS</span> <span class=\"n\">a</span>\n<span class=\"k\">CROSS</span> <span class=\"k\">JOIN</span> <span class=\"n\">s</span> <span class=\"k\">AS</span> <span class=\"n\">b</span>\n<span class=\"k\">CROSS</span> <span class=\"k\">JOIN</span> <span class=\"n\">s</span> <span class=\"k\">AS</span> <span class=\"k\">c</span>\n<span class=\"k\">CROSS</span> <span class=\"k\">JOIN</span> <span class=\"n\">s</span> <span class=\"k\">AS</span> <span class=\"n\">d</span>\n</code></pre></div></div>\n\n<p>あとは実行計画を取得するだけです。まずはSQL1から。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>SHOWPLAN_ALL  (2.771)\n +-Filter(WHERE:([Expr1002]='Y@Z@A@B' OR [Expr1002]='U@V@W@X' OR [Expr1002]='Q@R@S@T' OR [Expr1002]='M@N@O@P' OR [Expr1002]='I@J@K@L' OR [Expr1002]='E@F@G@H' OR [Expr1002]='A@B@C@D'))  (2.771)\n    +-Compute Scalar(DEFINE:([Expr1002]=concat([master].[dbo].[t].[col1],'@',[master].[dbo].[t].[col2],'@',[master].[dbo].[t].[col3],'@',[master].[dbo].[t].[col4])))  (1.684)\n       +-Clustered Index Scan(OBJECT:([master].[dbo].[t].[PK__t__193CF730906FC80E]))  (1.638)\n</code></pre></div></div>\n\n<p>次にSQL2の実行計画は以下のようになりました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>SHOWPLAN_ALL  (0.003)\n +-Clustered Index Seek(OBJECT:([master].[dbo].[t].[PK__t__193CF730906FC80E]), SEEK:([master].[dbo].[t].[col1]='A' AND [master].[dbo].[t].[col2]='B' AND [master].[dbo].[t].[col3]='C' AND [master].[dbo].[t].[col4]='D' OR [master].[dbo].[t].[col1]='E' AND [master].[dbo].[t].[col2]='F' AND [master].[dbo].[t].[col3]='G' AND [master].[dbo].[t].[col4]='H' OR [master].[dbo].[t].[col1]='I' AND [master].[dbo].[t].[col2]='J' AND [master].[dbo].[t].[col3]='K' AND [master].[dbo].[t].[col4]='L' OR [master].[dbo].[t].[col1]='M' AND [master].[dbo].[t].[col2]='N' AND [master].[dbo].[t].[col3]='O' AND [master].[dbo].[t].[col4]='P' OR [master].[dbo].[t].[col1]='Q' AND [master].[dbo].[t].[col2]='R' AND [master].[dbo].[t].[col3]='S' AND [master].[dbo].[t].[col4]='T' OR [master].[dbo].[t].[col1]='U' AND [master].[dbo].[t].[col2]='V' AND [master].[dbo].[t].[col3]='W' AND [master].[dbo].[t].[col4]='X' OR [master].[dbo].[t].[col1]='Y' AND [master].[dbo].[t].[col2]='Z' AND [master].[dbo].[t].[col3]='A' AND [master].[dbo].[t].[col4]='B') ORDERED FORWARD)  (0.003)\n</code></pre></div></div>\n\n<h1>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h1>\n\n<p>SQL1のコストは2.771、一方、SQL2のコストは0.003で、パフォーマンスに大きく違いがあることが一目でわかりますね。この差の原因は何かというと、インデックスが使えているかどうかで、SQL1はClustered Index Scanで全量走査になっているのに対して、SQL2はClustered Index Seekなので、インデックスが適切に利用されています。</p>\n\n<p>データ件数が少ないので、この程度のパフォーマンス差におさまっていますが、データ量が増えてくると、SQL1のようなSQLは実用に耐えなくなる可能性があります。</p>\n\n<h1>\n<span id=\"環境情報\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>環境情報</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Microsoft SQL Server 2019 (RTM-CU9) (KB5000642) - 15.0.4102.2 (X64) \n    Jan 25 2021 20:16:12 \n    Copyright (C) 2019 Microsoft Corporation\n    Developer Edition (64-bit) on Linux (Ubuntu 18.04.5 LTS) &lt;X64&gt;\n</code></pre></div></div>\n","body":"仕事のコードレビュー中、レビュイーから質問されたことをメモにしておきます(´・ω・｀)\n\n# 前提\n\n以下のような複合主キーを持つテーブルがあるとします。\n\n```SQL\nCREATE TABLE t (\n  col1 CHAR(1),\n  col2 CHAR(1),\n  col3 CHAR(1),\n  col4 CHAR(1),\n  PRIMARY KEY (col1, col2, col3, col4)\n)\n```\n\nこのテーブルから以下のような条件を満たす行を取得したいとします (よくあるやつですね)\n\n|col1|col2|col3|col4|\n|:-:|:-:|:-:|:-:|\n|A|B|C|D|\n|E|F|G|H|\n|I|J|K|L|\n|M|N|O|P|\n|Q|R|S|T|\n|U|V|W|X|\n|Y|Z|A|B|\n\nSQLコーディング規約として、INの利用が推奨されていたこともあり、レビュイーの提出したSQLは以下のようなものでした (これをSQL1とします)\n\n```SQL\nSELECT *\nFROM t\nWHERE CONCAT(col1, '@', col2, '@', col3, '@', col4) IN (\n  'A@B@C@D',\n  'E@F@G@H',\n  'I@J@K@L',\n  'M@N@O@P',\n  'Q@R@S@T',\n  'U@V@W@X',\n  'Y@Z@A@B'\n);\n```\n\n自分はレビュアーとして「SQL1はインデックスが利かない可能性があるから、以下のように修正してほしい」とお願いしました (これをSQL2とします)\n\n```SQL\nSELECT *\nFROM t\nWHERE (col1 = 'A' AND col2 = 'B' AND col3 = 'C' AND col4 = 'D')\n   OR (col1 = 'E' AND col2 = 'F' AND col3 = 'G' AND col4 = 'H')\n   OR (col1 = 'I' AND col2 = 'J' AND col3 = 'K' AND col4 = 'L')\n   OR (col1 = 'M' AND col2 = 'N' AND col3 = 'O' AND col4 = 'P')\n   OR (col1 = 'Q' AND col2 = 'R' AND col3 = 'S' AND col4 = 'T')\n   OR (col1 = 'U' AND col2 = 'V' AND col3 = 'W' AND col4 = 'X')\n   OR (col1 = 'Y' AND col2 = 'Z' AND col3 = 'A' AND col4 = 'B')\n```\n\nちなみにSQLServerはいわゆる行値式をサポートしていないため、以下のようなSQLは不正になります。\n\n```SQL\nSELECT *\nFROM t\nWHERE (col1, col2, col3, col4) IN (\n  ('A', 'B', 'C', 'D'),\n  ('E', 'F', 'G', 'H'),\n  ('I', 'J', 'K', 'L'),\n  ('M', 'N', 'O', 'P'),\n  ('Q', 'R', 'S', 'T'),\n  ('U', 'V', 'W', 'X'),\n  ('Y', 'Z', 'A', 'B')\n);\n```\n\n# 実行計画\n\nレビューコメントでいろいろ説明したのですが、いまいち納得してもらえなかったので、実際に実行計画を見てもらうことにしました。\n\nまず以下のようなSQLで、テストデータ456976件(=26の4乗)を投入します。\n\n```SQL\nWITH s (alphabet) AS (\n            SELECT 'A'\n  UNION ALL SELECT 'B'\n  UNION ALL SELECT 'C'\n  UNION ALL SELECT 'D'\n  UNION ALL SELECT 'E'\n  UNION ALL SELECT 'F'\n  UNION ALL SELECT 'G'\n  UNION ALL SELECT 'H'\n  UNION ALL SELECT 'I'\n  UNION ALL SELECT 'J'\n  UNION ALL SELECT 'K'\n  UNION ALL SELECT 'L'\n  UNION ALL SELECT 'M'\n  UNION ALL SELECT 'N'\n  UNION ALL SELECT 'O'\n  UNION ALL SELECT 'P'\n  UNION ALL SELECT 'Q'\n  UNION ALL SELECT 'R'\n  UNION ALL SELECT 'S'\n  UNION ALL SELECT 'T'\n  UNION ALL SELECT 'U'\n  UNION ALL SELECT 'V'\n  UNION ALL SELECT 'W'\n  UNION ALL SELECT 'X'\n  UNION ALL SELECT 'Y'\n  UNION ALL SELECT 'Z'\n)\nINSERT INTO t (col1, col2, col3, col4)\nSELECT \n  a.alphabet,\n  b.alphabet,\n  c.alphabet,\n  d.alphabet\nFROM s AS a\nCROSS JOIN s AS b\nCROSS JOIN s AS c\nCROSS JOIN s AS d\n```\n\nあとは実行計画を取得するだけです。まずはSQL1から。\n\n```\nSHOWPLAN_ALL  (2.771)\n +-Filter(WHERE:([Expr1002]='Y@Z@A@B' OR [Expr1002]='U@V@W@X' OR [Expr1002]='Q@R@S@T' OR [Expr1002]='M@N@O@P' OR [Expr1002]='I@J@K@L' OR [Expr1002]='E@F@G@H' OR [Expr1002]='A@B@C@D'))  (2.771)\n    +-Compute Scalar(DEFINE:([Expr1002]=concat([master].[dbo].[t].[col1],'@',[master].[dbo].[t].[col2],'@',[master].[dbo].[t].[col3],'@',[master].[dbo].[t].[col4])))  (1.684)\n       +-Clustered Index Scan(OBJECT:([master].[dbo].[t].[PK__t__193CF730906FC80E]))  (1.638)\n```\n\n次にSQL2の実行計画は以下のようになりました。\n\n```\nSHOWPLAN_ALL  (0.003)\n +-Clustered Index Seek(OBJECT:([master].[dbo].[t].[PK__t__193CF730906FC80E]), SEEK:([master].[dbo].[t].[col1]='A' AND [master].[dbo].[t].[col2]='B' AND [master].[dbo].[t].[col3]='C' AND [master].[dbo].[t].[col4]='D' OR [master].[dbo].[t].[col1]='E' AND [master].[dbo].[t].[col2]='F' AND [master].[dbo].[t].[col3]='G' AND [master].[dbo].[t].[col4]='H' OR [master].[dbo].[t].[col1]='I' AND [master].[dbo].[t].[col2]='J' AND [master].[dbo].[t].[col3]='K' AND [master].[dbo].[t].[col4]='L' OR [master].[dbo].[t].[col1]='M' AND [master].[dbo].[t].[col2]='N' AND [master].[dbo].[t].[col3]='O' AND [master].[dbo].[t].[col4]='P' OR [master].[dbo].[t].[col1]='Q' AND [master].[dbo].[t].[col2]='R' AND [master].[dbo].[t].[col3]='S' AND [master].[dbo].[t].[col4]='T' OR [master].[dbo].[t].[col1]='U' AND [master].[dbo].[t].[col2]='V' AND [master].[dbo].[t].[col3]='W' AND [master].[dbo].[t].[col4]='X' OR [master].[dbo].[t].[col1]='Y' AND [master].[dbo].[t].[col2]='Z' AND [master].[dbo].[t].[col3]='A' AND [master].[dbo].[t].[col4]='B') ORDERED FORWARD)  (0.003)\n```\n\n# 結論\n\nSQL1のコストは2.771、一方、SQL2のコストは0.003で、パフォーマンスに大きく違いがあることが一目でわかりますね。この差の原因は何かというと、インデックスが使えているかどうかで、SQL1はClustered Index Scanで全量走査になっているのに対して、SQL2はClustered Index Seekなので、インデックスが適切に利用されています。\n\nデータ件数が少ないので、この程度のパフォーマンス差におさまっていますが、データ量が増えてくると、SQL1のようなSQLは実用に耐えなくなる可能性があります。\n\n# 環境情報\n\n```\nMicrosoft SQL Server 2019 (RTM-CU9) (KB5000642) - 15.0.4102.2 (X64) \n\tJan 25 2021 20:16:12 \n\tCopyright (C) 2019 Microsoft Corporation\n\tDeveloper Edition (64-bit) on Linux (Ubuntu 18.04.5 LTS) <X64>\n```\n","coediting":false,"comments_count":0,"created_at":"2021-03-27T12:41:17+09:00","group":null,"id":"fce34213f47365861849","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"SQLServer","versions":[]}],"title":"文字列結合を使うと、インデックスがうまく使われない場合がある","updated_at":"2021-03-27T12:44:11+09:00","url":"https://qiita.com/neko_the_shadow/items/fce34213f47365861849","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":2172,"team_membership":null,"organization_url_name":null}