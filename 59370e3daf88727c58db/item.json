{"rendered_body":"<p>Javaアプリケーションサーバの保守運用をしていると、現在起動しているスレッドの数や状況を知りたいということがあります。一般的なJavaアプリケーションサーバであれば、何らかのヘルスチェック機能が付属していると思いますが、状況によってはそのような機能が利用できないこともあると思います。そのような状況で、どのようにすればスレッドの数や状況を知ることができるでしょうか?</p>\n\n<h1>\n<span id=\"例\" class=\"fragment\"></span><a href=\"#%E4%BE%8B\"><i class=\"fa fa-link\"></i></a>例</h1>\n\n<p>以下の<code>Server.java</code>はJavaアプリケーションサーバを模したプログラムで、3つの子スレッドをforkします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Server.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">java.util.ArrayList</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.List</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Server</span><span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">InterruptedException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// 3個の子スレッドをforkする。</span>\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Thread</span><span class=\"o\">&gt;</span> <span class=\"n\">threads</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span>   <span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Thread</span> <span class=\"n\">thread</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Thread</span><span class=\"o\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">sleepForever</span><span class=\"o\">());</span>\n            <span class=\"n\">thread</span><span class=\"o\">.</span><span class=\"na\">start</span><span class=\"o\">();</span>\n            <span class=\"n\">threads</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">thread</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 親スレッド自体をsleepさせる。</span>\n        <span class=\"n\">sleepForever</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">sleepForever</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Thread</span><span class=\"o\">.</span><span class=\"na\">sleep</span><span class=\"o\">(</span><span class=\"nc\">Long</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">InterruptedException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>これをコンパイルし、実行しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ java Server &amp;\n[1] 404\n</code></pre></div></div>\n\n<h1>\n<span id=\"1-jstack\" class=\"fragment\"></span><a href=\"#1-jstack\"><i class=\"fa fa-link\"></i></a>(1) jstack</h1>\n\n<p>スレッドの数や状態を知りたいのであれば<code>jstack</code>がベストではないでしょうか。<code>jstack</code>はJDKに付属するコマンドなので、Javaアプリケーションサーバを使用しているシステムであれば、利用できることも多いはず。</p>\n\n<p>以下は<code>jstack</code>の実行例です。<code>main</code>スレッド、その子スレッドである<code>Thread-0</code><code>Thread-1</code><code>Thread-2</code>に加え、jvmが利用するいくつかのスレッドの状態がスタックトレースとともに表示されていることがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ jstack 404\n2019-12-26 00:06:09\nFull thread dump OpenJDK 64-Bit Server VM (11.0.4+11-post-Ubuntu-1ubuntu218.04.3 mixed mode, sharing):\n\nThreads class SMR info:\n_java_thread_list=0x00007f6a280029d0, length=13, elements={\n0x00007f6a74011800, 0x00007f6a74165000, 0x00007f6a74167000, 0x00007f6a7416f800,\n0x00007f6a74171800, 0x00007f6a74174000, 0x00007f6a74176000, 0x00007f6a741d8800,\n0x00007f6a741e2000, 0x00007f6a741f1800, 0x00007f6a741f3800, 0x00007f6a741f5000,\n0x00007f6a28001000\n}\n\n\"main\" #1 prio=5 os_prio=0 cpu=90.00ms elapsed=496.33s tid=0x00007f6a74011800 nid=0x195 waiting on condition  [0x00007f6a7b56f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.main(Server.java:15)\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=0 cpu=0.00ms elapsed=496.30s tid=0x00007f6a74165000 nid=0x19c waiting on condition  [0x00007f6a58adf000]\n   java.lang.Thread.State: RUNNABLE\n        at java.lang.ref.Reference.waitForReferencePendingList(java.base@11.0.4/Native Method)\n        at java.lang.ref.Reference.processPendingReferences(java.base@11.0.4/Reference.java:241)\n        at java.lang.ref.Reference$ReferenceHandler.run(java.base@11.0.4/Reference.java:213)\n\n\"Finalizer\" #3 daemon prio=8 os_prio=0 cpu=0.00ms elapsed=496.30s tid=0x00007f6a74167000 nid=0x19d in Object.wait()  [0x00007f6a589cf000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(java.base@11.0.4/Native Method)\n        - waiting on &lt;0x000000074e50a2c8&gt; (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.4/ReferenceQueue.java:155)\n        - waiting to re-lock in wait() &lt;0x000000074e50a2c8&gt; (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.4/ReferenceQueue.java:176)\n        at java.lang.ref.Finalizer$FinalizerThread.run(java.base@11.0.4/Finalizer.java:170)\n\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=496.29s tid=0x00007f6a7416f800 nid=0x19e runnable  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 cpu=10.00ms elapsed=496.29s tid=0x00007f6a74171800 nid=0x19f waiting on condition  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n   No compile task\n\n\"C1 CompilerThread0\" #8 daemon prio=9 os_prio=0 cpu=30.00ms elapsed=496.29s tid=0x00007f6a74174000 nid=0x1a0 waiting on condition  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n   No compile task\n\n\"Sweeper thread\" #9 daemon prio=9 os_prio=0 cpu=10.00ms elapsed=496.29s tid=0x00007f6a74176000 nid=0x1a1 runnable  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Service Thread\" #10 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=496.27s tid=0x00007f6a741d8800 nid=0x1a2 runnable  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Common-Cleaner\" #11 daemon prio=8 os_prio=0 cpu=0.00ms elapsed=496.26s tid=0x00007f6a741e2000 nid=0x1a4 in Object.wait()  [0x00007f6a17fef000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n        at java.lang.Object.wait(java.base@11.0.4/Native Method)\n        - waiting on &lt;0x000000074e416e98&gt; (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.4/ReferenceQueue.java:155)\n        - waiting to re-lock in wait() &lt;0x000000074e416e98&gt; (a java.lang.ref.ReferenceQueue$Lock)\n        at jdk.internal.ref.CleanerImpl.run(java.base@11.0.4/CleanerImpl.java:148)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n        at jdk.internal.misc.InnocuousThread.run(java.base@11.0.4/InnocuousThread.java:134)\n\n\"Thread-0\" #12 prio=5 os_prio=0 cpu=0.00ms elapsed=496.25s tid=0x00007f6a741f1800 nid=0x1a5 waiting on condition  [0x00007f6a17a9f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.lambda$0(Server.java:9)\n        at Server$$Lambda$1/0x0000000840060840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\n\"Thread-1\" #13 prio=5 os_prio=0 cpu=0.00ms elapsed=496.25s tid=0x00007f6a741f3800 nid=0x1a6 waiting on condition  [0x00007f6a1798f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.lambda$0(Server.java:9)\n        at Server$$Lambda$1/0x0000000840060840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\n\"Thread-2\" #14 prio=5 os_prio=0 cpu=0.00ms elapsed=496.25s tid=0x00007f6a741f5000 nid=0x1a7 waiting on condition  [0x00007f6a1787f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.lambda$0(Server.java:9)\n        at Server$$Lambda$1/0x0000000840060840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\n\"Attach Listener\" #15 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=0.10s tid=0x00007f6a28001000 nid=0x1dc waiting on condition  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"VM Thread\" os_prio=0 cpu=0.00ms elapsed=496.31s tid=0x00007f6a74162000 nid=0x19b runnable\n\n\"GC Thread#0\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74028000 nid=0x196 runnable\n\n\"G1 Main Marker\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74070800 nid=0x197 runnable\n\n\"G1 Conc#0\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74072800 nid=0x198 runnable\n\n\"G1 Refine#0\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74138000 nid=0x199 runnable\n\n\"G1 Young RemSet Sampling\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74139800 nid=0x19a runnable\n\"VM Periodic Task Thread\" os_prio=0 cpu=0.00ms elapsed=496.27s tid=0x00007f6a741db000 nid=0x1a3 waiting on condition\n\nJNI global refs: 6, weak refs: 0\n</code></pre></div></div>\n\n<h1>\n<span id=\"2-ps\" class=\"fragment\"></span><a href=\"#2-ps\"><i class=\"fa fa-link\"></i></a>(2) ps</h1>\n\n<p>Java on LinuxはスレッディングをOSのネィティブスレッドに委譲します。つまり「Javaのスレッド」=「OSのスレッド」という関係にあります。したがって、OSのスレッドの状態を確認できるコマンドを利用すれば、間接的にJavaのスレッドの状態も確認できるというわけです。</p>\n\n<p>OSのスレッドの状態を確認する方法はいくつかありますが、とりわけ汎用的で便利なのは<code>ps</code>でしょう。実行例は以下の通りです。スレッド名やスタックトレースなど、<code>jstack</code>に比べると情報量は少なくなりますが、簡単な確認程度であれば、この程度でも十分でしょう。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ ps -L mu 404\nUSER       PID   LWP %CPU NLWP %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\ndev        404     -  0.0   21  0.2 6100336 25820 tty1    -    Dec25   0:00 java Server\ndev          -   404  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   405  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   406  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   407  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   408  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   409  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   410  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   411  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   412  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   413  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   414  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   415  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   416  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   417  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   418  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   419  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   420  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   421  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   422  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   423  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   476  0.0    -    -      -     - -        Sl   00:06   0:00 -\n</code></pre></div></div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p>この記事は次の環境で稼働確認を行いました。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">software</th>\n<th style=\"text-align: left\">version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">OS</td>\n<td style=\"text-align: left\">Ubuntu 18.04.2 LTS (Windows Subsystem for Linux)</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">JDK</td>\n<td style=\"text-align: left\">openjdk 11.0.4 2019-07-16</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">ps</td>\n<td style=\"text-align: left\">ps from procps-ng 3.3.12</td>\n</tr>\n</tbody>\n</table>\n","body":"Javaアプリケーションサーバの保守運用をしていると、現在起動しているスレッドの数や状況を知りたいということがあります。一般的なJavaアプリケーションサーバであれば、何らかのヘルスチェック機能が付属していると思いますが、状況によってはそのような機能が利用できないこともあると思います。そのような状況で、どのようにすればスレッドの数や状況を知ることができるでしょうか?\n\n# 例\n\n以下の`Server.java`はJavaアプリケーションサーバを模したプログラムで、3つの子スレッドをforkします。\n\n```java:Server.java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Server{\n    public static void main(String[] args) throws InterruptedException {\n        // 3個の子スレッドをforkする。\n        List<Thread> threads = new ArrayList<>();\n        for (int i = 0; i < 3\t; i++) {\n            Thread thread = new Thread(() -> sleepForever());\n            thread.start();\n            threads.add(thread);\n        }\n\n        // 親スレッド自体をsleepさせる。\n        sleepForever();\n    }\n\n    private static void sleepForever() {\n        try {\n            Thread.sleep(Long.MAX_VALUE);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nこれをコンパイルし、実行しておきます。\n\n```\n$ java Server &\n[1] 404\n```\n\n# (1) jstack\n\nスレッドの数や状態を知りたいのであれば`jstack`がベストではないでしょうか。`jstack`はJDKに付属するコマンドなので、Javaアプリケーションサーバを使用しているシステムであれば、利用できることも多いはず。\n\n以下は`jstack`の実行例です。`main`スレッド、その子スレッドである`Thread-0``Thread-1``Thread-2`に加え、jvmが利用するいくつかのスレッドの状態がスタックトレースとともに表示されていることがわかります。\n\n```\n$ jstack 404\n2019-12-26 00:06:09\nFull thread dump OpenJDK 64-Bit Server VM (11.0.4+11-post-Ubuntu-1ubuntu218.04.3 mixed mode, sharing):\n\nThreads class SMR info:\n_java_thread_list=0x00007f6a280029d0, length=13, elements={\n0x00007f6a74011800, 0x00007f6a74165000, 0x00007f6a74167000, 0x00007f6a7416f800,\n0x00007f6a74171800, 0x00007f6a74174000, 0x00007f6a74176000, 0x00007f6a741d8800,\n0x00007f6a741e2000, 0x00007f6a741f1800, 0x00007f6a741f3800, 0x00007f6a741f5000,\n0x00007f6a28001000\n}\n\n\"main\" #1 prio=5 os_prio=0 cpu=90.00ms elapsed=496.33s tid=0x00007f6a74011800 nid=0x195 waiting on condition  [0x00007f6a7b56f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.main(Server.java:15)\n\n\"Reference Handler\" #2 daemon prio=10 os_prio=0 cpu=0.00ms elapsed=496.30s tid=0x00007f6a74165000 nid=0x19c waiting on condition  [0x00007f6a58adf000]\n   java.lang.Thread.State: RUNNABLE\n        at java.lang.ref.Reference.waitForReferencePendingList(java.base@11.0.4/Native Method)\n        at java.lang.ref.Reference.processPendingReferences(java.base@11.0.4/Reference.java:241)\n        at java.lang.ref.Reference$ReferenceHandler.run(java.base@11.0.4/Reference.java:213)\n\n\"Finalizer\" #3 daemon prio=8 os_prio=0 cpu=0.00ms elapsed=496.30s tid=0x00007f6a74167000 nid=0x19d in Object.wait()  [0x00007f6a589cf000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(java.base@11.0.4/Native Method)\n        - waiting on <0x000000074e50a2c8> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.4/ReferenceQueue.java:155)\n        - waiting to re-lock in wait() <0x000000074e50a2c8> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.4/ReferenceQueue.java:176)\n        at java.lang.ref.Finalizer$FinalizerThread.run(java.base@11.0.4/Finalizer.java:170)\n\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=496.29s tid=0x00007f6a7416f800 nid=0x19e runnable  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 cpu=10.00ms elapsed=496.29s tid=0x00007f6a74171800 nid=0x19f waiting on condition  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n   No compile task\n\n\"C1 CompilerThread0\" #8 daemon prio=9 os_prio=0 cpu=30.00ms elapsed=496.29s tid=0x00007f6a74174000 nid=0x1a0 waiting on condition  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n   No compile task\n\n\"Sweeper thread\" #9 daemon prio=9 os_prio=0 cpu=10.00ms elapsed=496.29s tid=0x00007f6a74176000 nid=0x1a1 runnable  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Service Thread\" #10 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=496.27s tid=0x00007f6a741d8800 nid=0x1a2 runnable  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Common-Cleaner\" #11 daemon prio=8 os_prio=0 cpu=0.00ms elapsed=496.26s tid=0x00007f6a741e2000 nid=0x1a4 in Object.wait()  [0x00007f6a17fef000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n        at java.lang.Object.wait(java.base@11.0.4/Native Method)\n        - waiting on <0x000000074e416e98> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.4/ReferenceQueue.java:155)\n        - waiting to re-lock in wait() <0x000000074e416e98> (a java.lang.ref.ReferenceQueue$Lock)\n        at jdk.internal.ref.CleanerImpl.run(java.base@11.0.4/CleanerImpl.java:148)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n        at jdk.internal.misc.InnocuousThread.run(java.base@11.0.4/InnocuousThread.java:134)\n\n\"Thread-0\" #12 prio=5 os_prio=0 cpu=0.00ms elapsed=496.25s tid=0x00007f6a741f1800 nid=0x1a5 waiting on condition  [0x00007f6a17a9f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.lambda$0(Server.java:9)\n        at Server$$Lambda$1/0x0000000840060840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\n\"Thread-1\" #13 prio=5 os_prio=0 cpu=0.00ms elapsed=496.25s tid=0x00007f6a741f3800 nid=0x1a6 waiting on condition  [0x00007f6a1798f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.lambda$0(Server.java:9)\n        at Server$$Lambda$1/0x0000000840060840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\n\"Thread-2\" #14 prio=5 os_prio=0 cpu=0.00ms elapsed=496.25s tid=0x00007f6a741f5000 nid=0x1a7 waiting on condition  [0x00007f6a1787f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(java.base@11.0.4/Native Method)\n        at Server.sleepForever(Server.java:20)\n        at Server.lambda$0(Server.java:9)\n        at Server$$Lambda$1/0x0000000840060840.run(Unknown Source)\n        at java.lang.Thread.run(java.base@11.0.4/Thread.java:834)\n\n\"Attach Listener\" #15 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=0.10s tid=0x00007f6a28001000 nid=0x1dc waiting on condition  [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"VM Thread\" os_prio=0 cpu=0.00ms elapsed=496.31s tid=0x00007f6a74162000 nid=0x19b runnable\n\n\"GC Thread#0\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74028000 nid=0x196 runnable\n\n\"G1 Main Marker\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74070800 nid=0x197 runnable\n\n\"G1 Conc#0\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74072800 nid=0x198 runnable\n\n\"G1 Refine#0\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74138000 nid=0x199 runnable\n\n\"G1 Young RemSet Sampling\" os_prio=0 cpu=0.00ms elapsed=496.32s tid=0x00007f6a74139800 nid=0x19a runnable\n\"VM Periodic Task Thread\" os_prio=0 cpu=0.00ms elapsed=496.27s tid=0x00007f6a741db000 nid=0x1a3 waiting on condition\n\nJNI global refs: 6, weak refs: 0\n```\n\n# (2) ps\n\nJava on LinuxはスレッディングをOSのネィティブスレッドに委譲します。つまり「Javaのスレッド」=「OSのスレッド」という関係にあります。したがって、OSのスレッドの状態を確認できるコマンドを利用すれば、間接的にJavaのスレッドの状態も確認できるというわけです。\n\nOSのスレッドの状態を確認する方法はいくつかありますが、とりわけ汎用的で便利なのは`ps`でしょう。実行例は以下の通りです。スレッド名やスタックトレースなど、`jstack`に比べると情報量は少なくなりますが、簡単な確認程度であれば、この程度でも十分でしょう。\n\n```\n$ ps -L mu 404\nUSER       PID   LWP %CPU NLWP %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\ndev        404     -  0.0   21  0.2 6100336 25820 tty1    -    Dec25   0:00 java Server\ndev          -   404  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   405  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   406  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   407  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   408  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   409  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   410  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   411  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   412  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   413  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   414  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   415  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   416  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   417  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   418  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   419  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   420  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   421  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   422  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   423  0.0    -    -      -     - -        Sl   Dec25   0:00 -\ndev          -   476  0.0    -    -      -     - -        Sl   00:06   0:00 -\n```\n\n# 参考\n\nこの記事は次の環境で稼働確認を行いました。\n\n| software | version |\n|:-:|:--|\n| OS | Ubuntu 18.04.2 LTS (Windows Subsystem for Linux) |\n| JDK | openjdk 11.0.4 2019-07-16 |\n| ps | ps from procps-ng 3.3.12 |\n","coediting":false,"comments_count":0,"created_at":"2019-12-26T00:50:40+09:00","group":null,"id":"59370e3daf88727c58db","likes_count":4,"private":false,"reactions_count":0,"stocks_count":12,"tags":[{"name":"Java","versions":[]}],"title":"Javaのスレッドの数や状態を確認するコマンド","updated_at":"2019-12-26T00:50:40+09:00","url":"https://qiita.com/neko_the_shadow/items/59370e3daf88727c58db","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":207,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":19928,"team_membership":null}