{"rendered_body":"<p><strong>注意: <a href=\"https://qiita.com/advent-calendar/2018/composite-number\">「合成数列の和 Advent Calendar 2018」</a>の9日目の記事になります。</strong></p>\n\n<p>詳細な問題内容はアドベントカレンダーの該当記事に譲るとして、ごく簡単にまとめておくと「100以下の自然数nが与えられたとき、1番目からn番目までの合成数の和を求めなさい」というもの。本記事ではbash編で、回答は以下の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">qiita.sh</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">#!/bin/bash</span>\n<span class=\"nv\">n</span><span class=\"o\">=</span><span class=\"nv\">$1</span>\n<span class=\"nb\">yes</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'{print NR}'</span> | <span class=\"nb\">factor</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'NF&gt;2{print NR}'</span> | <span class=\"nb\">head</span> -<span class=\"k\">${</span><span class=\"nv\">n</span><span class=\"k\">}</span> | <span class=\"nb\">paste</span> <span class=\"nt\">-sd</span>+ | bc\n</code></pre></div>\n</div>\n\n<p>これを<code>qiita.sh</code>として保存し、実行した結果は次の通りになります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span>bash qiita.sh 2\n10\n<span class=\"nv\">$ </span>bash qiita.sh 4\n27\n<span class=\"nv\">$ </span>bash qiita.sh 10\n112\n<span class=\"nv\">$ </span>bash qiita.sh 100\n7059\n</code></pre></div></div>\n\n<hr>\n\n<p>以下は簡単な解説になります(´・ω・)</p>\n\n<p><code>yes | awk '{print NR}'</code>ですが、ここでは上限を設けず、自然数の数列を生成しています。<code>awk</code>の<code>NR</code>は現在読み込んでいる行の行番号を保持する組み込み変数で、行を読み込むたびに1,2,3,...と増えていきます。そして「読み込む」ための行を生成するために<code>yes</code>コマンドを利用しています。(参考:<a href=\"https://qiita.com/neko_the_shadow/items/00574464fb8f6b698deb\" id=\"reference-e91ebfca96a33c15cad4\">「上限を設けずに整数列を生成したい」</a>)</p>\n\n<p><code>factor</code>は与えられた入力を素因数分解するコマンドで、その出力形式は次のようになっています。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">$ </span><span class=\"nb\">seq </span>1 10 | <span class=\"nb\">factor\n</span>1:\n2: 2\n3: 3\n4: 2 2\n5: 5\n6: 2 3\n7: 7\n8: 2 2 2\n9: 3 3\n10: 2 5\n</code></pre></div></div>\n\n<p>ところで合成数とは「2つ以上の素数の積で表される数字」と定義することができ、上記の例では4,6,8,9,10が合成数であるといえます。つまり<code>factor</code>の結果が3列以上になるものが合成数であり、それを<code>awk 'NF&gt;2{print NR}'</code>でフィルタリングしています。</p>\n\n<p><code>head</code>は入力の先頭N行を標準出力に返すコマンドで、ここで「N番目までの合成数」を確定させています。</p>\n\n<p>「N番目までの合成数」が確定したところで、これを合計する必要があります。<code>awk</code>を利用するのが一般的だと思いますが<sup id=\"fnref1\"><a href=\"#fn1\" title=\"例: awk '{sum += $0} END{print sum}'\">1</a></sup>、せっかく(?)なので別の方法を採用しました。<code>paste</code>コマンドの<code>-s</code>オプションは標準入力から入力されたすべての行を結合して1行にするもので、結合時のデリミタは<code>-d</code>オプションで指定します。つまり<code>paste -sd+</code>では、入力される改行区切りの数列を<code>+</code>区切りに変換するということで、たとえば<code>4+6+8+9+10</code>というような結果を得ることができます。あとはこれを計算式として評価するだけなので、<code>bc</code>コマンドに食わせています。</p>\n\n<div class=\"footnotes\">\n<hr>\n<ol>\n\n<li id=\"fn1\">\n<p>例: <code>awk '{sum += $0} END{print sum}'</code> <a href=\"#fnref1\">↩</a></p>\n</li>\n\n</ol>\n</div>\n","body":"__注意: [「合成数列の和 Advent Calendar 2018」](https://qiita.com/advent-calendar/2018/composite-number)の9日目の記事になります。__\n\n詳細な問題内容はアドベントカレンダーの該当記事に譲るとして、ごく簡単にまとめておくと「100以下の自然数nが与えられたとき、1番目からn番目までの合成数の和を求めなさい」というもの。本記事ではbash編で、回答は以下の通りです。\n\n```bash:qiita.sh\n#!/bin/bash\nn=$1\nyes | awk '{print NR}' | factor | awk 'NF>2{print NR}' | head -${n} | paste -sd+ | bc\n```\n\nこれを`qiita.sh`として保存し、実行した結果は次の通りになります。\n\n```bash\n$ bash qiita.sh 2\n10\n$ bash qiita.sh 4\n27\n$ bash qiita.sh 10\n112\n$ bash qiita.sh 100\n7059\n```\n\n***\n\n以下は簡単な解説になります(´・ω・)\n\n`yes | awk '{print NR}'`ですが、ここでは上限を設けず、自然数の数列を生成しています。`awk`の`NR`は現在読み込んでいる行の行番号を保持する組み込み変数で、行を読み込むたびに1,2,3,...と増えていきます。そして「読み込む」ための行を生成するために`yes`コマンドを利用しています。(参考:[「上限を設けずに整数列を生成したい」](https://qiita.com/neko_the_shadow/items/00574464fb8f6b698deb))\n\n`factor`は与えられた入力を素因数分解するコマンドで、その出力形式は次のようになっています。\n\n```bash\n$ seq 1 10 | factor\n1:\n2: 2\n3: 3\n4: 2 2\n5: 5\n6: 2 3\n7: 7\n8: 2 2 2\n9: 3 3\n10: 2 5\n```\n\nところで合成数とは「2つ以上の素数の積で表される数字」と定義することができ、上記の例では4,6,8,9,10が合成数であるといえます。つまり`factor`の結果が3列以上になるものが合成数であり、それを`awk 'NF>2{print NR}'`でフィルタリングしています。\n\n`head`は入力の先頭N行を標準出力に返すコマンドで、ここで「N番目までの合成数」を確定させています。\n\n「N番目までの合成数」が確定したところで、これを合計する必要があります。`awk`を利用するのが一般的だと思いますが[^1]、せっかく(?)なので別の方法を採用しました。`paste`コマンドの`-s`オプションは標準入力から入力されたすべての行を結合して1行にするもので、結合時のデリミタは`-d`オプションで指定します。つまり`paste -sd+`では、入力される改行区切りの数列を`+`区切りに変換するということで、たとえば`4+6+8+9+10`というような結果を得ることができます。あとはこれを計算式として評価するだけなので、`bc`コマンドに食わせています。\n\n[^1]: 例: `awk '{sum += $0} END{print sum}'`\n","coediting":false,"comments_count":0,"created_at":"2018-12-05T14:07:30+09:00","group":null,"id":"b5bd9930c00325f0e4ca","likes_count":4,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Bash","versions":[]}],"title":"合成数列の和 Advent Calendar 2018 bash 編","updated_at":"2018-12-09T07:01:06+09:00","url":"https://qiita.com/neko_the_shadow/items/b5bd9930c00325f0e4ca","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":210,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":1163,"team_membership":null,"organization_url_name":null}