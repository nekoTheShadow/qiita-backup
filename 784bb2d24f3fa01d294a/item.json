{"rendered_body":"<p>もとねた: <a href=\"https://qiita.com/tbpgr/items/1f2ed0e14e5d94775963\" id=\"reference-f2fcb109f39ffb923e2b\">「ずんだのハロウィン問題 Ruby編」</a></p>\n\n<p>1行野郎は男の浪漫--ということで、保守性や可読性を無視して、上記記事の条件を満たすワンライナーを書いてみました。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">echo</span> <span class=\"s2\">\"trick treat sushi poyayou tamakatsu\"</span> | <span class=\"nb\">sed</span> <span class=\"s1\">'s/\\s/\\n/g'</span> | <span class=\"nb\">shuf</span> <span class=\"nt\">-n</span> 1  | <span class=\"nb\">awk</span> <span class=\"s1\">'{print $0; print match($0, /^tr/) ? \"happy halloween\" : \"sleepy\" }'</span>\n</pre></div></div>\n\n<p>さすがに読みずらすぎるので、わかりやすく整形し、適宜コメントを加えたものが以下になります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">echo</span> <span class=\"s2\">\"trick treat sushi poyayou tamakatsu\"</span> |\n<span class=\"c\"># 空白区切りを改行区切りに変更する。</span>\n<span class=\"nb\">sed</span> <span class=\"s1\">'s/\\s/\\n/g'</span>                            |\n<span class=\"c\"># 入力をシャッフルし、最初の1行を取り出す。</span>\n<span class=\"nb\">shuf</span> <span class=\"nt\">-n</span> 1                                  |\n<span class=\"c\"># 入力の内容にかかわらず、その内容をそのまま出力した後</span>\n<span class=\"c\"># 入力がtrickまたはtreatの場合は、happy halloweenを出力する。</span>\n<span class=\"nb\">awk</span> <span class=\"s1\">'{\n  print $0;\n  print match($0, /^tr/) ? \"happy halloween\" : \"sleepy\"                                  \n}'</span>\n</pre></div></div>\n\n<p>もうちょっと工夫できそうですね(´・ω・｀) とくに最後の<code>awk</code>は無理やり感が出ている。ここもパイプでスマートに書くことができれば、シェル芸人の仲間入りができる--はず。</p>\n\n<hr>\n\n<p>おまけとして、以下のようなスクリプトを作りました。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">seq </span>1000 | <span class=\"k\">while </span><span class=\"nb\">read </span>x<span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">echo</span> <span class=\"s2\">\"trick treat sushi poyayou tamakatsu\"</span> | \n    <span class=\"nb\">sed</span> <span class=\"s1\">'s/\\s/\\n/g'</span>                          | \n    <span class=\"nb\">shuf</span> <span class=\"nt\">-n</span> 1                                | \n    <span class=\"nb\">awk</span> <span class=\"s1\">'{print $0; print match($0, /^tr/) ? \"happy halloween\" : \"sleepy\" }'</span>\n<span class=\"k\">done</span> <span class=\"o\">&gt;</span> zunda.log\n</pre></div></div>\n\n<p>これは問題の1行野郎を1000回実行し、その出力結果を<code>zunda.log</code>に記録するというものです。実行後に生成される<code>zunda.log</code>の内容は膨大なものになるため、とりあえず前の30行だけ見てみましょう(<code>head -n 30 zunda.log</code>)。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>poyayou\nsleepy\npoyayou\nsleepy\ntamakatsu\nsleepy\nsushi\nsleepy\ntamakatsu\nsleepy\ntrick\nhappy halloween\ntreat\nhappy halloween\npoyayou\nsleepy\npoyayou\nsleepy\npoyayou\nsleepy\nsushi\nsleepy\nsushi\nsleepy\ntamakatsu\nsleepy\ntreat\nhappy halloween\ntreat\nhappy halloween\n</pre></div></div>\n\n<p>trick, treat, sushi, poyayou, tamakatsuがランダムに生成され、trickまたはtreatの場合は続いてhappy halloweenが、それ以外の場合はsleepyが出力されている状態が確認できますね。ちなみにそれぞれの単語の出現回数は次のようなコマンドで確認することができます。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">cat </span>zunda.log | <span class=\"nb\">sort</span> | <span class=\"nb\">uniq</span> <span class=\"nt\">-c</span> | <span class=\"nb\">sort</span> <span class=\"nt\">-n</span>\n</pre></div></div>\n\n<p>この実行結果は以下の通りで、それぞれの単語がある程度均等に出力されていることが分かります。また$165+179+196+223+237=1000$となり、1000回ちょうど実行されていることも確認可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>    165 trick\n    179 sushi\n    196 treat\n    223 poyayou\n    237 tamakatsu\n    361 happy halloween\n    639 sleepy\n</pre></div></div>\n","body":"もとねた: [「ずんだのハロウィン問題 Ruby編」](https://qiita.com/tbpgr/items/1f2ed0e14e5d94775963)\n\n1行野郎は男の浪漫--ということで、保守性や可読性を無視して、上記記事の条件を満たすワンライナーを書いてみました。\n\n```bash\necho \"trick treat sushi poyayou tamakatsu\" | sed 's/\\s/\\n/g' | shuf -n 1  | awk '{print $0; print match($0, /^tr/) ? \"happy halloween\" : \"sleepy\" }'\n```\n\nさすがに読みずらすぎるので、わかりやすく整形し、適宜コメントを加えたものが以下になります。\n\n```bash\necho \"trick treat sushi poyayou tamakatsu\" |\n# 空白区切りを改行区切りに変更する。\nsed 's/\\s/\\n/g'                            |\n# 入力をシャッフルし、最初の1行を取り出す。\nshuf -n 1                                  |\n# 入力の内容にかかわらず、その内容をそのまま出力した後\n# 入力がtrickまたはtreatの場合は、happy halloweenを出力する。\nawk '{\n  print $0;\n  print match($0, /^tr/) ? \"happy halloween\" : \"sleepy\"                                  \n}'\n```\n\nもうちょっと工夫できそうですね(´・ω・｀) とくに最後の`awk`は無理やり感が出ている。ここもパイプでスマートに書くことができれば、シェル芸人の仲間入りができる--はず。\n\n***\n\nおまけとして、以下のようなスクリプトを作りました。\n\n```bash\nseq 1000 | while read x; do\n  echo \"trick treat sushi poyayou tamakatsu\" | \n    sed 's/\\s/\\n/g'                          | \n    shuf -n 1                                | \n    awk '{print $0; print match($0, /^tr/) ? \"happy halloween\" : \"sleepy\" }'\ndone > zunda.log\n```\n\nこれは問題の1行野郎を1000回実行し、その出力結果を`zunda.log`に記録するというものです。実行後に生成される`zunda.log`の内容は膨大なものになるため、とりあえず前の30行だけ見てみましょう(`head -n 30 zunda.log`)。\n\n```\npoyayou\nsleepy\npoyayou\nsleepy\ntamakatsu\nsleepy\nsushi\nsleepy\ntamakatsu\nsleepy\ntrick\nhappy halloween\ntreat\nhappy halloween\npoyayou\nsleepy\npoyayou\nsleepy\npoyayou\nsleepy\nsushi\nsleepy\nsushi\nsleepy\ntamakatsu\nsleepy\ntreat\nhappy halloween\ntreat\nhappy halloween\n```\n\ntrick, treat, sushi, poyayou, tamakatsuがランダムに生成され、trickまたはtreatの場合は続いてhappy halloweenが、それ以外の場合はsleepyが出力されている状態が確認できますね。ちなみにそれぞれの単語の出現回数は次のようなコマンドで確認することができます。\n\n```bash\ncat zunda.log | sort | uniq -c | sort -n\n```\n\nこの実行結果は以下の通りで、それぞれの単語がある程度均等に出力されていることが分かります。また$165+179+196+223+237=1000$となり、1000回ちょうど実行されていることも確認可能です。\n\n```bash\n    165 trick\n    179 sushi\n    196 treat\n    223 poyayou\n    237 tamakatsu\n    361 happy halloween\n    639 sleepy\n```\n\n","coediting":false,"comments_count":3,"created_at":"2018-11-01T00:01:21+09:00","group":null,"id":"784bb2d24f3fa01d294a","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Bash","versions":[]}],"title":"ずんだのハロウィン問題 bash編","updated_at":"2018-11-01T14:18:22+09:00","url":"https://qiita.com/neko_the_shadow/items/784bb2d24f3fa01d294a","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}