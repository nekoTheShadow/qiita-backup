{"rendered_body":"<p data-sourcepos=\"1:1-1:413\">Apache POIを利用してxlsxファイルを読み込む方法として、インターネット上ではUser APIがよく紹介されています (<code>HSSFWorkbook</code>とかを利用するもの)。これは便利ですが、読み込む対象のxlsxファイルをすべてメモリ上に展開するので、巨大なxlsxファイルを読み込む場合は、大量のメモリを消費する場合があります。</p>\n<p data-sourcepos=\"3:1-3:430\">ではメモリ消費量を抑えて、xlsxファイルを読み込みたい場合はどうすればよいかというと、Event APIというAPIを利用します。自分はこのAPIをよく利用するのですが、インターネット上に日本語情報が少なく、実装のたびに困っているので、自分用にまとめておこうと思います。ちなみに以下の記事も参考にしてください。</p>\n<p data-sourcepos=\"5:1-5:60\"><iframe id=\"qiita-embed-content__6d08f4a08dfd321a8c1db4eff2b0ea5a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__6d08f4a08dfd321a8c1db4eff2b0ea5a\" data-content=\"https%3A%2F%2Fqiita.com%2Fneko_the_shadow%2Fitems%2F4ee737e9fb98dfb275b4\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<p data-sourcepos=\"7:1-7:121\">以下はEvent APIを利用し、対象のシートを読み込んで、2次元配列に変換するサンプルです。</p>\n<div class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"9:1-85:3\"><div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SheetToMatrix</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">toMatrix</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">sheetName</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">OPCPackage</span> <span class=\"n\">opcPackage</span> <span class=\"o\">=</span> <span class=\"nc\">OPCPackage</span><span class=\"o\">.</span><span class=\"na\">open</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">toFile</span><span class=\"o\">(),</span> <span class=\"nc\">PackageAccess</span><span class=\"o\">.</span><span class=\"na\">READ</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"nc\">XSSFReader</span> <span class=\"n\">xssfReader</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">XSSFReader</span><span class=\"o\">(</span><span class=\"n\">opcPackage</span><span class=\"o\">);</span>\n            <span class=\"nc\">SheetIterator</span> <span class=\"n\">sheetsData</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">SheetIterator</span><span class=\"o\">)</span> <span class=\"n\">xssfReader</span><span class=\"o\">.</span><span class=\"na\">getSheetsData</span><span class=\"o\">();</span>\n\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">sheetsData</span><span class=\"o\">.</span><span class=\"na\">hasNext</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">InputStream</span> <span class=\"n\">inputStream</span> <span class=\"o\">=</span> <span class=\"n\">sheetsData</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(!</span><span class=\"nc\">Objects</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">sheetsData</span><span class=\"o\">.</span><span class=\"na\">getSheetName</span><span class=\"o\">(),</span> <span class=\"n\">sheetName</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                        <span class=\"k\">continue</span><span class=\"o\">;</span>\n                    <span class=\"o\">}</span>\n\n                    <span class=\"nc\">XMLReader</span> <span class=\"n\">sheetParser</span> <span class=\"o\">=</span> <span class=\"nc\">XMLHelper</span><span class=\"o\">.</span><span class=\"na\">newXMLReader</span><span class=\"o\">();</span>\n                    <span class=\"nc\">SheetToMatrixHandler</span> <span class=\"n\">sheetToMatrixHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SheetToMatrixHandler</span><span class=\"o\">();</span>\n                    <span class=\"nc\">ContentHandler</span> <span class=\"n\">contentHandler</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">XSSFSheetXMLHandler</span><span class=\"o\">(</span>\n                            <span class=\"n\">xssfReader</span><span class=\"o\">.</span><span class=\"na\">getStylesTable</span><span class=\"o\">(),</span>\n                            <span class=\"k\">new</span> <span class=\"nf\">ReadOnlySharedStringsTable</span><span class=\"o\">(</span><span class=\"n\">opcPackage</span><span class=\"o\">),</span>\n                            <span class=\"n\">sheetToMatrixHandler</span><span class=\"o\">,</span>\n                            <span class=\"kc\">false</span><span class=\"o\">);</span>\n                    <span class=\"n\">sheetParser</span><span class=\"o\">.</span><span class=\"na\">setContentHandler</span><span class=\"o\">(</span><span class=\"n\">contentHandler</span><span class=\"o\">);</span>\n                    <span class=\"n\">sheetParser</span><span class=\"o\">.</span><span class=\"na\">parse</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">InputSource</span><span class=\"o\">(</span><span class=\"n\">inputStream</span><span class=\"o\">));</span>\n                    <span class=\"k\">return</span> <span class=\"n\">sheetToMatrixHandler</span><span class=\"o\">.</span><span class=\"na\">getMatrix</span><span class=\"o\">();</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"s\">\"対象のシートがありません: \"</span> <span class=\"o\">+</span> <span class=\"n\">sheetName</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">InvalidOperationException</span>\n                <span class=\"o\">|</span> <span class=\"nc\">IOException</span>\n                <span class=\"o\">|</span> <span class=\"nc\">OpenXML4JException</span>\n                <span class=\"o\">|</span> <span class=\"nc\">SAXException</span>\n                <span class=\"o\">|</span> <span class=\"nc\">ParserConfigurationException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">class</span> <span class=\"nc\">SheetToMatrixHandler</span> <span class=\"kd\">implements</span> <span class=\"nc\">SheetContentsHandler</span> <span class=\"o\">{</span>\n\n        <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">matrix</span><span class=\"o\">;</span>\n\n        <span class=\"kd\">public</span> <span class=\"nf\">SheetToMatrixHandler</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"nf\">getMatrix</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">matrix</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">cell</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">cellReference</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">formattedValue</span><span class=\"o\">,</span> <span class=\"nc\">XSSFComment</span> <span class=\"n\">comment</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">CellReference</span> <span class=\"n\">cr</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">CellReference</span><span class=\"o\">(</span><span class=\"n\">cellReference</span><span class=\"o\">);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"na\">getRow</span><span class=\"o\">();</span>\n            <span class=\"kt\">int</span> <span class=\"n\">col</span> <span class=\"o\">=</span> <span class=\"n\">cr</span><span class=\"o\">.</span><span class=\"na\">getCol</span><span class=\"o\">();</span>\n\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&lt;=</span> <span class=\"n\">row</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;());</span>\n            <span class=\"o\">}</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">).</span><span class=\"na\">size</span><span class=\"o\">()</span> <span class=\"o\">&lt;=</span> <span class=\"n\">col</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">).</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">matrix</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">row</span><span class=\"o\">).</span><span class=\"na\">set</span><span class=\"o\">(</span><span class=\"n\">col</span><span class=\"o\">,</span> <span class=\"n\">formattedValue</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">startRow</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">rowNum</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// PASS</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"nd\">@Override</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">endRow</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">rowNum</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// PASS</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p data-sourcepos=\"87:1-88:121\">実際に利用してみましょう。たとえば以下のようなxlsxファイルがあるとします。<br>\n<a href=\"https://camo.qiitausercontent.com/8410fb0fd73927ee1e2911c04b6548e03cc82216/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130353835392f32343539653161342d663762632d396633632d663366322d3534653930313964333938392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F105859%2F2459e1a4-f7bc-9f3c-f3f2-54e9019d3989.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4aab32d7f6d2f5433c9bd1e3399bfb4f\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/105859/2459e1a4-f7bc-9f3c-f3f2-54e9019d3989.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F105859%2F2459e1a4-f7bc-9f3c-f3f2-54e9019d3989.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=db9baef96cf50978cb04998a08282111 1x\" loading=\"lazy\"></a></p>\n<p data-sourcepos=\"90:1-90:127\">「商品」シートを読み込んで、2次元配列に変換し、内容をコンソールに出力してみましょう。</p>\n<div class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"92:1-95:3\"><div class=\"highlight\"><pre><code><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;&gt;</span> <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SheetToMatrix</span><span class=\"o\">().</span><span class=\"na\">toMatrix</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"商品.xlsx\"</span><span class=\"o\">),</span> <span class=\"s\">\"商品\"</span><span class=\"o\">);</span>\n<span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">matrix</span><span class=\"o\">);</span>\n</code></pre></div></div>\n<p data-sourcepos=\"97:1-97:75\">以下のような結果がコンソールに出力されるはずです。</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"99:1-101:3\"><div class=\"highlight\"><pre><code>[[りんご, 100, 1], [みかん, 200], [いちご, , 3], [], [すいか, 400, 4], [], [], [ばなな, 500, 5]]\n</code></pre></div></div>\n<p data-sourcepos=\"103:1-103:16\"><strong>環境情報</strong></p>\n<div class=\"code-frame\" data-lang=\"xml\" data-sourcepos=\"105:1-132:3\">\n<div class=\"code-lang\"><span class=\"bold\">pom.xml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;properties&gt;</span>\n  <span class=\"nt\">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class=\"nt\">&lt;/project.build.sourceEncoding&gt;</span>\n  <span class=\"nt\">&lt;maven.compiler.source&gt;</span>17<span class=\"nt\">&lt;/maven.compiler.source&gt;</span>\n  <span class=\"nt\">&lt;maven.compiler.target&gt;</span>17<span class=\"nt\">&lt;/maven.compiler.target&gt;</span>\n<span class=\"nt\">&lt;/properties&gt;</span>\n\n<span class=\"nt\">&lt;dependencies&gt;</span>\n  <span class=\"c\">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span>\n  <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.poi<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>poi<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>5.2.3<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"c\">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span>\n  <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.poi<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>poi-ooxml<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>5.2.3<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/dependency&gt;</span>\n  <span class=\"c\">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span>\n  <span class=\"nt\">&lt;dependency&gt;</span>\n      <span class=\"nt\">&lt;groupId&gt;</span>org.apache.logging.log4j<span class=\"nt\">&lt;/groupId&gt;</span>\n      <span class=\"nt\">&lt;artifactId&gt;</span>log4j-core<span class=\"nt\">&lt;/artifactId&gt;</span>\n      <span class=\"nt\">&lt;version&gt;</span>2.19.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/dependency&gt;</span>\n<span class=\"nt\">&lt;/dependencies&gt;</span>\n</code></pre></div>\n</div>\n","body":"Apache POIを利用してxlsxファイルを読み込む方法として、インターネット上ではUser APIがよく紹介されています (`HSSFWorkbook`とかを利用するもの)。これは便利ですが、読み込む対象のxlsxファイルをすべてメモリ上に展開するので、巨大なxlsxファイルを読み込む場合は、大量のメモリを消費する場合があります。\n\nではメモリ消費量を抑えて、xlsxファイルを読み込みたい場合はどうすればよいかというと、Event APIというAPIを利用します。自分はこのAPIをよく利用するのですが、インターネット上に日本語情報が少なく、実装のたびに困っているので、自分用にまとめておこうと思います。ちなみに以下の記事も参考にしてください。\n\nhttps://qiita.com/neko_the_shadow/items/4ee737e9fb98dfb275b4\n\n以下はEvent APIを利用し、対象のシートを読み込んで、2次元配列に変換するサンプルです。\n\n```java\npublic class SheetToMatrix {\n\n    public List<List<String>> toMatrix(Path path, String sheetName) {\n        try (OPCPackage opcPackage = OPCPackage.open(path.toFile(), PackageAccess.READ)) {\n            XSSFReader xssfReader = new XSSFReader(opcPackage);\n            SheetIterator sheetsData = (SheetIterator) xssfReader.getSheetsData();\n\n            while (sheetsData.hasNext()) {\n                try (InputStream inputStream = sheetsData.next()) {\n                    if (!Objects.equals(sheetsData.getSheetName(), sheetName)) {\n                        continue;\n                    }\n\n                    XMLReader sheetParser = XMLHelper.newXMLReader();\n                    SheetToMatrixHandler sheetToMatrixHandler = new SheetToMatrixHandler();\n                    ContentHandler contentHandler = new XSSFSheetXMLHandler(\n                            xssfReader.getStylesTable(),\n                            new ReadOnlySharedStringsTable(opcPackage),\n                            sheetToMatrixHandler,\n                            false);\n                    sheetParser.setContentHandler(contentHandler);\n                    sheetParser.parse(new InputSource(inputStream));\n                    return sheetToMatrixHandler.getMatrix();\n                }\n            }\n\n            throw new RuntimeException(\"対象のシートがありません: \" + sheetName);\n        } catch (InvalidOperationException\n                | IOException\n                | OpenXML4JException\n                | SAXException\n                | ParserConfigurationException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static class SheetToMatrixHandler implements SheetContentsHandler {\n\n        private List<List<String>> matrix;\n\n        public SheetToMatrixHandler() {\n            matrix = new ArrayList<>();\n        }\n\n        public List<List<String>> getMatrix() {\n            return matrix;\n        }\n\n        @Override\n        public void cell(String cellReference, String formattedValue, XSSFComment comment) {\n            CellReference cr = new CellReference(cellReference);\n            int row = cr.getRow();\n            int col = cr.getCol();\n\n            while (matrix.size() <= row) {\n                matrix.add(new ArrayList<>());\n            }\n            while (matrix.get(row).size() <= col) {\n                matrix.get(row).add(\"\");\n            }\n\n            matrix.get(row).set(col, formattedValue);\n        }\n\n        @Override\n        public void startRow(int rowNum) {\n            // PASS\n        }\n\n        @Override\n        public void endRow(int rowNum) {\n            // PASS\n        }\n    }\n}\n```\n\n実際に利用してみましょう。たとえば以下のようなxlsxファイルがあるとします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/105859/2459e1a4-f7bc-9f3c-f3f2-54e9019d3989.png)\n\n「商品」シートを読み込んで、2次元配列に変換し、内容をコンソールに出力してみましょう。\n\n```java\nList<List<String>> matrix = new SheetToMatrix().toMatrix(Paths.get(\"商品.xlsx\"), \"商品\");\nSystem.out.println(matrix);\n```\n\n以下のような結果がコンソールに出力されるはずです。\n\n```\n[[りんご, 100, 1], [みかん, 200], [いちご, , 3], [], [すいか, 400, 4], [], [], [ばなな, 500, 5]]\n```\n\n__環境情報__\n\n```xml:pom.xml\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  <maven.compiler.source>17</maven.compiler.source>\n  <maven.compiler.target>17</maven.compiler.target>\n</properties>\n\n<dependencies>\n  <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->\n  <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi</artifactId>\n      <version>5.2.3</version>\n  </dependency>\n  <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->\n  <dependency>\n      <groupId>org.apache.poi</groupId>\n      <artifactId>poi-ooxml</artifactId>\n      <version>5.2.3</version>\n  </dependency>\n  <!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core -->\n  <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-core</artifactId>\n      <version>2.19.0</version>\n  </dependency>\n</dependencies>\n```\n\n\n","coediting":false,"comments_count":0,"created_at":"2023-01-02T17:43:49+09:00","group":null,"id":"614b6fa0752d97ee0908","likes_count":0,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Java","versions":[]},{"name":"POI","versions":[]}],"title":"メモリ消費量を抑えてxlsxファイルを読み込みたい","updated_at":"2023-01-02T17:43:49+09:00","url":"https://qiita.com/neko_the_shadow/items/614b6fa0752d97ee0908","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":37,"github_login_name":"nekoTheShadow","id":"neko_the_shadow","items_count":218,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":1052,"team_membership":null,"organization_url_name":null,"slide":false}