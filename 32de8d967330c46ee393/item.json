{"rendered_body":"<p>需要あるのかしらん(´・ω・｀) <code>FileAppender</code>においてログファイルが生成あるいはopenされるタイミングをフックしたい場合、<code>FileAppender</code>を継承し<code>setFile</code>をオーバライドしたクラスを<code>log4j.Appender</code>に指定します。</p>\n\n<p>たとえば日付ごとにログファイルを切り替えたいという場合、より具体的には2018年02月11日のログであれば<code>sample.log.20180211</code>、2018年02月12日のログであれば<code>sample.log.20180212</code>に記録したいという場合は以下のような独自ファイルと<code>log4j.properties</code>を用意します。</p>\n\n<div class=\"code-frame\" data-lang=\"properties\">\n<div class=\"code-lang\"><span class=\"bold\">log4j.properties</span></div>\n<div class=\"highlight\"><pre><code><span class=\"py\">log4j.logger.sample</span><span class=\"p\">=</span><span class=\"s\">DEBUG, SAMPLE</span>\n<span class=\"py\">log4j.appender.SAMPLE</span><span class=\"p\">=</span><span class=\"s\">sample.logger.SampleFileAppender</span>\n<span class=\"py\">log4j.appender.SAMPLE.File</span><span class=\"p\">=</span><span class=\"s\">C:</span><span class=\"se\">\\\\</span><span class=\"s\">logging</span><span class=\"se\">\\\\</span><span class=\"s\">sample.log</span>\n<span class=\"py\">log4j.appender.SAMPLE.Append</span><span class=\"p\">=</span><span class=\"s\">true</span>\n<span class=\"py\">log4j.appender.SAMPLE.layout</span><span class=\"p\">=</span><span class=\"s\">org.apache.log4j.PatternLayout</span>\n<span class=\"py\">log4j.appender.SAMPLE.layout.ConversionPattern</span><span class=\"p\">=</span><span class=\"s\">%d %p %m %n</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">SampleFileAppender.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">package</span> <span class=\"nn\">sample.logger</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">org.apache.log4j.FileAppender</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Path</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Paths</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.time.LocalDate</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.time.format.DateTimeFormatter</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SampleFileAppender</span> <span class=\"kd\">extends</span> <span class=\"nc\">FileAppender</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">synchronized</span> <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setFile</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">fileName</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">append</span><span class=\"o\">,</span> <span class=\"kt\">boolean</span> <span class=\"n\">bufferedIO</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">bufferSize</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Path</span> <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">fileName</span><span class=\"o\">);</span>\n        <span class=\"nc\">String</span> <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">getFileName</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\".\"</span> <span class=\"o\">+</span> <span class=\"nc\">DateTimeFormatter</span><span class=\"o\">.</span><span class=\"na\">ofPattern</span><span class=\"o\">(</span><span class=\"s\">\"yyyyMMdd\"</span><span class=\"o\">).</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"nc\">LocalDate</span><span class=\"o\">.</span><span class=\"na\">now</span><span class=\"o\">());</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">setFile</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">getParent</span><span class=\"o\">().</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">baseName</span><span class=\"o\">).</span><span class=\"na\">toString</span><span class=\"o\">(),</span> <span class=\"n\">append</span><span class=\"o\">,</span> <span class=\"n\">bufferedIO</span><span class=\"o\">,</span> <span class=\"n\">bufferSize</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>よくよく考えると、この用途であれば<code>DailyRollingFileAppender</code>で十分ですね(´・ω・｀) 良いサンプルではなくてごめんなさい(´・ω・｀)</p>\n","body":"需要あるのかしらん(´・ω・｀) `FileAppender`においてログファイルが生成あるいはopenされるタイミングをフックしたい場合、`FileAppender`を継承し`setFile`をオーバライドしたクラスを`log4j.Appender`に指定します。\n\nたとえば日付ごとにログファイルを切り替えたいという場合、より具体的には2018年02月11日のログであれば`sample.log.20180211`、2018年02月12日のログであれば`sample.log.20180212`に記録したいという場合は以下のような独自ファイルと`log4j.properties`を用意します。\n\n```properties:log4j.properties\nlog4j.logger.sample=DEBUG, SAMPLE\nlog4j.appender.SAMPLE=sample.logger.SampleFileAppender\nlog4j.appender.SAMPLE.File=C:\\\\logging\\\\sample.log\nlog4j.appender.SAMPLE.Append=true\nlog4j.appender.SAMPLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.SAMPLE.layout.ConversionPattern=%d %p %m %n\n```\n\n\n```java:SampleFileAppender.java\npackage sample.logger;\n\nimport org.apache.log4j.FileAppender;\n\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class SampleFileAppender extends FileAppender {\n\n    @Override\n    synchronized public void setFile(String fileName, boolean append, boolean bufferedIO, int bufferSize) throws IOException {\n        Path path = Paths.get(fileName);\n        String baseName = path.getFileName() + \".\" + DateTimeFormatter.ofPattern(\"yyyyMMdd\").format(LocalDate.now());\n        super.setFile(Paths.get(path.getParent().toString(), baseName).toString(), append, bufferedIO, bufferSize);\n    }\n\n}\n```\n\nよくよく考えると、この用途であれば`DailyRollingFileAppender`で十分ですね(´・ω・｀) 良いサンプルではなくてごめんなさい(´・ω・｀)\n","coediting":false,"comments_count":0,"created_at":"2018-02-11T15:12:01+09:00","group":null,"id":"32de8d967330c46ee393","likes_count":1,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Java","versions":[]},{"name":"log4j","versions":[]}],"title":"log4j#FileAppenderでログファイルの生成/オープンをフックしたい","updated_at":"2018-02-11T15:16:24+09:00","url":"https://qiita.com/neko_the_shadow/items/32de8d967330c46ee393","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":4266,"team_membership":null,"organization_url_name":null}