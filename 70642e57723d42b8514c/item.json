{"rendered_body":"<p>結論: APIを利用する場合はきちんとドキュメントを読みましょう(´・ω・`)</p>\n\n<p>go言語の<code>log.Fatal</code>、<code>log.Fatalf</code>および<code>log.Fatalln</code>はメッセージ出力後に<code>os.Exit(1)</code>を発行し、プロセスを終了しようとします。たとえば以下のようなプログラムがあったとします。</p>\n\n<div class=\"code-frame\" data-lang=\"go\">\n<div class=\"code-lang\"><span class=\"bold\">main.go</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"fmt\"</span>\n    <span class=\"s\">\"log\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"BEFORE\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">Fatalln</span><span class=\"p\">(</span><span class=\"s\">\"FATAL\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Println</span><span class=\"p\">(</span><span class=\"s\">\"AFTER\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>これをビルドして実行すると、<code>FATAL</code>を出力した後に終了ステータス1でプログラムが終了してしまっていることがわかります (<code>AFTER</code>が出力されていない)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ go build .\n$\n$ ./fataltest\nBEFORE\n2020/11/15 21:02:55 FATAL\n$\n$ echo $?\n1\n</pre></div></div>\n\n<p>ほかのプログラミング言語やライブラリによってはログレベルとしてFATALを有しているものがあります。要するに<code>log.Fatal</code>系の関数を「FATALレベルのログを出力してくれるものなのか!」と思って使うと、思わぬバグを生む可能性があります--というかわたしは生みました (反省)</p>\n\n<p><strong>参考</strong></p>\n\n<ul>\n<li><a href=\"https://golang.org/pkg/log/\" rel=\"nofollow noopener\" target=\"_blank\">GoDoc: Package log</a></li>\n<li>稼働確認環境: go version go1.15.1 linux/amd64</li>\n</ul>\n","body":"結論: APIを利用する場合はきちんとドキュメントを読みましょう(´・ω・`)\n\ngo言語の`log.Fatal`、`log.Fatalf`および`log.Fatalln`はメッセージ出力後に`os.Exit(1)`を発行し、プロセスを終了しようとします。たとえば以下のようなプログラムがあったとします。\n\n```go:main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n)\n\nfunc main() {\n\tfmt.Println(\"BEFORE\")\n\n\tlog.Fatalln(\"FATAL\")\n\n\tfmt.Println(\"AFTER\")\n}\n```\n\nこれをビルドして実行すると、`FATAL`を出力した後に終了ステータス1でプログラムが終了してしまっていることがわかります (`AFTER`が出力されていない)\n\n```\n$ go build .\n$\n$ ./fataltest\nBEFORE\n2020/11/15 21:02:55 FATAL\n$\n$ echo $?\n1\n```\n\nほかのプログラミング言語やライブラリによってはログレベルとしてFATALを有しているものがあります。要するに`log.Fatal`系の関数を「FATALレベルのログを出力してくれるものなのか!」と思って使うと、思わぬバグを生む可能性があります--というかわたしは生みました (反省)\n\n**参考**\n\n- [GoDoc: Package log](https://golang.org/pkg/log/)\n- 稼働確認環境: go version go1.15.1 linux/amd64\n","coediting":false,"comments_count":0,"created_at":"2020-11-15T21:08:20+09:00","group":null,"id":"70642e57723d42b8514c","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Go","versions":[]}],"title":"log.Fatalはメッセージ出力後に終了ステータス1としてプログラムを終了しようとする","updated_at":"2020-11-15T21:08:20+09:00","url":"https://qiita.com/neko_the_shadow/items/70642e57723d42b8514c","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":173,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}