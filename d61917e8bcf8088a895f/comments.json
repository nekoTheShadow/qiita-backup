[{"body":"見かけてしまったので、コメント・・・\nこれはDIコンテナの濫用で誤った使い方です。\nご認識されているとは思いますが、staticメソッドを使うようにするにはインジェクションされていることが前提となっていますが、\nstaticメソッドが呼ばれるタイミングとインジェクションされるタイミングは異なるので、たまたまうまく動いているだけです。\n問題が発覚するのは実際に呼ばれるタイミングなので後になるまで気づかない可能性もあります。\n\nこういうのは\n\n``` java\n    public static int sampleMethod(DBConnection dbConnection, int arg) {\n      // ...  \n    }\n```\n\nというように引数でDIコンテナ管理のインスタンスを受けるようにするか、\n\nユーティリティ自体をDIコンテナに管理させてstaticをやめ、\n\n``` java\n@Component\npublic SampleUtils {\n\n    private final DBConnection dbConnection;\n\n    public SampleUtils(DBConnection dbConnection) {\n        this.dbConnection = dbConnection;\n    }\n\n    public int sampleMethod(int arg) {\n      // ...\n    }\n}\n```\n\nにし、staticで呼び出している\n\n``` java\nvoid foo() {\n  SampleUtils.sampleMethod(...);\n}\n```\n\nな箇所を\n\n``` java\n@Autowired\nSampleUtils sampleUtils;\n\nvoid foo() {\n  sampleUtils.sampleMethod(...);\n}\n```\n\nにすべきです。後者の方が良いです。\n\nここでサボると後で痛い目に遭います。\n\n(ググった結果バッドノウハウが共有されてしまうと困るのでこのコメントを残しておきます)\n","created_at":"2017-04-16T04:27:01+09:00","id":"2496acb1dacd8d32af39","rendered_body":"<p>見かけてしまったので、コメント・・・<br>\nこれはDIコンテナの濫用で誤った使い方です。<br>\nご認識されているとは思いますが、staticメソッドを使うようにするにはインジェクションされていることが前提となっていますが、<br>\nstaticメソッドが呼ばれるタイミングとインジェクションされるタイミングは異なるので、たまたまうまく動いているだけです。<br>\n問題が発覚するのは実際に呼ばれるタイミングなので後になるまで気づかない可能性もあります。</p>\n\n<p>こういうのは</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code>    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">sampleMethod</span><span class=\"o\">(</span><span class=\"nc\">DBConnection</span> <span class=\"n\">dbConnection</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// ...  </span>\n    <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>というように引数でDIコンテナ管理のインスタンスを受けるようにするか、</p>\n\n<p>ユーティリティ自体をDIコンテナに管理させてstaticをやめ、</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"nc\">SampleUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">final</span> <span class=\"nc\">DBConnection</span> <span class=\"n\">dbConnection</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">SampleUtils</span><span class=\"o\">(</span><span class=\"nc\">DBConnection</span> <span class=\"n\">dbConnection</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">dbConnection</span> <span class=\"o\">=</span> <span class=\"n\">dbConnection</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">sampleMethod</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n      <span class=\"c1\">// ...</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>にし、staticで呼び出している</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"nc\">SampleUtils</span><span class=\"o\">.</span><span class=\"na\">sampleMethod</span><span class=\"o\">(...);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>な箇所を</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"nd\">@Autowired</span>\n<span class=\"nc\">SampleUtils</span> <span class=\"n\">sampleUtils</span><span class=\"o\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">foo</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n  <span class=\"n\">sampleUtils</span><span class=\"o\">.</span><span class=\"na\">sampleMethod</span><span class=\"o\">(...);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>にすべきです。後者の方が良いです。</p>\n\n<p>ここでサボると後で痛い目に遭います。</p>\n\n<p>(ググった結果バッドノウハウが共有されてしまうと困るのでこのコメントを残しておきます)</p>\n","updated_at":"2017-04-16T04:27:01+09:00","user":{"description":null,"facebook_id":null,"followees_count":0,"followers_count":75,"github_login_name":"making","id":"making@github","items_count":15,"linkedin_id":null,"location":null,"name":"","organization":null,"permanent_id":1852,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1852/profile-images/1639193850","team_only":false,"twitter_screen_name":"making","website_url":null}},{"body":"@yo1000 @ksaito_net 各位:\n\nコメントありがとうございます。書き方が悪く申し訳ありません･･････。釈明させてください(´・ω・｀)\n\nこの投稿の目的というか、実際にこの投稿のようなことを行わねばならなかった場面としては__「既存のstaticメソッドを改修するにあたって、`@Autowired`により依存性注入されるstaticフィールドを必要とする」__ということがありました。\n\n```java\n\npublic SampleUtils {\n\n\tpublic static int sampleMethod(int arg) {\n\t\t\n\t\tdoSomethingBefore();\n\t\t\n\t\t/*\n\t\t * ここにデータベースにアクセスして、データを取得するような処理を付け加える必要がある!!\n\t\t */\n\t\t\n\t\tdoSomethingAfter();\n\t\t\n\t}\n\n}\n\n```\n\n上記の例のように、すでに作られ使われているstaticメソッドにデータベースへ接続するような処理を追記したいとします。そしてデータベースへの接続が`@Autowired`により管理されている(もしくは管理することがコーディング規約により決められている)場合、staticフィールドを用意して`@Autorwired`の対象にする必要がありました。\n\n```java\n\npublic SampleUtils {\n\n\t@Autowired private static DBConnection dbConnection;\n\t\n\tpublic void setDBConnection(DBConnection dbConnection) {\n\t\tSampleUtils.dbConnection = dbConnection;\n\t}\n\t\n\t\n\tpublic static int sampleMethod(int arg) {\n\t\t\n\t\tdoSomethingBefore();\n\t\t\n\t\tDBConnection.dbConnection.selectData();\n\t\t\t\t\n\t\tdoSomethingAfter();\n\t\t\n\t}\n\n}\n\n```\n\n要するに「`@Autowired`により注入されるオブジェクトを使いまわしたいからstaticフィールドを利用する」というよりはむしろ__「`@Autowired`されるオブジェクトをstaticメソッドから呼び出したいからstaticフィールドを利用する」__という場面を想定していました。\n\n本来であればきちんとリファクタリングをするなど、設計を見直すべきだとは思うのですが･･････。\n","created_at":"2017-04-15T09:50:24+09:00","id":"ce7f995633275c92e589","rendered_body":"<p><a href=\"/yo1000\" class=\"user-mention js-hovercard\" title=\"yo1000\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"yo1000\">@yo1000</a> <a href=\"/ksaito_net\" class=\"user-mention js-hovercard\" title=\"ksaito_net\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"ksaito_net\">@ksaito_net</a> 各位:</p>\n\n<p>コメントありがとうございます。書き方が悪く申し訳ありません･･････。釈明させてください(´・ω・｀)</p>\n\n<p>この投稿の目的というか、実際にこの投稿のようなことを行わねばならなかった場面としては<strong>「既存のstaticメソッドを改修するにあたって、<code>@Autowired</code>により依存性注入されるstaticフィールドを必要とする」</strong>ということがありました。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code>\n<span class=\"kd\">public</span> <span class=\"nc\">SampleUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">sampleMethod</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">doSomethingBefore</span><span class=\"o\">();</span>\n\n        <span class=\"cm\">/*\n         * ここにデータベースにアクセスして、データを取得するような処理を付け加える必要がある!!\n         */</span>\n\n        <span class=\"n\">doSomethingAfter</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>上記の例のように、すでに作られ使われているstaticメソッドにデータベースへ接続するような処理を追記したいとします。そしてデータベースへの接続が<code>@Autowired</code>により管理されている(もしくは管理することがコーディング規約により決められている)場合、staticフィールドを用意して<code>@Autorwired</code>の対象にする必要がありました。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code>\n<span class=\"kd\">public</span> <span class=\"nc\">SampleUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Autowired</span> <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"nc\">DBConnection</span> <span class=\"n\">dbConnection</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setDBConnection</span><span class=\"o\">(</span><span class=\"nc\">DBConnection</span> <span class=\"n\">dbConnection</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">SampleUtils</span><span class=\"o\">.</span><span class=\"na\">dbConnection</span> <span class=\"o\">=</span> <span class=\"n\">dbConnection</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">int</span> <span class=\"nf\">sampleMethod</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">arg</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">doSomethingBefore</span><span class=\"o\">();</span>\n\n        <span class=\"nc\">DBConnection</span><span class=\"o\">.</span><span class=\"na\">dbConnection</span><span class=\"o\">.</span><span class=\"na\">selectData</span><span class=\"o\">();</span>\n\n        <span class=\"n\">doSomethingAfter</span><span class=\"o\">();</span>\n\n    <span class=\"o\">}</span>\n\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n\n<p>要するに「<code>@Autowired</code>により注入されるオブジェクトを使いまわしたいからstaticフィールドを利用する」というよりはむしろ<strong>「<code>@Autowired</code>されるオブジェクトをstaticメソッドから呼び出したいからstaticフィールドを利用する」</strong>という場面を想定していました。</p>\n\n<p>本来であればきちんとリファクタリングをするなど、設計を見直すべきだとは思うのですが･･････。</p>\n","updated_at":"2017-04-15T09:50:24+09:00","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":204,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"}},{"body":"yo1000さんに同意見です。\n「とりわけユーティリティクラスの設計に際して、staticフィールドを@Autowiredの対象にしたい場面があります。」冒頭の一文から既にズレ始めていると感じます。\n","created_at":"2017-04-14T05:27:12+09:00","id":"6b2045d6cea7fd5ea2ff","rendered_body":"<p>yo1000さんに同意見です。<br>\n「とりわけユーティリティクラスの設計に際して、staticフィールドを<a href=\"/Autowired\" class=\"user-mention js-hovercard\" title=\"Autowired\" data-hovercard-target-type=\"user\" data-hovercard-target-name=\"Autowired\">@Autowired</a>の対象にしたい場面があります。」冒頭の一文から既にズレ始めていると感じます。</p>\n","updated_at":"2017-04-14T05:27:12+09:00","user":{"description":null,"facebook_id":null,"followees_count":0,"followers_count":0,"github_login_name":null,"id":"ksdn","items_count":0,"linkedin_id":null,"location":null,"name":"","organization":null,"permanent_id":175764,"profile_image_url":"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50","team_only":false,"twitter_screen_name":null,"website_url":null}},{"body":"SpringのDIコンテナで管理されるインスタンスは、デフォルトでscope=singletonなので、これを特別変更していない限りは、インスタンスフィールドに通常通りインジェクションしたとしても、恐らくやりたきことは実現できているのではないかと思うのですが。\n今回の投稿はどのようなシーンで使用されるのでしょうか。\n","created_at":"2017-04-14T01:06:17+09:00","id":"f80db0e398c6ec02be0d","rendered_body":"<p>SpringのDIコンテナで管理されるインスタンスは、デフォルトでscope=singletonなので、これを特別変更していない限りは、インスタンスフィールドに通常通りインジェクションしたとしても、恐らくやりたきことは実現できているのではないかと思うのですが。<br>\n今回の投稿はどのようなシーンで使用されるのでしょうか。</p>\n","updated_at":"2017-04-14T01:06:17+09:00","user":{"description":"","facebook_id":"","followees_count":32,"followers_count":62,"github_login_name":"yo1000","id":"yo1000","items_count":57,"linkedin_id":"","location":"","name":"YO!CHI KIKUCHI","organization":"","permanent_id":47993,"profile_image_url":"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/47993/profile-images/1569072295","team_only":false,"twitter_screen_name":null,"website_url":"https://www.yo1000.com"}}]