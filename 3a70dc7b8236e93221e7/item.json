{"rendered_body":"\n<h1>\n<span id=\"概要\" class=\"fragment\"></span><a href=\"#%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>概要</h1>\n\n<p>Apache POIでXSSFWorkbookを利用する場合、頭をもたげてくるのはメモリ問題。XSSFWorkbookは読み込んだデータや書き込んだデータをすべてメモリ上に展開します。そのため、大きなサイズのExcelを作ったり読んだりするときはよくよく注意しないと、OutOfMemoryErrorを起こしがちです。</p>\n\n<p>Apache POIではこのXSSFWorkbookのメモリ食いすぎ問題に対応するため、SXSSFWorkbookという、全データをメモリには展開せず、一時ファイルに書き出すことで、メモリ消費量を節約するAPIが用意されています。XSSFWorkbookと同じWorkbookインターフェースを実装しているので、</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"nc\">Workbook</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">XSSFWorkbook</span><span class=\"o\">();</span>\n<span class=\"c1\">// ↓</span>\n<span class=\"nc\">Workbook</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SXSSFWorkbook</span><span class=\"o\">();</span>\n</pre></div></div>\n\n<p>というように、実装クラスだけ差し替えて、メモリ消費量節約を実現した気になることが多いのですが、SXXFWorkbookには利用上の注意点があります。</p>\n\n<h1>\n<span id=\"1-行単位のアクセス単位は避けたほうが無難\" class=\"fragment\"></span><a href=\"#1-%E8%A1%8C%E5%8D%98%E4%BD%8D%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%8D%98%E4%BD%8D%E3%81%AF%E9%81%BF%E3%81%91%E3%81%9F%E3%81%BB%E3%81%86%E3%81%8C%E7%84%A1%E9%9B%A3\"><i class=\"fa fa-link\"></i></a>1. 行単位のアクセス単位は避けたほうが無難</h1>\n\n<p>SXSSFWorkbookのメモリ節約ロジック、つまり一時ファイルへの書き出しロジックは「<code>windowSize</code>行だけをメモリ上に保持し、それを超える行を作ろうとした瞬間に、それより前の行はすべて一時ファイルに書き出す」というものです。そして、一時ファイルに書き出された前の行については、アクセスすることはできません。</p>\n\n<p>これは以下のようなソースコードで確認することができます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">Workbook</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SXSSFWorkbook</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Sheet</span> <span class=\"n\">sheet</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"na\">createSheet</span><span class=\"o\">();</span>\n\n    <span class=\"c1\">// 2行目から1000行目まで書き込み。</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1000</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n        <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">createRow</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">).</span><span class=\"na\">createCell</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">).</span><span class=\"na\">setCellValue</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">valueOf</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">// 2行目に書き込み忘れがあったので、2行目のRowを取ろうとしても</span>\n    <span class=\"c1\">// 戻り値がnullになるため、書き込めない</span>\n    <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">getRow</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"c1\">// =&gt; null</span>\n\n    <span class=\"c1\">// 1行目に書き込み忘れがあったので、1行目のRowを作ろうとしても</span>\n    <span class=\"c1\">// 例外(*)が発生して、書き込めないどころか、アプリケーションが終了してしまう。</span>\n    <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">createRow</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>上記の(*)で発生する例外は次の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>Exception in thread \"main\" java.lang.IllegalArgumentException: Attempting to write a row[0] in the range [0,899] that is already written to disk.\n    at org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:131)\n    at org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:65)\n    at poi.Main.main(Main.java:25)\n\n</pre></div></div>\n\n<p>一応、メモリ上に保持されている行については、ランダムアクセスは可能です。メモリに保持する行を決める<code>windowSize</code>についても、コンストラクタやセッターで変更可能ですが、制御がややこしくなりがちで、それに伴うバグも生み出しかねないと考えています。個人的にはSXSSFWorkbookを利用する場合は、行単位のランダムアクセスは避けて、上の行から下の行にかけて順次アクセスするほうがよいと思います。</p>\n\n<h1>\n<span id=\"2-既存のxlsxファイルで書き込み済みの行にはアクセスできない\" class=\"fragment\"></span><a href=\"#2-%E6%97%A2%E5%AD%98%E3%81%AExlsx%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF%E6%B8%88%E3%81%BF%E3%81%AE%E8%A1%8C%E3%81%AB%E3%81%AF%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>2. 既存のxlsxファイルで書き込み済みの行にはアクセスできない</h1>\n\n<p>既存のxlsxファイルにSXSSFWorkbookを使って、データを書き込みたいということもあると思います。このとき注意したいのは<strong>「既存のxlsxファイルで書き込み済みの行は一時ファイルに書き込まれてしまい、SXSSFWorkbookではアクセスができない」ということです。</strong></p>\n\n<p>たとえば、2行目から1000行目まで書き込み済みのエクセルファイル<code>2-1000.xlsx</code>があったとします。これを読み込んで、書き込み済みの行にアクセスしてみます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">Workbook</span> <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SXSSFWorkbook</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">XSSFWorkbook</span><span class=\"o\">(</span><span class=\"s\">\"2-1000.xlsx\"</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Sheet</span> <span class=\"n\">sheet</span> <span class=\"o\">=</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"na\">getSheetAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n\n    <span class=\"c1\">// 2行目に書き込み忘れがあったので、2行目のRowを取ろうとしても</span>\n    <span class=\"c1\">// 戻り値がnullになるため、書き込めない</span>\n    <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">getRow</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">);</span> <span class=\"c1\">// =&gt; null</span>\n\n    <span class=\"c1\">// 1行目に書き込み忘れがあったので、1行目のRowを作ろうとしても</span>\n    <span class=\"c1\">// 例外(*)が発生して、書き込めないどころか、アプリケーションが終了してしまう。</span>\n    <span class=\"n\">sheet</span><span class=\"o\">.</span><span class=\"na\">createRow</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>上記の(*)で発生する例外は次の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>Exception in thread \"main\" java.lang.IllegalArgumentException: Attempting to write a row[0] in the range [0,999] that is already written to disk.\n    at org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:138)\n    at org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:65)\n    at poi.Main.main(Main.java:21)\n</pre></div></div>\n\n<p>「テンプレートファイルみたいなものをシステム内に持っていて、バッチ処理やオンライン処理において、テンプレートファイルにデータを書き込み、結果ファイルをユーザが利用する」というユースケースがありがちですが、こういうユースケースではきちんと設計しないと、SXSSFWorkbookが利用できないということです。</p>\n\n<h1>\n<span id=\"環境情報-pomxml抜粋\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1-pomxml%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>環境情報 (pom.xml抜粋)</h1>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;dependencies&gt;</span>\n  <span class=\"c\">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&gt;</span>\n  <span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.apache.poi<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>poi<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>4.1.2<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/dependency&gt;</span>\n\n  <span class=\"c\">&lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&gt;</span>\n  <span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.apache.poi<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>poi-ooxml<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>4.1.2<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;/dependency&gt;</span>\n<span class=\"nt\">&lt;/dependencies&gt;</span>\n\n<span class=\"nt\">&lt;properties&gt;</span>\n  <span class=\"nt\">&lt;maven.compiler.source&gt;</span>11<span class=\"nt\">&lt;/maven.compiler.source&gt;</span>\n  <span class=\"nt\">&lt;maven.compiler.target&gt;</span>11<span class=\"nt\">&lt;/maven.compiler.target&gt;</span>\n<span class=\"nt\">&lt;/properties&gt;</span>\n</pre></div></div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<ul>\n<li><a href=\"https://poi.apache.org/components/spreadsheet/how-to.html#sxssf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://poi.apache.org/components/spreadsheet/how-to.html#sxssf</a></li>\n<li><a href=\"https://poi.apache.org/apidocs/dev/org/apache/poi/xssf/streaming/SXSSFWorkbook.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://poi.apache.org/apidocs/dev/org/apache/poi/xssf/streaming/SXSSFWorkbook.html</a></li>\n</ul>\n","body":"# 概要\n\nApache POIでXSSFWorkbookを利用する場合、頭をもたげてくるのはメモリ問題。XSSFWorkbookは読み込んだデータや書き込んだデータをすべてメモリ上に展開します。そのため、大きなサイズのExcelを作ったり読んだりするときはよくよく注意しないと、OutOfMemoryErrorを起こしがちです。\n\nApache POIではこのXSSFWorkbookのメモリ食いすぎ問題に対応するため、SXSSFWorkbookという、全データをメモリには展開せず、一時ファイルに書き出すことで、メモリ消費量を節約するAPIが用意されています。XSSFWorkbookと同じWorkbookインターフェースを実装しているので、\n\n```java\nWorkbook book = new XSSFWorkbook();\n// ↓\nWorkbook book = new SXSSFWorkbook();\n```\n\nというように、実装クラスだけ差し替えて、メモリ消費量節約を実現した気になることが多いのですが、SXXFWorkbookには利用上の注意点があります。\n\n# 1. 行単位のアクセス単位は避けたほうが無難\n\nSXSSFWorkbookのメモリ節約ロジック、つまり一時ファイルへの書き出しロジックは「`windowSize`行だけをメモリ上に保持し、それを超える行を作ろうとした瞬間に、それより前の行はすべて一時ファイルに書き出す」というものです。そして、一時ファイルに書き出された前の行については、アクセスすることはできません。\n\nこれは以下のようなソースコードで確認することができます。\n\n\n```java\ntry (Workbook book = new SXSSFWorkbook()) {\n    Sheet sheet = book.createSheet();\n\n    // 2行目から1000行目まで書き込み。\n    for (int i = 1; i < 1000; i++) {\n        sheet.createRow(i).createCell(0).setCellValue(String.valueOf(i));\n    }\n\n    // 2行目に書き込み忘れがあったので、2行目のRowを取ろうとしても\n    // 戻り値がnullになるため、書き込めない\n    sheet.getRow(1); // => null\n\n    // 1行目に書き込み忘れがあったので、1行目のRowを作ろうとしても\n    // 例外(*)が発生して、書き込めないどころか、アプリケーションが終了してしまう。\n    sheet.createRow(0);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n上記の(*)で発生する例外は次の通りです。\n\n```\nException in thread \"main\" java.lang.IllegalArgumentException: Attempting to write a row[0] in the range [0,899] that is already written to disk.\n\tat org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:131)\n\tat org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:65)\n\tat poi.Main.main(Main.java:25)\n\n```\n\n一応、メモリ上に保持されている行については、ランダムアクセスは可能です。メモリに保持する行を決める`windowSize`についても、コンストラクタやセッターで変更可能ですが、制御がややこしくなりがちで、それに伴うバグも生み出しかねないと考えています。個人的にはSXSSFWorkbookを利用する場合は、行単位のランダムアクセスは避けて、上の行から下の行にかけて順次アクセスするほうがよいと思います。\n\n# 2. 既存のxlsxファイルで書き込み済みの行にはアクセスできない\n\n既存のxlsxファイルにSXSSFWorkbookを使って、データを書き込みたいということもあると思います。このとき注意したいのは__「既存のxlsxファイルで書き込み済みの行は一時ファイルに書き込まれてしまい、SXSSFWorkbookではアクセスができない」ということです。__\n\nたとえば、2行目から1000行目まで書き込み済みのエクセルファイル`2-1000.xlsx`があったとします。これを読み込んで、書き込み済みの行にアクセスしてみます。\n\n```java\ntry (Workbook book = new SXSSFWorkbook(new XSSFWorkbook(\"2-1000.xlsx\"))) {\n    Sheet sheet = book.getSheetAt(0);\n\n    // 2行目に書き込み忘れがあったので、2行目のRowを取ろうとしても\n    // 戻り値がnullになるため、書き込めない\n    sheet.getRow(1); // => null\n\n    // 1行目に書き込み忘れがあったので、1行目のRowを作ろうとしても\n    // 例外(*)が発生して、書き込めないどころか、アプリケーションが終了してしまう。\n    sheet.createRow(0);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n上記の(*)で発生する例外は次の通りです。\n\n```\nException in thread \"main\" java.lang.IllegalArgumentException: Attempting to write a row[0] in the range [0,999] that is already written to disk.\n\tat org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:138)\n\tat org.apache.poi.xssf.streaming.SXSSFSheet.createRow(SXSSFSheet.java:65)\n\tat poi.Main.main(Main.java:21)\n```\n\n「テンプレートファイルみたいなものをシステム内に持っていて、バッチ処理やオンライン処理において、テンプレートファイルにデータを書き込み、結果ファイルをユーザが利用する」というユースケースがありがちですが、こういうユースケースではきちんと設計しないと、SXSSFWorkbookが利用できないということです。\n\n# 環境情報 (pom.xml抜粋)\n\n```xml\n<dependencies>\n  <!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->\n  <dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi</artifactId>\n    <version>4.1.2</version>\n  </dependency>\n\n  <!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->\n  <dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml</artifactId>\n    <version>4.1.2</version>\n  </dependency>\n</dependencies>\n\n<properties>\n  <maven.compiler.source>11</maven.compiler.source>\n  <maven.compiler.target>11</maven.compiler.target>\n</properties>\n```\n\n# 参考\n\n- https://poi.apache.org/components/spreadsheet/how-to.html#sxssf\n- https://poi.apache.org/apidocs/dev/org/apache/poi/xssf/streaming/SXSSFWorkbook.html\n","coediting":false,"comments_count":0,"created_at":"2020-08-30T12:44:54+09:00","group":null,"id":"3a70dc7b8236e93221e7","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"POI","versions":[]}],"title":"SXSSFWorkbookを利用する際の個人的な注意点 (行単位のアクセス単位は避けたほうが無難 / 既存のxlsxファイルで書き込み済みの行にはアクセスできない)","updated_at":"2020-08-30T12:45:19+09:00","url":"https://qiita.com/neko_the_shadow/items/3a70dc7b8236e93221e7","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}