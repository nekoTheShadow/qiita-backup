{"rendered_body":"<p>参考: <a href=\"https://qiita.com/neko_the_shadow/items/e6a931b8a9193b47fcd3\" id=\"reference-3ed30283dfa0a23295b6\">「C#でサイズnの順列をすべて生成したい。」</a></p>\n\n<p>表題のとおり「ビット演算でべき集合を作成する」ことがあったので、その際のメモになります。なお以下のサンプルはC#を利用していますが、内容としてはほかの言語でも通用するものと思います。</p>\n\n<p>単純な内容のため、実装方法はさまざまにあると思いますが、とりあえずforループをつかって\"べた\"に書いてみます。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"p\">=</span> <span class=\"m\">5</span><span class=\"p\">;</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">bit</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">bit</span> <span class=\"p\">&lt;</span> <span class=\"m\">1</span> <span class=\"p\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">bit</span><span class=\"p\">++)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">permutation</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;();</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"p\">++)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">((</span><span class=\"n\">bit</span> <span class=\"p\">&amp;</span> <span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"p\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"p\">!=</span> <span class=\"m\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">permutation</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"[\"</span> <span class=\"p\">+</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">permutation</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>以上のプログラムは、n個の集合から作成されるべき集合を表示するものです(表示内容は後述)。注意としては整数型としてintを利用しているため、nがあまりに大きくなるとオーバーフローを起こし、プログラムとして破綻する可能性があります。</p>\n\n<p>せっかくC#を利用しているということもあり、全く同じ内容をLINQで実装してみたいと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"p\">=</span> <span class=\"m\">5</span><span class=\"p\">;</span>\n<span class=\"kt\">var</span> <span class=\"n\">permutations</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">1</span> <span class=\"p\">&lt;&lt;</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                             <span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">bit</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">).</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">bit</span> <span class=\"p\">&amp;</span> <span class=\"p\">(</span><span class=\"m\">1</span> <span class=\"p\">&lt;&lt;</span> <span class=\"n\">i</span><span class=\"p\">))</span> <span class=\"p\">!=</span> <span class=\"m\">0</span><span class=\"p\">));</span>\n<span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">permutation</span> <span class=\"k\">in</span> <span class=\"n\">permutations</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"[\"</span> <span class=\"p\">+</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">permutation</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>全般的に記述がシンプルになりますね(´・ω・｀)</p>\n\n<hr>\n\n<p>ふたつのプログラムの表示結果はどちらも次のようになるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>[]\n[0]\n[1]\n[0,1]\n[2]\n[0,2]\n[1,2]\n[0,1,2]\n[3]\n[0,3]\n[1,3]\n[0,1,3]\n[2,3]\n[0,2,3]\n[1,2,3]\n[0,1,2,3]\n[4]\n[0,4]\n[1,4]\n[0,1,4]\n[2,4]\n[0,2,4]\n[1,2,4]\n[0,1,2,4]\n[3,4]\n[0,3,4]\n[1,3,4]\n[0,1,3,4]\n[2,3,4]\n[0,2,3,4]\n[1,2,3,4]\n[0,1,2,3,4]\n</pre></div></div>\n","body":"参考: [「C#でサイズnの順列をすべて生成したい。」](https://qiita.com/neko_the_shadow/items/e6a931b8a9193b47fcd3)\n\n表題のとおり「ビット演算でべき集合を作成する」ことがあったので、その際のメモになります。なお以下のサンプルはC#を利用していますが、内容としてはほかの言語でも通用するものと思います。\n\n単純な内容のため、実装方法はさまざまにあると思いますが、とりあえずforループをつかって\"べた\"に書いてみます。\n\n```csharp\nint n = 5;\nfor (int bit = 0; bit < 1 << n; bit++)\n{\n    var permutation = new List<int>();\n    for (int i = 0; i < n; i++)\n    {\n        if ((bit & (1 << i)) != 0)\n        {\n            permutation.Add(i);\n        }\n    }\n    Console.WriteLine(\"[\" + string.Join(\",\", permutation) + \"]\");\n}\n```\n\n以上のプログラムは、n個の集合から作成されるべき集合を表示するものです(表示内容は後述)。注意としては整数型としてintを利用しているため、nがあまりに大きくなるとオーバーフローを起こし、プログラムとして破綻する可能性があります。\n\nせっかくC#を利用しているということもあり、全く同じ内容をLINQで実装してみたいと思います。\n\n```csharp\nint n = 5;\nvar permutations = Enumerable.Range(0, 1 << n)\n                             .Select(bit => Enumerable.Range(0, n).Where(i => (bit & (1 << i)) != 0));\nforeach(var permutation in permutations)\n{\n    Console.WriteLine(\"[\" + string.Join(\",\", permutation) + \"]\");\n}\n```\n\n全般的に記述がシンプルになりますね(´・ω・｀)\n\n---\n\nふたつのプログラムの表示結果はどちらも次のようになるはずです。\n\n```\n[]\n[0]\n[1]\n[0,1]\n[2]\n[0,2]\n[1,2]\n[0,1,2]\n[3]\n[0,3]\n[1,3]\n[0,1,3]\n[2,3]\n[0,2,3]\n[1,2,3]\n[0,1,2,3]\n[4]\n[0,4]\n[1,4]\n[0,1,4]\n[2,4]\n[0,2,4]\n[1,2,4]\n[0,1,2,4]\n[3,4]\n[0,3,4]\n[1,3,4]\n[0,1,3,4]\n[2,3,4]\n[0,2,3,4]\n[1,2,3,4]\n[0,1,2,3,4]\n```\n","coediting":false,"comments_count":0,"created_at":"2018-12-24T16:17:25+09:00","group":null,"id":"0d70793b3b9e76e918a0","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"C#","versions":[]}],"title":"ビット演算を利用してべき集合を作成する。","updated_at":"2018-12-24T16:17:25+09:00","url":"https://qiita.com/neko_the_shadow/items/0d70793b3b9e76e918a0","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":33,"github_login_name":null,"id":"neko_the_shadow","items_count":168,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}