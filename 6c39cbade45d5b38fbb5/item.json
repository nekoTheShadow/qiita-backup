{"rendered_body":"<p>タイトルが長い(´・ω・｀) ただこう書くほかない(´・ω・｀) 掲題の通り<a href=\"https://techplay.jp/column/298?utm_source=column_298&amp;utm_medium=social&amp;utm_campaign=feed&amp;utm_content=tw0\" rel=\"nofollow noopener\" target=\"_blank\">TECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽しく学ぼう！」</a>に掲載されているアルゴリズム問題を解いてみました。解答内容は自由に公開してよいとのことなので、せっかくですし、Qiitaにさらしてみたいと思います。</p>\n\n<p>詳細な問題内容は当該記事を見ていただきたいのですが、おおよその内容としては「3x3の魔法陣を生成する。魔法陣を構成する数字はnからn+8まで(nは1以上10以下)」というものです。まず思いつくのは「考えうるすべての盤面を生成して、そのうち条件を満たすものだけをpickupする」という解法でしょうか。要は全探索するわけです。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">wrong.rb</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">#</span>\n<span class=\"c1\"># 考えうる魔法陣をすべて生成して、そのうち条件を満たすものだけをpickupする。</span>\n<span class=\"c1\"># @param n 問題文にある\"n\"(1..10)</span>\n<span class=\"c1\"># @return 条件を満たす魔法陣の一覧</span>\n<span class=\"c1\">#</span>\n<span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">n</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">8</span><span class=\"p\">)].</span><span class=\"nf\">permutation</span><span class=\"p\">.</span><span class=\"nf\">with_object</span><span class=\"p\">([])</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">digits</span><span class=\"p\">,</span> <span class=\"n\">squares</span><span class=\"o\">|</span>\n    <span class=\"n\">square</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">each_slice</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"nf\">to_a</span>    \n    <span class=\"n\">totals</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n      <span class=\"o\">*</span><span class=\"n\">square</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:sum</span><span class=\"p\">),</span>                   <span class=\"c1\"># 縦方向</span>\n      <span class=\"o\">*</span><span class=\"n\">square</span><span class=\"p\">.</span><span class=\"nf\">transpose</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:sum</span><span class=\"p\">),</span>         <span class=\"c1\"># 横方向</span>\n      <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]}.</span><span class=\"nf\">sum</span><span class=\"p\">,</span>    <span class=\"c1\"># 右ななめ</span>\n      <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">]}.</span><span class=\"nf\">sum</span> <span class=\"c1\"># 左ななめ</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">squares</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">square</span> <span class=\"k\">if</span> <span class=\"n\">totals</span><span class=\"p\">.</span><span class=\"nf\">uniq</span><span class=\"p\">.</span><span class=\"nf\">length</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># 3x3の魔法陣をpretty-printする。</span>\n<span class=\"c1\"># 補助関数=メインロジックには無関係。</span>\n<span class=\"c1\">#</span>\n<span class=\"k\">def</span> <span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">squares</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">squares</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">square</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]}</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">rows</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">row</span><span class=\"o\">|</span>\n      <span class=\"n\">row</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span> <span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"s2\">\"%02d\"</span><span class=\"p\">,</span> <span class=\"n\">digit</span><span class=\"p\">)}.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n    <span class=\"p\">}.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">' | '</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">if</span> <span class=\"kp\">__FILE__</span> <span class=\"o\">==</span> <span class=\"vg\">$0</span>\n  <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">n</span><span class=\"o\">|</span>\n    <span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"[ n=</span><span class=\"si\">#{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s2\"> ]\"</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">squares</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p>この実行結果が以下の通り。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ time ruby wrong.rb\n[ n=1 ]\n02,07,06 | 02,09,04 | 04,03,08 | 04,09,02 | 06,01,08 | 06,07,02 | 08,01,06 | 08,03,04\n09,05,01 | 07,05,03 | 09,05,01 | 03,05,07 | 07,05,03 | 01,05,09 | 03,05,07 | 01,05,09\n04,03,08 | 06,01,08 | 02,07,06 | 08,01,06 | 02,09,04 | 08,03,04 | 04,09,02 | 06,07,02\n[ n=2 ]\n03,08,07 | 03,10,05 | 05,04,09 | 05,10,03 | 07,02,09 | 07,08,03 | 09,02,07 | 09,04,05\n10,06,02 | 08,06,04 | 10,06,02 | 04,06,08 | 08,06,04 | 02,06,10 | 04,06,08 | 02,06,10\n05,04,09 | 07,02,09 | 03,08,07 | 09,02,07 | 03,10,05 | 09,04,05 | 05,10,03 | 07,08,03\n[ n=3 ]\n04,09,08 | 04,11,06 | 06,05,10 | 06,11,04 | 08,03,10 | 08,09,04 | 10,03,08 | 10,05,06\n11,07,03 | 09,07,05 | 11,07,03 | 05,07,09 | 09,07,05 | 03,07,11 | 05,07,09 | 03,07,11\n06,05,10 | 08,03,10 | 04,09,08 | 10,03,08 | 04,11,06 | 10,05,06 | 06,11,04 | 08,09,04\n[ n=4 ]\n05,10,09 | 05,12,07 | 07,06,11 | 07,12,05 | 09,04,11 | 09,10,05 | 11,04,09 | 11,06,07\n12,08,04 | 10,08,06 | 12,08,04 | 06,08,10 | 10,08,06 | 04,08,12 | 06,08,10 | 04,08,12\n07,06,11 | 09,04,11 | 05,10,09 | 11,04,09 | 05,12,07 | 11,06,07 | 07,12,05 | 09,10,05\n[ n=5 ]\n06,11,10 | 06,13,08 | 08,07,12 | 08,13,06 | 10,05,12 | 10,11,06 | 12,05,10 | 12,07,08\n13,09,05 | 11,09,07 | 13,09,05 | 07,09,11 | 11,09,07 | 05,09,13 | 07,09,11 | 05,09,13\n08,07,12 | 10,05,12 | 06,11,10 | 12,05,10 | 06,13,08 | 12,07,08 | 08,13,06 | 10,11,06\n[ n=6 ]\n07,12,11 | 07,14,09 | 09,08,13 | 09,14,07 | 11,06,13 | 11,12,07 | 13,06,11 | 13,08,09\n14,10,06 | 12,10,08 | 14,10,06 | 08,10,12 | 12,10,08 | 06,10,14 | 08,10,12 | 06,10,14\n09,08,13 | 11,06,13 | 07,12,11 | 13,06,11 | 07,14,09 | 13,08,09 | 09,14,07 | 11,12,07\n[ n=7 ]\n08,13,12 | 08,15,10 | 10,09,14 | 10,15,08 | 12,07,14 | 12,13,08 | 14,07,12 | 14,09,10\n15,11,07 | 13,11,09 | 15,11,07 | 09,11,13 | 13,11,09 | 07,11,15 | 09,11,13 | 07,11,15\n10,09,14 | 12,07,14 | 08,13,12 | 14,07,12 | 08,15,10 | 14,09,10 | 10,15,08 | 12,13,08\n[ n=8 ]\n09,14,13 | 09,16,11 | 11,10,15 | 11,16,09 | 13,08,15 | 13,14,09 | 15,08,13 | 15,10,11\n16,12,08 | 14,12,10 | 16,12,08 | 10,12,14 | 14,12,10 | 08,12,16 | 10,12,14 | 08,12,16\n11,10,15 | 13,08,15 | 09,14,13 | 15,08,13 | 09,16,11 | 15,10,11 | 11,16,09 | 13,14,09\n[ n=9 ]\n10,15,14 | 10,17,12 | 12,11,16 | 12,17,10 | 14,09,16 | 14,15,10 | 16,09,14 | 16,11,12\n17,13,09 | 15,13,11 | 17,13,09 | 11,13,15 | 15,13,11 | 09,13,17 | 11,13,15 | 09,13,17\n12,11,16 | 14,09,16 | 10,15,14 | 16,09,14 | 10,17,12 | 16,11,12 | 12,17,10 | 14,15,10\n[ n=10 ]\n11,16,15 | 11,18,13 | 13,12,17 | 13,18,11 | 15,10,17 | 15,16,11 | 17,10,15 | 17,12,13\n18,14,10 | 16,14,12 | 18,14,10 | 12,14,16 | 16,14,12 | 10,14,18 | 12,14,16 | 10,14,18\n13,12,17 | 15,10,17 | 11,16,15 | 17,10,15 | 11,18,13 | 17,12,13 | 13,18,11 | 15,16,11\n\nreal    0m34.338s\nuser    0m33.750s\nsys     0m0.203s\n</pre></div></div>\n\n<p>わたしの環境ではプログラム実行から結果が返ってくるまでおよそ35秒かかっています。9!=362880通りの盤面を探索する必要があるので、これぐらいの時間がかかってしまうのは仕方がない--というよりは35万件以上探索してもこの程度の時間で済むという印象のほうが強いかも(´・ω・｀) </p>\n\n<p>それはさておき、もう少し効率の良いアルゴリズムを考えてみます。たとえばn=1のときは15というように、1列の合計値は事前に求めることができます。つまり1列のうち2マスまで決まれば、最後の1マスは自動で決まります。よって「最後の1マスに数字を設定する際、縦/横/ななめ方向に合計値の検査を行って、条件を満たさない場合はその時点で探索をやめる」という枝刈りを実施すれば、単純な全探索よりは探索量が減るはずです。それを実装したものが以下のコードになります。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">main.rb</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">#</span>\n<span class=\"c1\"># 幅優先探索で、条件を満たす魔法陣を探す。</span>\n<span class=\"c1\"># 「探索中にその魔法陣が条件を満たすかどうかをチェックし、</span>\n<span class=\"c1\"># 満たさない場合は探索をやめる」という枝刈りを行って、探索量を減らす。</span>\n<span class=\"c1\"># @param n 問題文にある\"n\"(1..10)</span>\n<span class=\"c1\"># @return 条件を満たす魔法陣の一覧</span>\n<span class=\"c1\">#</span>\n<span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n  <span class=\"n\">lo</span><span class=\"p\">,</span> <span class=\"n\">hi</span> <span class=\"o\">=</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">8</span>\n  <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"o\">..</span><span class=\"n\">hi</span><span class=\"p\">).</span><span class=\"nf\">sum</span> <span class=\"o\">/</span> <span class=\"mi\">3</span>\n\n  <span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">lo</span><span class=\"o\">..</span><span class=\"n\">hi</span><span class=\"p\">).</span><span class=\"nf\">map</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span>\n    <span class=\"n\">square</span> <span class=\"o\">=</span> <span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">){</span> <span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">digit</span>\n    <span class=\"n\">square</span>\n  <span class=\"k\">end</span>\n  <span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n  <span class=\"k\">until</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">empty?</span>\n    <span class=\"n\">square</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">shift</span>\n\n    <span class=\"c1\"># 数字が未設置の座標を探す。未設置の座標がない場合はその魔法陣が条件を満たすということ。</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"nf\">product</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"mi\">3</span><span class=\"p\">]).</span><span class=\"nf\">find</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">.</span><span class=\"nf\">nil?</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span><span class=\"p\">.</span><span class=\"nf\">nil?</span>\n      <span class=\"n\">squares</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">square</span>\n      <span class=\"k\">next</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"c1\"># 座標(x, y)に置くことができるのは、その魔法陣においていまだ利用されていない数字。</span>\n    <span class=\"c1\"># ただし底辺や右辺の座標の場合は、縦方向や横方向あるいは斜め方向の検査を行っておく(=枝刈り)</span>\n    <span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">*</span><span class=\"n\">lo</span><span class=\"o\">..</span><span class=\"n\">hi</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">square</span><span class=\"p\">.</span><span class=\"nf\">flatten</span><span class=\"p\">.</span><span class=\"nf\">uniq</span>\n    <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">select!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"n\">total</span><span class=\"p\">}</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>           <span class=\"c1\"># 底辺=縦方向の検査を行う</span>\n    <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">select!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"n\">total</span><span class=\"p\">}</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">2</span>           <span class=\"c1\"># 右辺=横方向の検査を行う</span>\n    <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">select!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"n\">total</span><span class=\"p\">}</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"c1\"># 左ななめ方向の検査を行う</span>\n    <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">select!</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"n\">total</span><span class=\"p\">}</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"c1\"># 右ななめ方向の検査を行う</span>\n\n    <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span>\n      <span class=\"n\">temp</span> <span class=\"o\">=</span> <span class=\"n\">square</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:dup</span><span class=\"p\">)</span>\n      <span class=\"n\">temp</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">digit</span>\n      <span class=\"n\">queue</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">temp</span>\n    <span class=\"k\">end</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">squares</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\">#</span>\n<span class=\"c1\"># 3x3の魔法陣をpretty-printする。</span>\n<span class=\"c1\"># 補助関数=メインロジックには無関係。</span>\n<span class=\"c1\">#</span>\n<span class=\"k\">def</span> <span class=\"nf\">pprint</span><span class=\"p\">(</span><span class=\"n\">squares</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">squares</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">square</span><span class=\"o\">|</span> <span class=\"n\">square</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]}</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">rows</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">row</span><span class=\"o\">|</span>\n      <span class=\"n\">row</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span> <span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"s2\">\"%02d\"</span><span class=\"p\">,</span> <span class=\"n\">digit</span><span class=\"p\">)}.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">','</span><span class=\"p\">)</span>\n    <span class=\"p\">}.</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">' | '</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"k\">if</span> <span class=\"kp\">__FILE__</span> <span class=\"o\">==</span> <span class=\"vg\">$0</span>\n  <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">10</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">n</span><span class=\"o\">|</span>\n    <span class=\"n\">squares</span> <span class=\"o\">=</span> <span class=\"n\">solve</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"[ n=</span><span class=\"si\">#{</span><span class=\"n\">n</span><span class=\"si\">}</span><span class=\"s2\"> ]\"</span>\n    <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">squares</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p>これを実行したものが次の通り。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ time ruby main.rb\n[ n=1 ]\n02,07,06 | 02,09,04 | 04,03,08 | 04,09,02 | 06,01,08 | 06,07,02 | 08,01,06 | 08,03,04\n09,05,01 | 07,05,03 | 09,05,01 | 03,05,07 | 07,05,03 | 01,05,09 | 03,05,07 | 01,05,09\n04,03,08 | 06,01,08 | 02,07,06 | 08,01,06 | 02,09,04 | 08,03,04 | 04,09,02 | 06,07,02\n[ n=2 ]\n03,08,07 | 03,10,05 | 05,04,09 | 05,10,03 | 07,02,09 | 07,08,03 | 09,02,07 | 09,04,05\n10,06,02 | 08,06,04 | 10,06,02 | 04,06,08 | 08,06,04 | 02,06,10 | 04,06,08 | 02,06,10\n05,04,09 | 07,02,09 | 03,08,07 | 09,02,07 | 03,10,05 | 09,04,05 | 05,10,03 | 07,08,03\n[ n=3 ]\n04,09,08 | 04,11,06 | 06,05,10 | 06,11,04 | 08,03,10 | 08,09,04 | 10,03,08 | 10,05,06\n11,07,03 | 09,07,05 | 11,07,03 | 05,07,09 | 09,07,05 | 03,07,11 | 05,07,09 | 03,07,11\n06,05,10 | 08,03,10 | 04,09,08 | 10,03,08 | 04,11,06 | 10,05,06 | 06,11,04 | 08,09,04\n[ n=4 ]\n05,10,09 | 05,12,07 | 07,06,11 | 07,12,05 | 09,04,11 | 09,10,05 | 11,04,09 | 11,06,07\n12,08,04 | 10,08,06 | 12,08,04 | 06,08,10 | 10,08,06 | 04,08,12 | 06,08,10 | 04,08,12\n07,06,11 | 09,04,11 | 05,10,09 | 11,04,09 | 05,12,07 | 11,06,07 | 07,12,05 | 09,10,05\n[ n=5 ]\n06,11,10 | 06,13,08 | 08,07,12 | 08,13,06 | 10,05,12 | 10,11,06 | 12,05,10 | 12,07,08\n13,09,05 | 11,09,07 | 13,09,05 | 07,09,11 | 11,09,07 | 05,09,13 | 07,09,11 | 05,09,13\n08,07,12 | 10,05,12 | 06,11,10 | 12,05,10 | 06,13,08 | 12,07,08 | 08,13,06 | 10,11,06\n[ n=6 ]\n07,12,11 | 07,14,09 | 09,08,13 | 09,14,07 | 11,06,13 | 11,12,07 | 13,06,11 | 13,08,09\n14,10,06 | 12,10,08 | 14,10,06 | 08,10,12 | 12,10,08 | 06,10,14 | 08,10,12 | 06,10,14\n09,08,13 | 11,06,13 | 07,12,11 | 13,06,11 | 07,14,09 | 13,08,09 | 09,14,07 | 11,12,07\n[ n=7 ]\n08,13,12 | 08,15,10 | 10,09,14 | 10,15,08 | 12,07,14 | 12,13,08 | 14,07,12 | 14,09,10\n15,11,07 | 13,11,09 | 15,11,07 | 09,11,13 | 13,11,09 | 07,11,15 | 09,11,13 | 07,11,15\n10,09,14 | 12,07,14 | 08,13,12 | 14,07,12 | 08,15,10 | 14,09,10 | 10,15,08 | 12,13,08\n[ n=8 ]\n09,14,13 | 09,16,11 | 11,10,15 | 11,16,09 | 13,08,15 | 13,14,09 | 15,08,13 | 15,10,11\n16,12,08 | 14,12,10 | 16,12,08 | 10,12,14 | 14,12,10 | 08,12,16 | 10,12,14 | 08,12,16\n11,10,15 | 13,08,15 | 09,14,13 | 15,08,13 | 09,16,11 | 15,10,11 | 11,16,09 | 13,14,09\n[ n=9 ]\n10,15,14 | 10,17,12 | 12,11,16 | 12,17,10 | 14,09,16 | 14,15,10 | 16,09,14 | 16,11,12\n17,13,09 | 15,13,11 | 17,13,09 | 11,13,15 | 15,13,11 | 09,13,17 | 11,13,15 | 09,13,17\n12,11,16 | 14,09,16 | 10,15,14 | 16,09,14 | 10,17,12 | 16,11,12 | 12,17,10 | 14,15,10\n[ n=10 ]\n11,16,15 | 11,18,13 | 13,12,17 | 13,18,11 | 15,10,17 | 15,16,11 | 17,10,15 | 17,12,13\n18,14,10 | 16,14,12 | 18,14,10 | 12,14,16 | 16,14,12 | 10,14,18 | 12,14,16 | 10,14,18\n13,12,17 | 15,10,17 | 11,16,15 | 17,10,15 | 11,18,13 | 17,12,13 | 13,18,11 | 15,16,11\n\nreal    0m0.618s\nuser    0m0.406s\nsys     0m0.109s\n</pre></div></div>\n\n<p>プログラム実行から同じ結果を出力するのに全探索では35秒かかっていましたが、枝刈り版では0.06秒にまで縮まっていることが分かります。上下左右対称のものを省いたり、枝刈り方法を工夫したりすれば、より効率化できそうですが、ここまで劇的な改善は難しいかもしれません(´・ω・｀)</p>\n","body":"タイトルが長い(´・ω・｀) ただこう書くほかない(´・ω・｀) 掲題の通り[TECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽しく学ぼう！」](https://techplay.jp/column/298?utm_source=column_298&utm_medium=social&utm_campaign=feed&utm_content=tw0)に掲載されているアルゴリズム問題を解いてみました。解答内容は自由に公開してよいとのことなので、せっかくですし、Qiitaにさらしてみたいと思います。\n\n詳細な問題内容は当該記事を見ていただきたいのですが、おおよその内容としては「3x3の魔法陣を生成する。魔法陣を構成する数字はnからn+8まで(nは1以上10以下)」というものです。まず思いつくのは「考えうるすべての盤面を生成して、そのうち条件を満たすものだけをpickupする」という解法でしょうか。要は全探索するわけです。\n\n```ruby:wrong.rb\n#\n# 考えうる魔法陣をすべて生成して、そのうち条件を満たすものだけをpickupする。\n# @param n 問題文にある\"n\"(1..10)\n# @return 条件を満たす魔法陣の一覧\n#\ndef solve(n)\n  [*n..(n + 8)].permutation.with_object([]) do |digits, squares|\n    square = digits.each_slice(3).to_a    \n    totals = [\n      *square.map(&:sum),                   # 縦方向\n      *square.transpose.map(&:sum),         # 横方向\n      (0...3).map{|x| square[x][x]}.sum,    # 右ななめ\n      (0...3).map{|x| square[x][2 - x]}.sum # 左ななめ\n    ]\n    squares << square if totals.uniq.length == 1\n  end\nend\n\n#\n# 3x3の魔法陣をpretty-printする。\n# 補助関数=メインロジックには無関係。\n#\ndef pprint(squares)\n  (0...3).each do |x|\n    rows = squares.map{|square| square[x]}\n    puts rows.map{|row|\n      row.map{|digit| format(\"%02d\", digit)}.join(',')\n    }.join(' | ')\n  end\nend\n\nif __FILE__ == $0\n  (1..10).each do |n|\n    squares = solve(n)\n\n    puts \"[ n=#{n} ]\"\n    pprint(squares)\n  end\nend\n```\n\nこの実行結果が以下の通り。\n\n```\n$ time ruby wrong.rb\n[ n=1 ]\n02,07,06 | 02,09,04 | 04,03,08 | 04,09,02 | 06,01,08 | 06,07,02 | 08,01,06 | 08,03,04\n09,05,01 | 07,05,03 | 09,05,01 | 03,05,07 | 07,05,03 | 01,05,09 | 03,05,07 | 01,05,09\n04,03,08 | 06,01,08 | 02,07,06 | 08,01,06 | 02,09,04 | 08,03,04 | 04,09,02 | 06,07,02\n[ n=2 ]\n03,08,07 | 03,10,05 | 05,04,09 | 05,10,03 | 07,02,09 | 07,08,03 | 09,02,07 | 09,04,05\n10,06,02 | 08,06,04 | 10,06,02 | 04,06,08 | 08,06,04 | 02,06,10 | 04,06,08 | 02,06,10\n05,04,09 | 07,02,09 | 03,08,07 | 09,02,07 | 03,10,05 | 09,04,05 | 05,10,03 | 07,08,03\n[ n=3 ]\n04,09,08 | 04,11,06 | 06,05,10 | 06,11,04 | 08,03,10 | 08,09,04 | 10,03,08 | 10,05,06\n11,07,03 | 09,07,05 | 11,07,03 | 05,07,09 | 09,07,05 | 03,07,11 | 05,07,09 | 03,07,11\n06,05,10 | 08,03,10 | 04,09,08 | 10,03,08 | 04,11,06 | 10,05,06 | 06,11,04 | 08,09,04\n[ n=4 ]\n05,10,09 | 05,12,07 | 07,06,11 | 07,12,05 | 09,04,11 | 09,10,05 | 11,04,09 | 11,06,07\n12,08,04 | 10,08,06 | 12,08,04 | 06,08,10 | 10,08,06 | 04,08,12 | 06,08,10 | 04,08,12\n07,06,11 | 09,04,11 | 05,10,09 | 11,04,09 | 05,12,07 | 11,06,07 | 07,12,05 | 09,10,05\n[ n=5 ]\n06,11,10 | 06,13,08 | 08,07,12 | 08,13,06 | 10,05,12 | 10,11,06 | 12,05,10 | 12,07,08\n13,09,05 | 11,09,07 | 13,09,05 | 07,09,11 | 11,09,07 | 05,09,13 | 07,09,11 | 05,09,13\n08,07,12 | 10,05,12 | 06,11,10 | 12,05,10 | 06,13,08 | 12,07,08 | 08,13,06 | 10,11,06\n[ n=6 ]\n07,12,11 | 07,14,09 | 09,08,13 | 09,14,07 | 11,06,13 | 11,12,07 | 13,06,11 | 13,08,09\n14,10,06 | 12,10,08 | 14,10,06 | 08,10,12 | 12,10,08 | 06,10,14 | 08,10,12 | 06,10,14\n09,08,13 | 11,06,13 | 07,12,11 | 13,06,11 | 07,14,09 | 13,08,09 | 09,14,07 | 11,12,07\n[ n=7 ]\n08,13,12 | 08,15,10 | 10,09,14 | 10,15,08 | 12,07,14 | 12,13,08 | 14,07,12 | 14,09,10\n15,11,07 | 13,11,09 | 15,11,07 | 09,11,13 | 13,11,09 | 07,11,15 | 09,11,13 | 07,11,15\n10,09,14 | 12,07,14 | 08,13,12 | 14,07,12 | 08,15,10 | 14,09,10 | 10,15,08 | 12,13,08\n[ n=8 ]\n09,14,13 | 09,16,11 | 11,10,15 | 11,16,09 | 13,08,15 | 13,14,09 | 15,08,13 | 15,10,11\n16,12,08 | 14,12,10 | 16,12,08 | 10,12,14 | 14,12,10 | 08,12,16 | 10,12,14 | 08,12,16\n11,10,15 | 13,08,15 | 09,14,13 | 15,08,13 | 09,16,11 | 15,10,11 | 11,16,09 | 13,14,09\n[ n=9 ]\n10,15,14 | 10,17,12 | 12,11,16 | 12,17,10 | 14,09,16 | 14,15,10 | 16,09,14 | 16,11,12\n17,13,09 | 15,13,11 | 17,13,09 | 11,13,15 | 15,13,11 | 09,13,17 | 11,13,15 | 09,13,17\n12,11,16 | 14,09,16 | 10,15,14 | 16,09,14 | 10,17,12 | 16,11,12 | 12,17,10 | 14,15,10\n[ n=10 ]\n11,16,15 | 11,18,13 | 13,12,17 | 13,18,11 | 15,10,17 | 15,16,11 | 17,10,15 | 17,12,13\n18,14,10 | 16,14,12 | 18,14,10 | 12,14,16 | 16,14,12 | 10,14,18 | 12,14,16 | 10,14,18\n13,12,17 | 15,10,17 | 11,16,15 | 17,10,15 | 11,18,13 | 17,12,13 | 13,18,11 | 15,16,11\n\nreal    0m34.338s\nuser    0m33.750s\nsys     0m0.203s\n```\n\nわたしの環境ではプログラム実行から結果が返ってくるまでおよそ35秒かかっています。9!=362880通りの盤面を探索する必要があるので、これぐらいの時間がかかってしまうのは仕方がない--というよりは35万件以上探索してもこの程度の時間で済むという印象のほうが強いかも(´・ω・｀) \n\nそれはさておき、もう少し効率の良いアルゴリズムを考えてみます。たとえばn=1のときは15というように、1列の合計値は事前に求めることができます。つまり1列のうち2マスまで決まれば、最後の1マスは自動で決まります。よって「最後の1マスに数字を設定する際、縦/横/ななめ方向に合計値の検査を行って、条件を満たさない場合はその時点で探索をやめる」という枝刈りを実施すれば、単純な全探索よりは探索量が減るはずです。それを実装したものが以下のコードになります。\n\n```ruby:main.rb\n#\n# 幅優先探索で、条件を満たす魔法陣を探す。\n# 「探索中にその魔法陣が条件を満たすかどうかをチェックし、\n# 満たさない場合は探索をやめる」という枝刈りを行って、探索量を減らす。\n# @param n 問題文にある\"n\"(1..10)\n# @return 条件を満たす魔法陣の一覧\n#\ndef solve(n)\n  lo, hi = n, n + 8\n  total = (lo..hi).sum / 3\n\n  queue = (lo..hi).map do |digit|\n    square = Array.new(3){ Array.new(3, 0) }\n    square[0][0] = digit\n    square\n  end\n  squares = []\n\n  until queue.empty?\n    square = queue.shift\n\n    # 数字が未設置の座標を探す。未設置の座標がない場合はその魔法陣が条件を満たすということ。\n    x, y = [*0...3].product([*0...3]).find{|i, j| square[i][j] == 0}\n    if x.nil? && y.nil?\n      squares << square\n      next\n    end\n\n    # 座標(x, y)に置くことができるのは、その魔法陣においていまだ利用されていない数字。\n    # ただし底辺や右辺の座標の場合は、縦方向や横方向あるいは斜め方向の検査を行っておく(=枝刈り)\n    digits = [*lo..hi] - square.flatten.uniq\n    digits.select!{|digit| square[0][y] + square[1][y] + digit == total} if x == 2           # 底辺=縦方向の検査を行う\n    digits.select!{|digit| square[x][0] + square[x][1] + digit == total} if y == 2           # 右辺=横方向の検査を行う\n    digits.select!{|digit| square[0][2] + square[1][1] + digit == total} if x == 2 && y == 0 # 左ななめ方向の検査を行う\n    digits.select!{|digit| square[0][0] + square[1][1] + digit == total} if x == 2 && y == 2 # 右ななめ方向の検査を行う\n\n    digits.each do |digit|\n      temp = square.map(&:dup)\n      temp[x][y] = digit\n      queue << temp\n    end\n  end\n\n  squares\nend\n\n#\n# 3x3の魔法陣をpretty-printする。\n# 補助関数=メインロジックには無関係。\n#\ndef pprint(squares)\n  (0...3).each do |x|\n    rows = squares.map{|square| square[x]}\n    puts rows.map{|row|\n      row.map{|digit| format(\"%02d\", digit)}.join(',')\n    }.join(' | ')\n  end\nend\n\nif __FILE__ == $0\n  (1..10).each do |n|\n    squares = solve(n)\n\n    puts \"[ n=#{n} ]\"\n    pprint(squares)\n  end\nend\n```\n\nこれを実行したものが次の通り。\n\n```\n$ time ruby main.rb\n[ n=1 ]\n02,07,06 | 02,09,04 | 04,03,08 | 04,09,02 | 06,01,08 | 06,07,02 | 08,01,06 | 08,03,04\n09,05,01 | 07,05,03 | 09,05,01 | 03,05,07 | 07,05,03 | 01,05,09 | 03,05,07 | 01,05,09\n04,03,08 | 06,01,08 | 02,07,06 | 08,01,06 | 02,09,04 | 08,03,04 | 04,09,02 | 06,07,02\n[ n=2 ]\n03,08,07 | 03,10,05 | 05,04,09 | 05,10,03 | 07,02,09 | 07,08,03 | 09,02,07 | 09,04,05\n10,06,02 | 08,06,04 | 10,06,02 | 04,06,08 | 08,06,04 | 02,06,10 | 04,06,08 | 02,06,10\n05,04,09 | 07,02,09 | 03,08,07 | 09,02,07 | 03,10,05 | 09,04,05 | 05,10,03 | 07,08,03\n[ n=3 ]\n04,09,08 | 04,11,06 | 06,05,10 | 06,11,04 | 08,03,10 | 08,09,04 | 10,03,08 | 10,05,06\n11,07,03 | 09,07,05 | 11,07,03 | 05,07,09 | 09,07,05 | 03,07,11 | 05,07,09 | 03,07,11\n06,05,10 | 08,03,10 | 04,09,08 | 10,03,08 | 04,11,06 | 10,05,06 | 06,11,04 | 08,09,04\n[ n=4 ]\n05,10,09 | 05,12,07 | 07,06,11 | 07,12,05 | 09,04,11 | 09,10,05 | 11,04,09 | 11,06,07\n12,08,04 | 10,08,06 | 12,08,04 | 06,08,10 | 10,08,06 | 04,08,12 | 06,08,10 | 04,08,12\n07,06,11 | 09,04,11 | 05,10,09 | 11,04,09 | 05,12,07 | 11,06,07 | 07,12,05 | 09,10,05\n[ n=5 ]\n06,11,10 | 06,13,08 | 08,07,12 | 08,13,06 | 10,05,12 | 10,11,06 | 12,05,10 | 12,07,08\n13,09,05 | 11,09,07 | 13,09,05 | 07,09,11 | 11,09,07 | 05,09,13 | 07,09,11 | 05,09,13\n08,07,12 | 10,05,12 | 06,11,10 | 12,05,10 | 06,13,08 | 12,07,08 | 08,13,06 | 10,11,06\n[ n=6 ]\n07,12,11 | 07,14,09 | 09,08,13 | 09,14,07 | 11,06,13 | 11,12,07 | 13,06,11 | 13,08,09\n14,10,06 | 12,10,08 | 14,10,06 | 08,10,12 | 12,10,08 | 06,10,14 | 08,10,12 | 06,10,14\n09,08,13 | 11,06,13 | 07,12,11 | 13,06,11 | 07,14,09 | 13,08,09 | 09,14,07 | 11,12,07\n[ n=7 ]\n08,13,12 | 08,15,10 | 10,09,14 | 10,15,08 | 12,07,14 | 12,13,08 | 14,07,12 | 14,09,10\n15,11,07 | 13,11,09 | 15,11,07 | 09,11,13 | 13,11,09 | 07,11,15 | 09,11,13 | 07,11,15\n10,09,14 | 12,07,14 | 08,13,12 | 14,07,12 | 08,15,10 | 14,09,10 | 10,15,08 | 12,13,08\n[ n=8 ]\n09,14,13 | 09,16,11 | 11,10,15 | 11,16,09 | 13,08,15 | 13,14,09 | 15,08,13 | 15,10,11\n16,12,08 | 14,12,10 | 16,12,08 | 10,12,14 | 14,12,10 | 08,12,16 | 10,12,14 | 08,12,16\n11,10,15 | 13,08,15 | 09,14,13 | 15,08,13 | 09,16,11 | 15,10,11 | 11,16,09 | 13,14,09\n[ n=9 ]\n10,15,14 | 10,17,12 | 12,11,16 | 12,17,10 | 14,09,16 | 14,15,10 | 16,09,14 | 16,11,12\n17,13,09 | 15,13,11 | 17,13,09 | 11,13,15 | 15,13,11 | 09,13,17 | 11,13,15 | 09,13,17\n12,11,16 | 14,09,16 | 10,15,14 | 16,09,14 | 10,17,12 | 16,11,12 | 12,17,10 | 14,15,10\n[ n=10 ]\n11,16,15 | 11,18,13 | 13,12,17 | 13,18,11 | 15,10,17 | 15,16,11 | 17,10,15 | 17,12,13\n18,14,10 | 16,14,12 | 18,14,10 | 12,14,16 | 16,14,12 | 10,14,18 | 12,14,16 | 10,14,18\n13,12,17 | 15,10,17 | 11,16,15 | 17,10,15 | 11,18,13 | 17,12,13 | 13,18,11 | 15,16,11\n\nreal    0m0.618s\nuser    0m0.406s\nsys     0m0.109s\n```\n\nプログラム実行から同じ結果を出力するのに全探索では35秒かかっていましたが、枝刈り版では0.06秒にまで縮まっていることが分かります。上下左右対称のものを省いたり、枝刈り方法を工夫したりすれば、より効率化できそうですが、ここまで劇的な改善は難しいかもしれません(´・ω・｀)\n","coediting":false,"comments_count":0,"created_at":"2018-07-15T21:48:00+09:00","group":null,"id":"6c39cbade45d5b38fbb5","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]}],"title":"TECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽しく学ぼう！」掲載のアルゴリズム問題を解きました。","updated_at":"2018-07-15T21:48:00+09:00","url":"https://qiita.com/neko_the_shadow/items/6c39cbade45d5b38fbb5","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}