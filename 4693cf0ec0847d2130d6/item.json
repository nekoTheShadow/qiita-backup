{"rendered_body":"<p><code>gsub(pattern, replace)</code>は<code>pattern</code>にマッチする部分をすべて<code>replace</code>に置き換えてくれる便利メソッドです。<code>pattern</code>として正規表現、<code>replace</code>として文字列をそれぞれ指定することが多いと思いますが、実はブロックを持つこともでき<strong>「<code>pattern</code>でひっかけた部分をこねくりまわして<code>replace</code>にしたい」</strong>というときにはとても便利です。</p>\n\n<p>たとえば英数字からなる文字列のうち、aとcだけをすべて大文字にする場合は次のように書くことができます。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"nb\">p</span> <span class=\"s2\">\"1a2b3c\"</span><span class=\"p\">.</span><span class=\"nf\">gsub</span><span class=\"p\">(</span><span class=\"sr\">/[ac]/</span><span class=\"p\">){</span><span class=\"o\">|</span><span class=\"n\">ch</span><span class=\"o\">|</span> <span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"nf\">upcase</span><span class=\"p\">}</span> <span class=\"c1\">#=&gt; \"1A2b3C\"</span>\n</code></pre></div></div>\n\n<p>余談ですが、Rubyでは「暗黙のProc化」とでもいうべき裏機能(?)があります。これは<code>&amp;obj</code>のようにアンパサンドを先頭に付与した場合、それに続く<code>obj</code>を<code>Proc</code>として扱おうとするというもので、なかでも<code>&amp;:symbol</code>のよう「アンパサンド +  <code>Symbol</code>」という組合せはよく使われます。</p>\n\n<p>たとえば文字列配列の中身をすべて整数に変換したい場合、この「暗黙のProc化」を利用して次のように書くことができます。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"3\"</span><span class=\"p\">]</span>\n<span class=\"nb\">p</span> <span class=\"n\">words</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">ch</span><span class=\"o\">|</span> <span class=\"n\">ch</span><span class=\"p\">.</span><span class=\"nf\">to_i</span><span class=\"p\">}</span> <span class=\"c1\">#=&gt; [1, 2, 3]</span>\n<span class=\"nb\">p</span> <span class=\"n\">words</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:to_i</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; [1, 2, 3]</span>\n</code></pre></div></div>\n\n<p>この例では<code>map</code>メソッドのブロックを<code>&amp;:to_i</code>で代用しています。ブロックありの<code>gsub</code>もこれと同じにようにブロックを省略し、「暗黙のProc」で代用することができます。つまり最初の例は次のようにもかけてしまうということになります。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"nb\">p</span> <span class=\"s2\">\"1a2b3c\"</span><span class=\"p\">.</span><span class=\"nf\">gsub</span><span class=\"p\">(</span><span class=\"sr\">/[ac]/</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"ss\">:upcase</span><span class=\"p\">)</span>  <span class=\"c1\">#=&gt; \"1A2b3C\"</span>\n</code></pre></div></div>\n\n<p>ブロックをわざわざ書く必要がない分、とてもらくちんですね(｀・ω・´)ｼｬｷｰﾝ</p>\n","body":"\n`gsub(pattern, replace)`は`pattern`にマッチする部分をすべて`replace`に置き換えてくれる便利メソッドです。`pattern`として正規表現、`replace`として文字列をそれぞれ指定することが多いと思いますが、実はブロックを持つこともでき__「`pattern`でひっかけた部分をこねくりまわして`replace`にしたい」__というときにはとても便利です。\n\nたとえば英数字からなる文字列のうち、aとcだけをすべて大文字にする場合は次のように書くことができます。\n\n```rb\np \"1a2b3c\".gsub(/[ac]/){|ch| ch.upcase} #=> \"1A2b3C\"\n```\n\n余談ですが、Rubyでは「暗黙のProc化」とでもいうべき裏機能(?)があります。これは`&obj`のようにアンパサンドを先頭に付与した場合、それに続く`obj`を`Proc`として扱おうとするというもので、なかでも`&:symbol`のよう「アンパサンド +  `Symbol`」という組合せはよく使われます。\n\nたとえば文字列配列の中身をすべて整数に変換したい場合、この「暗黙のProc化」を利用して次のように書くことができます。\n\n```rb\nwords = [\"1\", \"2\", \"3\"]\np words.map{|ch| ch.to_i} #=> [1, 2, 3]\np words.map(&:to_i) #=> [1, 2, 3]\n```\nこの例では`map`メソッドのブロックを`&:to_i`で代用しています。ブロックありの`gsub`もこれと同じにようにブロックを省略し、「暗黙のProc」で代用することができます。つまり最初の例は次のようにもかけてしまうということになります。\n\n```rb\np \"1a2b3c\".gsub(/[ac]/, &:upcase)  #=> \"1A2b3C\"\n```\n\nブロックをわざわざ書く必要がない分、とてもらくちんですね(｀・ω・´)ｼｬｷｰﾝ\n","coediting":false,"comments_count":0,"created_at":"2016-11-19T01:49:43+09:00","group":null,"id":"4693cf0ec0847d2130d6","likes_count":7,"private":false,"reactions_count":0,"stocks_count":2,"tags":[{"name":"Ruby","versions":[]}],"title":"gsubでマッチした部分を置き換え文字の生成に利用したい","updated_at":"2016-11-19T01:53:23+09:00","url":"https://qiita.com/neko_the_shadow/items/4693cf0ec0847d2130d6","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":204,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":2186,"team_membership":null}