{"rendered_body":"<p>日本社会で働くプログラマ、もとい非英語圏のプログラマにとって避けて通れないものが文字コード。とりわけ日本企業向けの受託開発を主とするSIerに勤めていると「年代物のメインフレームシステムが送ってくる、聞いたこともない文字コードのファイルをUnixベースのシステムに取り込む」「日本人大好きExcelで文字化けしないようにUTF-8のCSVをSJISに変える必要がある」などなど、文字コード変換を行う場面に出くわすことが多々あります。SIer勤めでなくとも、プログラマであれば文字コード周りのつらさはわかってもらえると思いますが、一方で文字コードほど非情報技術者にそのつらさがわかってもらえないものも珍しく、炎上とまではいわないものの、トラブルに発展することもないことではありません。</p>\n\n<p>前置きはさておき、UnixやLinux環境において文字コード変換を行いたいときに利用するコマンドが<code>iconv</code>。個人的にはよく利用するコマンドなので、その利用法やTipsなどを簡単にまとめておきたいと思います。</p>\n\n<h1>\n<span id=\"基本文法\" class=\"fragment\"></span><a href=\"#%E5%9F%BA%E6%9C%AC%E6%96%87%E6%B3%95\"><i class=\"fa fa-link\"></i></a>基本文法</h1>\n\n<p>たとえば「CP932のファイル<code>cp932.txt</code>をUTF-8に変換し、その結果を<code>utf8.txt</code>に出力したい」場合は次のように書きます。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>iconv <span class=\"nt\">-f</span> CP932 <span class=\"nt\">-t</span> UTF-8 cp932.txt <span class=\"o\">&gt;</span> utf8.txt\n</pre></div></div>\n\n<p><code>-f</code>オプションで変換元文字コードを、<code>-t</code>オプションで変換後の文字コードをそれぞれ指定します。<code>-f</code>が\"FROM\"、<code>-t</code>が\"TO\"というわけです。なお<strong><code>iconv</code>は変換結果を標準出力に出力します</strong>。よって結果をファイルに書き出したい場合はリダイレクトしてやるか、あるいは以下のように<code>-o</code>オプションを利用することになります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>iconv <span class=\"nt\">-f</span> CP932 <span class=\"nt\">-t</span> UTF-8 <span class=\"nt\">-o</span> utf8.txt cp932.txt\n</pre></div></div>\n\n<p><strong>2017-08-29 追記</strong></p>\n\n<p>書き忘れていましたが、<code>iconv</code>は標準入力を取ることも可能です。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">echo</span> <span class=\"s2\">\"stdin text\"</span> | iconv <span class=\"nt\">-f</span> UTF-8 <span class=\"nt\">-t</span> CP932 \n</pre></div></div>\n\n<h1>\n<span id=\"利用できる文字コードを調べたい\" class=\"fragment\"></span><a href=\"#%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B%E6%96%87%E5%AD%97%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>利用できる文字コードを調べたい</h1>\n\n<p><strong>「手元の環境にインストールされている<code>iconv</code>が変換できる文字コードを知りたい」という場合には<code>-l</code>オプションを利用します。</strong></p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>root@mypc<span class=\"nv\">$ </span>iconv <span class=\"nt\">-l</span>\nThe following list contains all the coded character sets known.  This does\nnot necessarily mean that all combinations of these names can be used <span class=\"k\">for\n</span>the FROM and TO <span class=\"nb\">command </span>line parameters.  One coded character <span class=\"nb\">set </span>can be\nlisted with several different names <span class=\"o\">(</span>aliases<span class=\"o\">)</span><span class=\"nb\">.</span>\n\n  437, 500, 500V1, 850, 851, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865,\n  866, 866NAV, 869, 874, 904, 1026, 1046, 1047, 8859_1, 8859_2, 8859_3, 8859_4,\n  8859_5, 8859_6, 8859_7, 8859_8, 8859_9, 10646-1:1993, 10646-1:1993/UCS4,\n  ANSI_X3.4-1968, ANSI_X3.4-1986, ANSI_X3.4, ANSI_X3.110-1983, ANSI_X3.110,\n  ARABIC, ARABIC7, ARMSCII-8, ASCII, ASMO-708, ASMO_449, BALTIC, BIG-5,\n  BIG-FIVE, BIG5-HKSCS, BIG5, BIG5HKSCS, BIGFIVE, BRF, BS_4730, CA, CN-BIG5,\n  CN-GB, CN, CP-AR, CP-GR, CP-HU, CP037, CP038, CP273, CP274, CP275, CP278,\n\n<span class=\"o\">(</span>以降も文字コードの一覧が並ぶが、長すぎるので省略<span class=\"o\">)</span>\n</pre></div></div>\n\n<p>つまり<code>iconv -l</code>は利用できる文字コードのリストを標準出力に出力します。あとは<code>grep</code>などを利用して、目当ての文字コードを探し<code>-f</code>や<code>-t</code>に指定するだけです。</p>\n\n<h1>\n<span id=\"変換エラーになるとき変換エラーの文字を無視置換したい\" class=\"fragment\"></span><a href=\"#%E5%A4%89%E6%8F%9B%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E3%81%8D%E5%A4%89%E6%8F%9B%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E6%96%87%E5%AD%97%E3%82%92%E7%84%A1%E8%A6%96%E7%BD%AE%E6%8F%9B%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>変換エラーになるとき(変換エラーの文字を無視・置換したい)</h1>\n\n<p>さて機嫌よく<code>iconv</code>による文字コード変換を行っていると、次のようなエラーに出くわすことがあります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>root@mypc<span class=\"nv\">$ </span>iconv <span class=\"nt\">-f</span> UTF-8 <span class=\"nt\">-t</span> CP932 utf8.txt <span class=\"o\">&gt;</span> cp932.txt\niconv: 位置 4 に不正な入力シーケンスがあります\n</pre></div></div>\n\n<p>これは文字コードの変換に失敗した、上の例でいえUTF-8にあってCP932にない文字をCP932に変換しようとしたということを意味します。</p>\n\n<p><strong><code>iconv</code>は通常、変換できない文字に出くわした場合「変換できたところまでを標準出力に出力したのち、エラーメッセージを標準エラー出力に出力して終わり」という形をとります</strong>。このような仕様は情報を損失を防ぐという点で「あり」なのかもしれませんが、多くの場合文字コード変換は情報損失を覚悟のうえで行っており、途中でやめてしまうよりは無視もしくは置換して変換を続行するほうが理にかなっていることも少なくありません。つまり変換できない文字の無視もしくは置換を<code>iconv</code>で実現するにはどうすればよいでしょうか?</p>\n\n<p>まず<strong>無視したい場合は、<code>-t</code>に指定する文字コードの後ろに<code>//IGNORE</code>を付与するか、<code>-c</code>オプションを利用するかのどちらかです。</strong></p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>iconv <span class=\"nt\">-f</span> UTF-8 <span class=\"nt\">-t</span> CP932//IGNORE utf8.txt <span class=\"o\">&gt;</span> cp932.txt\niconv <span class=\"nt\">-c</span> <span class=\"nt\">-f</span> UTF-8 <span class=\"nt\">-t</span> CP932 utf8.txt <span class=\"o\">&gt;</span> cp932.txt\n</pre></div></div>\n\n<p>次に<strong>置換する場合、具体的には変換できない文字をそれらしい文字に置換する場合は<code>-t</code>に指定した文字コードの後ろに<code>//TRANSLIT</code>を付与します。</strong></p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>iconv <span class=\"nt\">-f</span> UTF-8 <span class=\"nt\">-t</span> CP932//TRANSLIT utf8.txt <span class=\"o\">&gt;</span> cp932.txt\n</pre></div></div>\n\n<p>たとえば「変換できない文字に出くわした場合は一律<code>?</code>に置換したい」などなど、もっと細かく制御を行いたい場合はおとなしくPerlやRubyなどを利用しましょう(´・ω・`)</p>\n","body":"\n日本社会で働くプログラマ、もとい非英語圏のプログラマにとって避けて通れないものが文字コード。とりわけ日本企業向けの受託開発を主とするSIerに勤めていると「年代物のメインフレームシステムが送ってくる、聞いたこともない文字コードのファイルをUnixベースのシステムに取り込む」「日本人大好きExcelで文字化けしないようにUTF-8のCSVをSJISに変える必要がある」などなど、文字コード変換を行う場面に出くわすことが多々あります。SIer勤めでなくとも、プログラマであれば文字コード周りのつらさはわかってもらえると思いますが、一方で文字コードほど非情報技術者にそのつらさがわかってもらえないものも珍しく、炎上とまではいわないものの、トラブルに発展することもないことではありません。\n\n前置きはさておき、UnixやLinux環境において文字コード変換を行いたいときに利用するコマンドが`iconv`。個人的にはよく利用するコマンドなので、その利用法やTipsなどを簡単にまとめておきたいと思います。\n\n# 基本文法\n\nたとえば「CP932のファイル`cp932.txt`をUTF-8に変換し、その結果を`utf8.txt`に出力したい」場合は次のように書きます。\n\n```bash\niconv -f CP932 -t UTF-8 cp932.txt > utf8.txt\n```\n\n`-f`オプションで変換元文字コードを、`-t`オプションで変換後の文字コードをそれぞれ指定します。`-f`が\"FROM\"、`-t`が\"TO\"というわけです。なお__`iconv`は変換結果を標準出力に出力します__。よって結果をファイルに書き出したい場合はリダイレクトしてやるか、あるいは以下のように`-o`オプションを利用することになります。\n\n```bash\niconv -f CP932 -t UTF-8 -o utf8.txt cp932.txt\n```\n\n__2017-08-29 追記__\n\n書き忘れていましたが、`iconv`は標準入力を取ることも可能です。\n\n```bash\necho \"stdin text\" | iconv -f UTF-8 -t CP932 \n```\n\n\n# 利用できる文字コードを調べたい\n\n__「手元の環境にインストールされている`iconv`が変換できる文字コードを知りたい」という場合には`-l`オプションを利用します。__\n\n```bash\nroot@mypc$ iconv -l\nThe following list contains all the coded character sets known.  This does\nnot necessarily mean that all combinations of these names can be used for\nthe FROM and TO command line parameters.  One coded character set can be\nlisted with several different names (aliases).\n\n  437, 500, 500V1, 850, 851, 852, 855, 856, 857, 860, 861, 862, 863, 864, 865,\n  866, 866NAV, 869, 874, 904, 1026, 1046, 1047, 8859_1, 8859_2, 8859_3, 8859_4,\n  8859_5, 8859_6, 8859_7, 8859_8, 8859_9, 10646-1:1993, 10646-1:1993/UCS4,\n  ANSI_X3.4-1968, ANSI_X3.4-1986, ANSI_X3.4, ANSI_X3.110-1983, ANSI_X3.110,\n  ARABIC, ARABIC7, ARMSCII-8, ASCII, ASMO-708, ASMO_449, BALTIC, BIG-5,\n  BIG-FIVE, BIG5-HKSCS, BIG5, BIG5HKSCS, BIGFIVE, BRF, BS_4730, CA, CN-BIG5,\n  CN-GB, CN, CP-AR, CP-GR, CP-HU, CP037, CP038, CP273, CP274, CP275, CP278,\n\n(以降も文字コードの一覧が並ぶが、長すぎるので省略)\n```\n \n つまり`iconv -l`は利用できる文字コードのリストを標準出力に出力します。あとは`grep`などを利用して、目当ての文字コードを探し`-f`や`-t`に指定するだけです。\n \n# 変換エラーになるとき(変換エラーの文字を無視・置換したい)\n \nさて機嫌よく`iconv`による文字コード変換を行っていると、次のようなエラーに出くわすことがあります。\n\n```bash\nroot@mypc$ iconv -f UTF-8 -t CP932 utf8.txt > cp932.txt\niconv: 位置 4 に不正な入力シーケンスがあります\n```\nこれは文字コードの変換に失敗した、上の例でいえUTF-8にあってCP932にない文字をCP932に変換しようとしたということを意味します。\n\n__`iconv`は通常、変換できない文字に出くわした場合「変換できたところまでを標準出力に出力したのち、エラーメッセージを標準エラー出力に出力して終わり」という形をとります__。このような仕様は情報を損失を防ぐという点で「あり」なのかもしれませんが、多くの場合文字コード変換は情報損失を覚悟のうえで行っており、途中でやめてしまうよりは無視もしくは置換して変換を続行するほうが理にかなっていることも少なくありません。つまり変換できない文字の無視もしくは置換を`iconv`で実現するにはどうすればよいでしょうか?\n\nまず__無視したい場合は、`-t`に指定する文字コードの後ろに`//IGNORE`を付与するか、`-c`オプションを利用するかのどちらかです。__\n\n```bash\niconv -f UTF-8 -t CP932//IGNORE utf8.txt > cp932.txt\niconv -c -f UTF-8 -t CP932 utf8.txt > cp932.txt\n```\n\n次に__置換する場合、具体的には変換できない文字をそれらしい文字に置換する場合は`-t`に指定した文字コードの後ろに`//TRANSLIT`を付与します。__\n\n```bash\niconv -f UTF-8 -t CP932//TRANSLIT utf8.txt > cp932.txt\n```\n\nたとえば「変換できない文字に出くわした場合は一律`?`に置換したい」などなど、もっと細かく制御を行いたい場合はおとなしくPerlやRubyなどを利用しましょう(´・ω・`)\n\n","coediting":false,"comments_count":0,"created_at":"2017-08-24T00:11:26+09:00","group":null,"id":"fb12ef59e4c19d06f160","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Bash","versions":[]}],"title":"    iconvに関する自分用覚書(基本文法/ 利用できる文字コードを調べたい/変換エラーの文字を無視・置換したい)","updated_at":"2017-08-29T08:55:11+09:00","url":"https://qiita.com/neko_the_shadow/items/fb12ef59e4c19d06f160","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":33,"github_login_name":null,"id":"neko_the_shadow","items_count":168,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}