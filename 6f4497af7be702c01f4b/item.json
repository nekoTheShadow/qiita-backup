{"rendered_body":"\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<p>本記事を書くにあたって利用した主なソフトウェアのバージョンは次の通りです。</p>\n\n<ul>\n<li>javac 11.0.4</li>\n<li>openjdk version \"11.0.4\" 2019-07-16</li>\n<li>IBM DB2 Developer-C Edition 11.5 (Docker/wsl2)</li>\n<li>IBM Data Server Driver for JDBC and SQLJ 4.26.14</li>\n</ul>\n\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<p>以下のコードは<code>EMP</code>というテーブルからすべての<code>EMPNO</code>を取得し、標準出力に出力するというものです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.sql.Connection</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.DriverManager</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.PreparedStatement</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.ResultSet</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.SQLException</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">String</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">\"jdbc:db2://&lt;hostname&gt;:&lt;port&gt;/&lt;dbname&gt;\"</span><span class=\"o\">;</span>\n        <span class=\"nc\">String</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;user&gt;\"</span><span class=\"o\">;</span>\n        <span class=\"nc\">String</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s\">\"&lt;password&gt;\"</span><span class=\"o\">;</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">Connection</span> <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"nc\">DriverManager</span><span class=\"o\">.</span><span class=\"na\">getConnection</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">password</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"na\">setAutoCommit</span><span class=\"o\">(</span><span class=\"kc\">false</span><span class=\"o\">);</span>\n\n            <span class=\"nc\">PreparedStatement</span> <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"na\">prepareStatement</span><span class=\"o\">(</span><span class=\"s\">\"SELECT * FROM EMP\"</span><span class=\"o\">);</span>\n            <span class=\"nc\">ResultSet</span> <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">executeQuery</span><span class=\"o\">();</span>\n\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"s\">\"EMPNO\"</span><span class=\"o\">));</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">SQLException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>このソースコードをコンパイルし、実行すると、標準出力にすべての<code>EMPNO</code>を出力したあと、次のような例外が発生します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>com.ibm.db2.jcc.am.SqlException: [jcc][t4][10251][10308][4.26.14] 接続でのトランザクション進行中に java.sql.Connection.close() が要求されました。\nトランザクションはアクティブのままとなり、接続はクローズできません。 ERRORCODE=-4471, SQLSTATE=null\n    at com.ibm.db2.jcc.am.b7.a(b7.java:794)\n    at com.ibm.db2.jcc.am.b7.a(b7.java:66)\n    at com.ibm.db2.jcc.am.b7.a(b7.java:133)\n    at com.ibm.db2.jcc.am.Connection.checkForTransactionInProgress(Connection.java:1484)\n    at com.ibm.db2.jcc.t4.b.checkForTransactionInProgress(b.java:7581)\n    at com.ibm.db2.jcc.am.Connection.closeResourcesX(Connection.java:1507)\n    at com.ibm.db2.jcc.am.Connection.closeX(Connection.java:1493)\n    at com.ibm.db2.jcc.am.Connection.close(Connection.java:1470)\n    at Main.main(Main.java:22)\n</pre></div></div>\n\n<p><strong><code>java.sql.Connection.close()</code>は<code>try-catch-with-resource</code>が勝手に呼び出してくれているから理解できるとして、そもそも「トランザクションはアクティブのままとなり、接続はクローズできません」ってなんのこっちゃ???</strong> となるわけです。</p>\n\n<h1>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n\n<p>Db2ではDBコネクションをクローズする前に、<code>COMMIT</code>や<code>ROLLBACK</code>によってトランザクションを確定させる必要があります。<code>COMMIT</code>や<code>ROLLBACK</code>をするのは、<code>INSERT</code>や<code>DELETE</code>など、DBのデータに変更を加えたときだけで、データを参照するだけの<code>SELECT</code>では<code>COMMIT</code>や<code>ROLLBACK</code>に注意が回らない--という人も多いかと思いますが、少なくともDb2では<code>SELECT</code>の場合でもトランザクションを意識する必要があります。</p>\n\n<p>前述のソースコードでは、自動コミットがオフの状態になっていました(<code>con.setAutoCommit(false)</code>)。自動コミット=trueの場合、<code>Connection::close</code>を呼び出すと、jdbcドライバが自動でコミットしてくれるのですが、自動コミット=falseだと、プログラマが明示的に<code>Connection::commit</code>や<code>Connection::rollback</code>を呼び出さないと、トランザクションが確定しません。つまり、前述のソースコードでは自動コミットをオフにしたために、トランザクションが確定しないまま、コネクションをクローズしようとし、その結果<code>ERRORCODE=-4471</code>が発生してしまったわけです。</p>\n\n<h1>\n<span id=\"対策\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>対策</h1>\n\n<ul>\n<li>\n<code>Connection::commit</code>もしくは<code>Connection::rollback</code>を呼び出して、トランザクションを明示的に完了させる</li>\n<li>自動コミット=trueにして、トランザクションの完了をJDBC Driverに丸投げする。</li>\n</ul>\n\n<p>対策はこんなもんでしょうか(´・ω・｀)</p>\n","body":"# 環境\n\n本記事を書くにあたって利用した主なソフトウェアのバージョンは次の通りです。\n\n- javac 11.0.4\n- openjdk version \"11.0.4\" 2019-07-16\n- IBM DB2 Developer-C Edition 11.5 (Docker/wsl2)\n- IBM Data Server Driver for JDBC and SQLJ 4.26.14\n\n# 事象\n\n以下のコードは`EMP`というテーブルからすべての`EMPNO`を取得し、標準出力に出力するというものです。\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class Main {\n    public static void main(String[] args) {\n        String url = \"jdbc:db2://<hostname>:<port>/<dbname>\";\n        String user = \"<user>\";\n        String password = \"<password>\";\n\n        try (Connection con = DriverManager.getConnection(url, user, password)) {\n            con.setAutoCommit(false);\n\n            PreparedStatement ps = con.prepareStatement(\"SELECT * FROM EMP\");\n            ResultSet rs = ps.executeQuery();\n\n            while (rs.next()) {\n                System.out.println(rs.getString(\"EMPNO\"));\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nこのソースコードをコンパイルし、実行すると、標準出力にすべての`EMPNO`を出力したあと、次のような例外が発生します。\n\n```\ncom.ibm.db2.jcc.am.SqlException: [jcc][t4][10251][10308][4.26.14] 接続でのトランザクション進行中に java.sql.Connection.close() が要求されました。\nトランザクションはアクティブのままとなり、接続はクローズできません。 ERRORCODE=-4471, SQLSTATE=null\n\tat com.ibm.db2.jcc.am.b7.a(b7.java:794)\n\tat com.ibm.db2.jcc.am.b7.a(b7.java:66)\n\tat com.ibm.db2.jcc.am.b7.a(b7.java:133)\n\tat com.ibm.db2.jcc.am.Connection.checkForTransactionInProgress(Connection.java:1484)\n\tat com.ibm.db2.jcc.t4.b.checkForTransactionInProgress(b.java:7581)\n\tat com.ibm.db2.jcc.am.Connection.closeResourcesX(Connection.java:1507)\n\tat com.ibm.db2.jcc.am.Connection.closeX(Connection.java:1493)\n\tat com.ibm.db2.jcc.am.Connection.close(Connection.java:1470)\n\tat Main.main(Main.java:22)\n```\n\n__`java.sql.Connection.close()`は`try-catch-with-resource`が勝手に呼び出してくれているから理解できるとして、そもそも「トランザクションはアクティブのままとなり、接続はクローズできません」ってなんのこっちゃ???__ となるわけです。\n\n# 原因\n\nDb2ではDBコネクションをクローズする前に、`COMMIT`や`ROLLBACK`によってトランザクションを確定させる必要があります。`COMMIT`や`ROLLBACK`をするのは、`INSERT`や`DELETE`など、DBのデータに変更を加えたときだけで、データを参照するだけの`SELECT`では`COMMIT`や`ROLLBACK`に注意が回らない--という人も多いかと思いますが、少なくともDb2では`SELECT`の場合でもトランザクションを意識する必要があります。\n\n前述のソースコードでは、自動コミットがオフの状態になっていました(`con.setAutoCommit(false)`)。自動コミット=trueの場合、`Connection::close`を呼び出すと、jdbcドライバが自動でコミットしてくれるのですが、自動コミット=falseだと、プログラマが明示的に`Connection::commit`や`Connection::rollback`を呼び出さないと、トランザクションが確定しません。つまり、前述のソースコードでは自動コミットをオフにしたために、トランザクションが確定しないまま、コネクションをクローズしようとし、その結果`ERRORCODE=-4471`が発生してしまったわけです。\n\n# 対策\n\n- `Connection::commit`もしくは`Connection::rollback`を呼び出して、トランザクションを明示的に完了させる\n- 自動コミット=trueにして、トランザクションの完了をJDBC Driverに丸投げする。\n\n対策はこんなもんでしょうか(´・ω・｀)\n","coediting":false,"comments_count":0,"created_at":"2020-05-31T23:21:14+09:00","group":null,"id":"6f4497af7be702c01f4b","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"db2","versions":[]}],"title":"Db2を利用したJavaアプリケーションでERRORCODE=-4471が発生する。","updated_at":"2020-05-31T23:21:14+09:00","url":"https://qiita.com/neko_the_shadow/items/6f4497af7be702c01f4b","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":179,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}