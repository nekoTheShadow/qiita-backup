{"rendered_body":"<p>使い古されたねたではありますが、プログラミングクイズとしてもっとも有名な問題のひとつである「FizzBuzz」をSQLで解いてみました。動作確認自体はPostgreSQLで行いましたが、可能な限り標準SQLに準拠しています。ただし剰余は標準SQLにはないため、処理依存の関数<code>mod</code>を利用しています。もっとも多くの処理系で<code>mod</code>はサポートされていると思いますが。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><span class=\"c1\">-- 桁テーブルを作成&amp;初期化する。</span>\n<span class=\"k\">create</span> <span class=\"k\">table</span> <span class=\"n\">digits</span> <span class=\"p\">(</span><span class=\"n\">digit</span> <span class=\"nb\">integer</span><span class=\"p\">);</span>\n<span class=\"k\">insert</span> <span class=\"k\">into</span> <span class=\"n\">digits</span> <span class=\"k\">values</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"c1\">-- 連番ビューを作成&amp;初期化する。</span>\n<span class=\"k\">create</span> <span class=\"k\">view</span> <span class=\"n\">numbers</span> <span class=\"k\">as</span> <span class=\"p\">(</span>\n    <span class=\"k\">select</span> <span class=\"p\">(</span><span class=\"n\">d1</span><span class=\"p\">.</span><span class=\"n\">digit</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">d2</span><span class=\"p\">.</span><span class=\"n\">digit</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">x</span> \n    <span class=\"k\">from</span> <span class=\"n\">digits</span> <span class=\"k\">as</span> <span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">digits</span> <span class=\"k\">as</span> <span class=\"n\">d2</span>\n    <span class=\"k\">where</span> <span class=\"n\">d1</span><span class=\"p\">.</span><span class=\"n\">digit</span> <span class=\"o\">&lt;&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">or</span> <span class=\"n\">d2</span><span class=\"p\">.</span><span class=\"n\">digit</span> <span class=\"o\">&lt;&gt;</span> <span class=\"mi\">0</span>\n<span class=\"p\">);</span>\n\n<span class=\"c1\">-- FizzBuzzを出力する。</span>\n<span class=\"k\">select</span> \n    <span class=\"n\">x</span><span class=\"p\">,</span>\n    <span class=\"k\">case</span>\n        <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'FizzBuzz'</span>\n        <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'Fizz'</span>\n        <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'Buzz'</span>\n        <span class=\"k\">else</span>                     <span class=\"k\">cast</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">as</span> <span class=\"nb\">char</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span> <span class=\"k\">as</span> <span class=\"k\">result</span>\n<span class=\"k\">from</span> <span class=\"n\">numbers</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n x  |  result\n----+----------\n  1 | 1\n  2 | 2\n  3 | Fizz\n  4 | 4\n  5 | Buzz\n  6 | Fizz\n  7 | 7\n  8 | 8\n  9 | Fizz\n 10 | Buzz\n 11 | 11\n 12 | Fizz\n 13 | 13\n 14 | 14\n 15 | FizzBuzz\n 16 | 16\n 17 | 17\n 18 | Fizz\n 19 | 19\n 20 | Buzz\n 21 | Fizz\n 22 | 22\n 23 | 23\n 24 | Fizz\n 25 | Buzz\n 26 | 26\n 27 | Fizz\n 28 | 28\n 29 | 29\n 30 | FizzBuzz\n 31 | 31\n 32 | 32\n 33 | Fizz\n 34 | 34\n 35 | Buzz\n 36 | Fizz\n 37 | 37\n 38 | 38\n 39 | Fizz\n 40 | Buzz\n 41 | 41\n 42 | Fizz\n 43 | 43\n 44 | 44\n 45 | FizzBuzz\n 46 | 46\n 47 | 47\n 48 | Fizz\n 49 | 49\n 50 | Buzz\n 51 | Fizz\n 52 | 52\n 53 | 53\n 54 | Fizz\n 55 | Buzz\n 56 | 56\n 57 | Fizz\n 58 | 58\n 59 | 59\n 60 | FizzBuzz\n 61 | 61\n 62 | 62\n 63 | Fizz\n 64 | 64\n 65 | Buzz\n 66 | Fizz\n 67 | 67\n 68 | 68\n 69 | Fizz\n 70 | Buzz\n 71 | 71\n 72 | Fizz\n 73 | 73\n 74 | 74\n 75 | FizzBuzz\n 76 | 76\n 77 | 77\n 78 | Fizz\n 79 | 79\n 80 | Buzz\n 81 | Fizz\n 82 | 82\n 83 | 83\n 84 | Fizz\n 85 | Buzz\n 86 | 86\n 87 | Fizz\n 88 | 88\n 89 | 89\n 90 | FizzBuzz\n 91 | 91\n 92 | 92\n 93 | Fizz\n 94 | 94\n 95 | Buzz\n 96 | Fizz\n 97 | 97\n 98 | 98\n 99 | Fizz\n**/</span>\n</pre></div></div>\n\n<p>個人的にもっとも工夫した点としては1から99までの連番をシーケンスではなく直積によって求めているところでしょうか(意外に有名なテクニック!)。つまり<strong>2桁の整数を「1桁の整数を2つくみあわせたもの」として解釈しています</strong>。あるいはRubyでいえば次の例のようなことをしているのと同じです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">9</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">d1</span><span class=\"o\">|</span>\n  <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">9</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">d2</span><span class=\"o\">|</span>\n    <span class=\"n\">numbers</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">d1</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">d2</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div></div>\n\n<p>もしくは直積を扱う<code>Array#product</code>を利用すると、次のようにも書けるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"p\">[</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">9</span><span class=\"p\">].</span><span class=\"nf\">product</span><span class=\"p\">([</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">9</span><span class=\"p\">])</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">d1</span><span class=\"p\">,</span> <span class=\"n\">d2</span><span class=\"o\">|</span>\n  <span class=\"n\">numbers</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">d1</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">d2</span>\n<span class=\"k\">end</span>\n</pre></div></div>\n\n<hr>\n\n<p><strong>2017-01-07追記:</strong></p>\n\n<p>1から99までの連番を生成するところですが、よくよく考えてみると「再帰クエリ」を利用しても書けますね……。なお結果は同じになるので省略しています。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><span class=\"k\">with</span> <span class=\"k\">recursive</span> <span class=\"n\">numbers</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"p\">(</span>\n        <span class=\"k\">select</span> <span class=\"mi\">1</span>\n    <span class=\"k\">union</span> <span class=\"k\">all</span>\n        <span class=\"k\">select</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">from</span> <span class=\"n\">numbers</span> <span class=\"k\">where</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">99</span>\n<span class=\"p\">)</span> \n<span class=\"k\">select</span> \n    <span class=\"n\">x</span><span class=\"p\">,</span>\n    <span class=\"k\">case</span>\n        <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'FizzBuzz'</span>\n        <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'Fizz'</span>\n        <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'Buzz'</span>\n        <span class=\"k\">else</span>                     <span class=\"k\">cast</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"k\">as</span> <span class=\"nb\">char</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"k\">end</span> <span class=\"k\">as</span> <span class=\"k\">result</span>\n<span class=\"k\">from</span> <span class=\"n\">numbers</span>\n<span class=\"k\">order</span> <span class=\"k\">by</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n</pre></div></div>\n\n<p>あるいは「連番を生成する部分」と「ロジックによりFizz/Buzz/FizzBuzzを切り替える部分」を同時に処理するなら、次のように書くこともできます。なお利用してるPostgresSQLの関係上、文字列の型を<code>text</code>にしています。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><span class=\"k\">with</span> <span class=\"k\">recursive</span> <span class=\"n\">fizzbuzz</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"k\">result</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"p\">(</span>\n        <span class=\"k\">select</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'1'</span>\n    <span class=\"k\">union</span> <span class=\"k\">all</span>\n        <span class=\"k\">select</span>\n            <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"k\">case</span>\n                <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'FizzBuzz'</span>\n                <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'Fizz'</span>\n                <span class=\"k\">when</span> <span class=\"k\">mod</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>  <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"s1\">'Buzz'</span>\n                <span class=\"k\">else</span>                     <span class=\"k\">cast</span><span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"k\">as</span> <span class=\"nb\">text</span><span class=\"p\">)</span>\n            <span class=\"k\">end</span>\n        <span class=\"k\">from</span> <span class=\"n\">fizzbuzz</span>\n        <span class=\"k\">where</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">99</span>\n<span class=\"p\">)</span> <span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">fizzbuzz</span> \n</pre></div></div>\n","body":"使い古されたねたではありますが、プログラミングクイズとしてもっとも有名な問題のひとつである「FizzBuzz」をSQLで解いてみました。動作確認自体はPostgreSQLで行いましたが、可能な限り標準SQLに準拠しています。ただし剰余は標準SQLにはないため、処理依存の関数`mod`を利用しています。もっとも多くの処理系で`mod`はサポートされていると思いますが。\n\n```sql\n-- 桁テーブルを作成&初期化する。\ncreate table digits (digit integer);\ninsert into digits values (1), (2), (3), (4), (5), (6), (7), (8), (9), (0);\n\n-- 連番ビューを作成&初期化する。\ncreate view numbers as (\n\tselect (d1.digit * 10 + d2.digit) as x \n\tfrom digits as d1, digits as d2\n\twhere d1.digit <> 0 or d2.digit <> 0\n);\n\n-- FizzBuzzを出力する。\nselect \n\tx,\n\tcase\n\t\twhen mod(x, 15) = 0 then 'FizzBuzz'\n\t\twhen mod(x,  3) = 0 then 'Fizz'\n\t\twhen mod(x,  5) = 0 then 'Buzz'\n\t\telse                     cast(x as char(2))\n\tend as result\nfrom numbers\norder by x;\n\n/**\n x  |  result\n----+----------\n  1 | 1\n  2 | 2\n  3 | Fizz\n  4 | 4\n  5 | Buzz\n  6 | Fizz\n  7 | 7\n  8 | 8\n  9 | Fizz\n 10 | Buzz\n 11 | 11\n 12 | Fizz\n 13 | 13\n 14 | 14\n 15 | FizzBuzz\n 16 | 16\n 17 | 17\n 18 | Fizz\n 19 | 19\n 20 | Buzz\n 21 | Fizz\n 22 | 22\n 23 | 23\n 24 | Fizz\n 25 | Buzz\n 26 | 26\n 27 | Fizz\n 28 | 28\n 29 | 29\n 30 | FizzBuzz\n 31 | 31\n 32 | 32\n 33 | Fizz\n 34 | 34\n 35 | Buzz\n 36 | Fizz\n 37 | 37\n 38 | 38\n 39 | Fizz\n 40 | Buzz\n 41 | 41\n 42 | Fizz\n 43 | 43\n 44 | 44\n 45 | FizzBuzz\n 46 | 46\n 47 | 47\n 48 | Fizz\n 49 | 49\n 50 | Buzz\n 51 | Fizz\n 52 | 52\n 53 | 53\n 54 | Fizz\n 55 | Buzz\n 56 | 56\n 57 | Fizz\n 58 | 58\n 59 | 59\n 60 | FizzBuzz\n 61 | 61\n 62 | 62\n 63 | Fizz\n 64 | 64\n 65 | Buzz\n 66 | Fizz\n 67 | 67\n 68 | 68\n 69 | Fizz\n 70 | Buzz\n 71 | 71\n 72 | Fizz\n 73 | 73\n 74 | 74\n 75 | FizzBuzz\n 76 | 76\n 77 | 77\n 78 | Fizz\n 79 | 79\n 80 | Buzz\n 81 | Fizz\n 82 | 82\n 83 | 83\n 84 | Fizz\n 85 | Buzz\n 86 | 86\n 87 | Fizz\n 88 | 88\n 89 | 89\n 90 | FizzBuzz\n 91 | 91\n 92 | 92\n 93 | Fizz\n 94 | 94\n 95 | Buzz\n 96 | Fizz\n 97 | 97\n 98 | 98\n 99 | Fizz\n**/\n```\n\n個人的にもっとも工夫した点としては1から99までの連番をシーケンスではなく直積によって求めているところでしょうか(意外に有名なテクニック!)。つまり__2桁の整数を「1桁の整数を2つくみあわせたもの」として解釈しています__。あるいはRubyでいえば次の例のようなことをしているのと同じです。\n\n```rb\nnumbers = []\n(0..9).each do |d1|\n  (0..9).each do |d2|\n    numbers << d1 * 10 + d2\n  end\nend\n```\n\nもしくは直積を扱う`Array#product`を利用すると、次のようにも書けるはずです。\n\n```rb\nnumbers = []\n[*0..9].product([*0..9]) do |d1, d2|\n  numbers << d1 * 10 + d2\nend\n```\n\n***\n__2017-01-07追記:__\n\n1から99までの連番を生成するところですが、よくよく考えてみると「再帰クエリ」を利用しても書けますね……。なお結果は同じになるので省略しています。\n\n```sql\nwith recursive numbers (x) as (\n\t\tselect 1\n\tunion all\n\t\tselect x + 1 from numbers where x < 99\n) \nselect \n\tx,\n\tcase\n\t\twhen mod(x, 15) = 0 then 'FizzBuzz'\n\t\twhen mod(x,  3) = 0 then 'Fizz'\n\t\twhen mod(x,  5) = 0 then 'Buzz'\n\t\telse                     cast(x as char(2))\n\tend as result\nfrom numbers\norder by x;\n```\n\nあるいは「連番を生成する部分」と「ロジックによりFizz/Buzz/FizzBuzzを切り替える部分」を同時に処理するなら、次のように書くこともできます。なお利用してるPostgresSQLの関係上、文字列の型を`text`にしています。\n\n```sql\nwith recursive fizzbuzz (x, result) as (\n\t\tselect 1, '1'\n\tunion all\n\t\tselect\n\t\t\tx + 1,\n\t\t\tcase\n\t\t\t\twhen mod(x + 1, 15) = 0 then 'FizzBuzz'\n\t\t\t\twhen mod(x + 1,  3) = 0 then 'Fizz'\n\t\t\t\twhen mod(x + 1,  5) = 0 then 'Buzz'\n\t\t\t\telse                     cast(x + 1 as text)\n\t\t\tend\n\t\tfrom fizzbuzz\n\t\twhere x < 99\n) select * from fizzbuzz \n```\n\n\n\n\n\n","coediting":false,"comments_count":0,"created_at":"2017-01-05T23:47:34+09:00","group":null,"id":"b1a946baadaeee92c7ca","likes_count":6,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"SQL","versions":[]},{"name":"PostgreSQL","versions":[]}],"title":"SQLでFizzBuzzを書いた","updated_at":"2017-01-07T23:04:46+09:00","url":"https://qiita.com/neko_the_shadow/items/b1a946baadaeee92c7ca","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":166,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}