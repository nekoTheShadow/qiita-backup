{"rendered_body":"<p>useridを主キーとして、ユーザの情報を格納する、以下のようなテーブルがあるとします。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">CREATE</span> <span class=\"k\">TABLE</span> <span class=\"n\">users</span> <span class=\"p\">(</span>\n  <span class=\"n\">userid</span>   <span class=\"nb\">INT</span>           <span class=\"k\">NOT</span> <span class=\"k\">NULL</span> <span class=\"k\">PRIMARY</span> <span class=\"k\">KEY</span><span class=\"p\">,</span> \n  <span class=\"n\">username</span> <span class=\"n\">NVARCHAR</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">NOT</span> <span class=\"k\">NULL</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<p>複数のuseridがあたえられて、その情報をusersテーブルから取得したいという場合、以下のようなクエリになると思います。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n<span class=\"k\">FROM</span> <span class=\"n\">users</span>\n<span class=\"k\">WHERE</span> <span class=\"n\">userid</span> <span class=\"k\">IN</span> <span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span> <span class=\"o\">?</span><span class=\"p\">,</span> <span class=\"o\">?</span> <span class=\"p\">...)</span>\n</code></pre></div></div>\n\n<p><strong>問題は、SQLServerではこのプレイスホルダが2100個を超えるとエラーになることです。</strong>たとえば、以下のようなコードで上記のようなクエリを動的に生成したとします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">userids</span> <span class=\"o\">=</span> <span class=\"o\">...;</span>\n\n<span class=\"c1\">// SELECT * FROM users WHERE userid IN (?, ?, ?) のようなクエリを構築する。</span>\n<span class=\"nc\">String</span> <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s\">\"SELECT * FROM users WHERE userid IN (\"</span><span class=\"o\">;</span>\n<span class=\"n\">sql</span> <span class=\"o\">+=</span> <span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">(</span><span class=\"n\">userids</span><span class=\"o\">).</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">unused</span> <span class=\"o\">-&gt;</span> <span class=\"s\">\"?\"</span><span class=\"o\">).</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">(</span><span class=\"s\">\",\"</span><span class=\"o\">));</span>\n<span class=\"n\">sql</span> <span class=\"o\">+=</span> <span class=\"s\">\")\"</span><span class=\"o\">;</span>\n\n<span class=\"nc\">PreparedStatement</span> <span class=\"n\">stmt</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"na\">prepareStatement</span><span class=\"o\">(</span><span class=\"n\">sql</span><span class=\"o\">);</span>\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">userids</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">;</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n    <span class=\"n\">stmt</span><span class=\"o\">.</span><span class=\"na\">setInt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">userids</span><span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">]);</span>\n<span class=\"o\">}</span>\n\n<span class=\"nc\">ResultSet</span> <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">stmt</span><span class=\"o\">.</span><span class=\"na\">executeQuery</span><span class=\"o\">();</span>\n<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"na\">next</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">userid</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"na\">getInt</span><span class=\"o\">(</span><span class=\"s\">\"userid\"</span><span class=\"o\">);</span>\n    <span class=\"nc\">String</span> <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"na\">getString</span><span class=\"o\">(</span><span class=\"s\">\"username\"</span><span class=\"o\">);</span>\n    <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">userid</span><span class=\"o\">,</span> <span class=\"n\">username</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>ここでuserids配列に格納されている件数が2100を超えていると、以下のようなエラーが発生します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>com.microsoft.sqlserver.jdbc.SQLServerException: The incoming request has too many parameters. The server supports a maximum of 2100 parameters. Reduce the number of parameters and resend the request.\n    at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:265)\n    at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1662)\n    at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:615)\n    at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:537)\n    at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7417)\n    at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:3488)\n    at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:262)\n    at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:237)\n    at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeQuery(SQLServerPreparedStatement.java:456)\n    at neko.the.shadow.sqlserver_sample.App.main(App.java:34)\n</code></pre></div></div>\n\n<p>アプリケーションの規模にもよりますが、プレイスホルダが2100個程度あるクエリを発行することは珍しくもなんともなく、この2100個問題はSQLServerを利用するシステム開発では必ずと言ってよいほど頭をもたげてきます。</p>\n\n<p>前置きが長くなりましたが、<strong>この2100個問題のひとつの解決策として、テーブル値パラメーターを利用する方法があります。</strong>上記のユースケースでは、まず以下のようにして、テーブル値パラメーターの型を作成しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">CREATE</span> <span class=\"k\">TYPE</span> <span class=\"n\">useridTableType</span> <span class=\"k\">AS</span> <span class=\"k\">TABLE</span> <span class=\"p\">(</span><span class=\"n\">userid</span> <span class=\"nb\">INT</span><span class=\"p\">);</span>  \n</code></pre></div></div>\n\n<p>あとは以下のようにして動的クエリを発行します。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"nb\">int</span><span class=\"p\">[]</span> <span class=\"n\">userids</span> <span class=\"o\">=</span> <span class=\"p\">...;</span>\n\n<span class=\"n\">SQLServerDataTable</span> <span class=\"n\">useridTable</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">SQLServerDataTable</span><span class=\"p\">();</span>\n<span class=\"n\">useridTable</span><span class=\"p\">.</span><span class=\"n\">addColumnMetadata</span><span class=\"p\">(</span><span class=\"nv\">\"userid\"</span><span class=\"p\">,</span> <span class=\"n\">java</span><span class=\"p\">.</span><span class=\"k\">sql</span><span class=\"p\">.</span><span class=\"n\">Types</span><span class=\"p\">.</span><span class=\"nb\">INTEGER</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nb\">int</span> <span class=\"n\">userid</span> <span class=\"p\">:</span> <span class=\"n\">userids</span><span class=\"p\">)</span> <span class=\"err\">{</span>\n    <span class=\"n\">useridTable</span><span class=\"p\">.</span><span class=\"n\">addRow</span><span class=\"p\">(</span><span class=\"n\">userid</span><span class=\"p\">);</span>\n<span class=\"err\">}</span>\n\n<span class=\"n\">String</span> <span class=\"k\">sql</span> <span class=\"o\">=</span> <span class=\"nv\">\"SELECT * FROM users WHERE userid IN (SELECT userid FROM ?)\"</span><span class=\"p\">;</span>\n<span class=\"n\">SQLServerPreparedStatement</span>  <span class=\"n\">stmt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">SQLServerPreparedStatement</span><span class=\"p\">)</span><span class=\"n\">con</span><span class=\"p\">.</span><span class=\"n\">prepareStatement</span><span class=\"p\">(</span><span class=\"k\">sql</span><span class=\"p\">);</span>\n<span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">setStructured</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">\"useridTableType\"</span><span class=\"p\">,</span> <span class=\"n\">useridTable</span><span class=\"p\">);</span>\n\n<span class=\"n\">ResultSet</span> <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">stmt</span><span class=\"p\">.</span><span class=\"n\">executeQuery</span><span class=\"p\">();</span>\n<span class=\"n\">while</span> <span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"p\">.</span><span class=\"k\">next</span><span class=\"p\">())</span> <span class=\"err\">{</span>\n    <span class=\"nb\">int</span> <span class=\"n\">userid</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"p\">.</span><span class=\"n\">getInt</span><span class=\"p\">(</span><span class=\"nv\">\"userid\"</span><span class=\"p\">);</span>\n    <span class=\"n\">String</span> <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">rs</span><span class=\"p\">.</span><span class=\"n\">getString</span><span class=\"p\">(</span><span class=\"nv\">\"username\"</span><span class=\"p\">);</span>\n    <span class=\"n\">doSomething</span><span class=\"p\">(</span><span class=\"n\">userid</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"p\">);</span>\n<span class=\"err\">}</span>\n</code></pre></div></div>\n\n<p>これだと<code>useridTable</code>に格納されている値が2100を超えていてもエラーにはなりません。やったね(´・ω・`)</p>\n","body":"useridを主キーとして、ユーザの情報を格納する、以下のようなテーブルがあるとします。\n\n```sql\nCREATE TABLE users (\n  userid   INT           NOT NULL PRIMARY KEY, \n  username NVARCHAR(100) NOT NULL\n);\n```\n\n複数のuseridがあたえられて、その情報をusersテーブルから取得したいという場合、以下のようなクエリになると思います。\n\n```sql\nSELECT *\nFROM users\nWHERE userid IN (?, ?, ? ...)\n```\n\n**問題は、SQLServerではこのプレイスホルダが2100個を超えるとエラーになることです。**たとえば、以下のようなコードで上記のようなクエリを動的に生成したとします。\n\n```java\nint[] userids = ...;\n\n// SELECT * FROM users WHERE userid IN (?, ?, ?) のようなクエリを構築する。\nString sql = \"SELECT * FROM users WHERE userid IN (\";\nsql += Arrays.stream(userids).mapToObj(unused -> \"?\").collect(Collectors.joining(\",\"));\nsql += \")\";\n\nPreparedStatement stmt = con.prepareStatement(sql);\nfor (int i = 0, len = userids.length; i < len; i++) {\n    stmt.setInt(i+1, userids[i]);\n}\n\nResultSet rs = stmt.executeQuery();\nwhile (rs.next()) {\n    int userid = rs.getInt(\"userid\");\n    String username = rs.getString(\"username\");\n    doSomething(userid, username);\n}\n```\n\nここでuserids配列に格納されている件数が2100を超えていると、以下のようなエラーが発生します。\n\n```\ncom.microsoft.sqlserver.jdbc.SQLServerException: The incoming request has too many parameters. The server supports a maximum of 2100 parameters. Reduce the number of parameters and resend the request.\n\tat com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:265)\n\tat com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1662)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:615)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:537)\n\tat com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7417)\n\tat com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:3488)\n\tat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:262)\n\tat com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:237)\n\tat com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeQuery(SQLServerPreparedStatement.java:456)\n\tat neko.the.shadow.sqlserver_sample.App.main(App.java:34)\n```\n\nアプリケーションの規模にもよりますが、プレイスホルダが2100個程度あるクエリを発行することは珍しくもなんともなく、この2100個問題はSQLServerを利用するシステム開発では必ずと言ってよいほど頭をもたげてきます。\n\n前置きが長くなりましたが、**この2100個問題のひとつの解決策として、テーブル値パラメーターを利用する方法があります。**上記のユースケースでは、まず以下のようにして、テーブル値パラメーターの型を作成しておきます。\n\n```sql\nCREATE TYPE useridTableType AS TABLE (userid INT);  \n```\n\nあとは以下のようにして動的クエリを発行します。\n\n```sql\nint[] userids = ...;\n\nSQLServerDataTable useridTable = new SQLServerDataTable();\nuseridTable.addColumnMetadata(\"userid\", java.sql.Types.INTEGER);\nfor (int userid : userids) {\n    useridTable.addRow(userid);\n}\n\nString sql = \"SELECT * FROM users WHERE userid IN (SELECT userid FROM ?)\";\nSQLServerPreparedStatement  stmt = (SQLServerPreparedStatement)con.prepareStatement(sql);\nstmt.setStructured(1, \"useridTableType\", useridTable);\n\nResultSet rs = stmt.executeQuery();\nwhile (rs.next()) {\n    int userid = rs.getInt(\"userid\");\n    String username = rs.getString(\"username\");\n    doSomething(userid, username);\n}\n```\n\nこれだと`useridTable`に格納されている値が2100を超えていてもエラーにはなりません。やったね(´・ω・`)\n","coediting":false,"comments_count":0,"created_at":"2022-02-05T14:59:57+09:00","group":null,"id":"00a119c8aa499792b6f3","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"SQLServer","versions":[]}],"title":"SQLServerの2100個問題のひとつの解決策として、テーブル値パラメーターを利用する","updated_at":"2022-02-05T14:59:57+09:00","url":"https://qiita.com/neko_the_shadow/items/00a119c8aa499792b6f3","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":199,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}