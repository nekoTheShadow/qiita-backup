{"rendered_body":"<p><a href=\"https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%83%86%E3%82%A3%E3%83%BB%E3%83%9B%E3%83%BC%E3%83%AB%E5%95%8F%E9%A1%8C\" rel=\"nofollow noopener\" target=\"_blank\">モンティ・ホール問題</a>は「主観的な答えと確率論にのっとった答えが一致しない」という不思議な問題です。今回はこの「モンティ・ホール問題」の簡単なシミュレーションプログラムを書いてみました。経験主義万歳! </p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><code>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">monty_hall</span><span class=\"p\">():</span>\n    <span class=\"c1\"># 0,1,2の扉からランダムに正解が選ばれる\n</span>    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 解答者は0,1,2から好きな扉を選ぶ\n</span>    <span class=\"n\">first_choice</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 司会者であるモンティははずれの扉をひとつ開く\n</span>    <span class=\"n\">monty_choice</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">}</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"n\">answer</span><span class=\"p\">,</span> <span class=\"n\">first_choice</span><span class=\"p\">}))</span>\n\n    <span class=\"c1\"># 解答者は2回目の選択として、最初に選んだ扉とは違う扉を選択する\n</span>    <span class=\"n\">second_choice</span> <span class=\"o\">=</span> <span class=\"p\">({</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">}</span> <span class=\"o\">-</span> <span class=\"p\">{</span><span class=\"n\">first_choice</span><span class=\"p\">,</span> <span class=\"n\">monty_choice</span><span class=\"p\">}).</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># 2回目に選んだ扉は正解なのか?\n</span>    <span class=\"k\">return</span> <span class=\"n\">answer</span> <span class=\"o\">==</span> <span class=\"n\">second_choice</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">100000</span><span class=\"p\">):</span>\n        <span class=\"c1\"># x回の試行中、monty_hall()がTrueを返した回数を記録する。\n</span>        <span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">monty_hall</span><span class=\"p\">())</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"試行回数{0}回のときの確率 : {1}\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">win</span> <span class=\"o\">/</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 試行回数10回のときの確率 : 0.7\n# 試行回数100回のときの確率 : 0.58\n# 試行回数1000回のときの確率 : 0.673\n# 試行回数100000回のときの確率 : 0.66657\n</span></code></pre></div></div>\n\n<p>「モンティ・ホール問題」最大の論点は「司会者がはずれの扉を見せた後、挑戦者は最初の選択を変えるべきか」というところにありますが、「変えたほうが正解である確率が高い」ということが確かめられました。</p>\n\n<p>ちなみに上記のコードはわかりやすいよう、やや冗長な書き方をしていますが、次のようにリファクタリングすることもできます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">refactoring_month_hall</span><span class=\"p\">():</span>\n    <span class=\"c1\"># 0,1,2の扉からランダムに正解が選ばれる\n</span>    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 解答者は0,1,2の扉から好きなものを選ぶ\n</span>    <span class=\"n\">first_choice</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">randrange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># 最初に選んだ扉が正解ではない =&gt; もう一つの扉が正解\n</span>    <span class=\"k\">return</span> <span class=\"n\">answer</span> <span class=\"o\">!=</span> <span class=\"n\">first_choice</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">100000</span><span class=\"p\">):</span>\n        <span class=\"n\">win</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">refactoring_month_hall</span><span class=\"p\">())</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"試行回数{0}回のときの確率 : {1}\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">win</span> <span class=\"o\">/</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># 試行回数10回のときの確率 : 0.8\n# 試行回数100回のときの確率 : 0.65\n# 試行回数1000回のときの確率 : 0.678\n# 試行回数10000回のときの確率 : 0.6676\n# 試行回数100000回のときの確率 : 0.66585\n</span>\n</code></pre></div></div>\n\n<p>こちらでも「最初の選択ではない扉をえらぶほうがよい」ということがはっきりわかります。不思議ですね(´・ω・`)</p>\n","body":"[モンティ・ホール問題](https://ja.wikipedia.org/wiki/%E3%83%A2%E3%83%B3%E3%83%86%E3%82%A3%E3%83%BB%E3%83%9B%E3%83%BC%E3%83%AB%E5%95%8F%E9%A1%8C)は「主観的な答えと確率論にのっとった答えが一致しない」という不思議な問題です。今回はこの「モンティ・ホール問題」の簡単なシミュレーションプログラムを書いてみました。経験主義万歳! \n\n```py3\n\nimport random\n\ndef monty_hall():\n    # 0,1,2の扉からランダムに正解が選ばれる\n    answer = random.randrange(3)\n\n    # 解答者は0,1,2から好きな扉を選ぶ\n    first_choice = random.randrange(3)\n\n    # 司会者であるモンティははずれの扉をひとつ開く\n    monty_choice = random.choice(tuple({0, 1, 2} - {answer, first_choice}))\n    \n    # 解答者は2回目の選択として、最初に選んだ扉とは違う扉を選択する\n    second_choice = ({0, 1, 2} - {first_choice, monty_choice}).pop()\n    \n    # 2回目に選んだ扉は正解なのか?\n    return answer == second_choice\n\nif __name__ == '__main__':\n    for x in (10, 100, 1000, 100000):\n        # x回の試行中、monty_hall()がTrueを返した回数を記録する。\n        win = sum(1 for _ in range(x) if monty_hall())\n        print(\"試行回数{0}回のときの確率 : {1}\".format(x, win / x))\n\n# 試行回数10回のときの確率 : 0.7\n# 試行回数100回のときの確率 : 0.58\n# 試行回数1000回のときの確率 : 0.673\n# 試行回数100000回のときの確率 : 0.66657\n```\n「モンティ・ホール問題」最大の論点は「司会者がはずれの扉を見せた後、挑戦者は最初の選択を変えるべきか」というところにありますが、「変えたほうが正解である確率が高い」ということが確かめられました。\n\nちなみに上記のコードはわかりやすいよう、やや冗長な書き方をしていますが、次のようにリファクタリングすることもできます。\n\n```py3\ndef refactoring_month_hall():\n    # 0,1,2の扉からランダムに正解が選ばれる\n    answer = random.randrange(3)\n\n    # 解答者は0,1,2の扉から好きなものを選ぶ\n    first_choice = random.randrange(3)\n\n    # 最初に選んだ扉が正解ではない => もう一つの扉が正解\n    return answer != first_choice\n\nif __name__ == '__main__':\n    for x in (10, 100, 1000, 10000, 100000):\n        win = sum(1 for _ in range(x) if refactoring_month_hall())\n        print(\"試行回数{0}回のときの確率 : {1}\".format(x, win / x))\n\n# 試行回数10回のときの確率 : 0.8\n# 試行回数100回のときの確率 : 0.65\n# 試行回数1000回のときの確率 : 0.678\n# 試行回数10000回のときの確率 : 0.6676\n# 試行回数100000回のときの確率 : 0.66585\n\n```\n\nこちらでも「最初の選択ではない扉をえらぶほうがよい」ということがはっきりわかります。不思議ですね(´・ω・`)\n","coediting":false,"comments_count":1,"created_at":"2016-08-26T00:19:19+09:00","group":null,"id":"0720fa0fe41260dbbf8c","likes_count":34,"private":false,"reactions_count":0,"stocks_count":27,"tags":[{"name":"Python","versions":[]},{"name":"Python3","versions":[]}],"title":"「モンティ・ホール問題」の簡単なシミュレーションプログラムを書いてみる","updated_at":"2016-08-26T00:19:19+09:00","url":"https://qiita.com/neko_the_shadow/items/0720fa0fe41260dbbf8c","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":214,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":5331,"team_membership":null,"organization_url_name":null}