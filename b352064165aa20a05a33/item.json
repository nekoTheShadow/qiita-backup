{"rendered_body":"<p>GitHub Actions、もといGitHub自体、初心者ということもあって、時間をかなり溶かしたので、メモとして残しておきます(´・ω・｀) とあるパブリック・リポジトリに設定されたGitHub Actionsから別のパブリック・リポジトリに<code>git push</code>したい場合、おおよそ以下の通りに記述すればOKです。</p>\n\n<div class=\"code-frame\" data-lang=\"yml\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">sample-job</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">sample-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">sample-step</span>\n      <span class=\"na\">env</span><span class=\"pi\">:</span>\n        <span class=\"na\">ACCESS_TOKEN</span><span class=\"pi\">:</span>  <span class=\"s\">${{ secrets.ACCESS_TOKEN }}</span>\n      <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">git push https://x-access-token:${ACCESS_TOKEN}@github.com/sample-user/sample-repository sample-branch</span>\n</code></pre></div></div>\n\n<p>ここで大事なのが、リモートレポジトリのURLの形式です。ここでは<code>ACCESS_TOKEN</code>と<code>secrets.ACCESS_TOKEN</code>という環境変数を利用していますが、これはGitHub Actions組み込みの変数ではありません。ユーザが自分で設定する必要があります。</p>\n\n<ol>\n<li>\n<a href=\"https://github.com/settings/tokens\" rel=\"nofollow noopener\" target=\"_blank\">\"Personal access tokens\"</a> において、アクセストークンを作成します。このとき\"Access public repositories\"を有効化し、発行されたアクセストークン文字列を控えておきます。</li>\n<li>GitHub Actionsが設定されたリポジトリのページ → Settings → Secrets において、次のような変数を作成します。\n\n<ul>\n<li>\"Name\": ACCESS_TOKEN</li>\n<li>\"Value\": 1.で控えておいたアクセストークン文字列</li>\n</ul>\n</li>\n<li>すると、GitHub Actionsの<code>secrets.ACCESS_TOKEN</code>が2.で作成した<code>Value</code>の値を指すようになるはずです。</li>\n</ol>\n\n<p>要するにアクセストークンをSecrets経由でGitHub Actionsに渡しているだけです。パブリックなレポジトリにハードコーディングするのはセキュリティ上避けたいので、こういう迂回策をとっているわけです。</p>\n\n<p>また<code>ACCESS_TOKEN</code>という名前は一例に過ぎません。任意の名前をつけても大丈夫です(´・ω・｀)</p>\n","body":"GitHub Actions、もといGitHub自体、初心者ということもあって、時間をかなり溶かしたので、メモとして残しておきます(´・ω・｀) とあるパブリック・リポジトリに設定されたGitHub Actionsから別のパブリック・リポジトリに`git push`したい場合、おおよそ以下の通りに記述すればOKです。\n\n```yml\njobs:\n  sample-job:\n    runs-on: sample-latest\n    steps:\n    - name: sample-step\n      env:\n        ACCESS_TOKEN:  ${{ secrets.ACCESS_TOKEN }}\n      run: git push https://x-access-token:${ACCESS_TOKEN}@github.com/sample-user/sample-repository sample-branch\n```\n\nここで大事なのが、リモートレポジトリのURLの形式です。ここでは`ACCESS_TOKEN`と`secrets.ACCESS_TOKEN`という環境変数を利用していますが、これはGitHub Actions組み込みの変数ではありません。ユーザが自分で設定する必要があります。\n\n1. [\"Personal access tokens\"](https://github.com/settings/tokens) において、アクセストークンを作成します。このとき\"Access public repositories\"を有効化し、発行されたアクセストークン文字列を控えておきます。\n2. GitHub Actionsが設定されたリポジトリのページ → Settings → Secrets において、次のような変数を作成します。\n    - \"Name\": ACCESS_TOKEN\n    - \"Value\": 1.で控えておいたアクセストークン文字列\n3. すると、GitHub Actionsの`secrets.ACCESS_TOKEN`が2.で作成した`Value`の値を指すようになるはずです。\n\n要するにアクセストークンをSecrets経由でGitHub Actionsに渡しているだけです。パブリックなレポジトリにハードコーディングするのはセキュリティ上避けたいので、こういう迂回策をとっているわけです。\n\nまた`ACCESS_TOKEN`という名前は一例に過ぎません。任意の名前をつけても大丈夫です(´・ω・｀)\n","coediting":false,"comments_count":0,"created_at":"2019-12-01T09:37:42+09:00","group":null,"id":"b352064165aa20a05a33","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"GitHub","versions":[]}],"title":"とあるパブリック・リポジトリに設定されたGitHub Actionsから別のパブリック・リポジトリにgit pushしたい","updated_at":"2019-12-01T09:37:42+09:00","url":"https://qiita.com/neko_the_shadow/items/b352064165aa20a05a33","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":194,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}