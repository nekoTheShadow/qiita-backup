{"rendered_body":"<p>注意: 基本的にはこのあたりのドキュメントを読めばよい話ですが、自分用に簡単にまとめておきますね(´・ω・`)</p>\n\n<ul>\n<li><a href=\"https://poi.apache.org/components/spreadsheet/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://poi.apache.org/components/spreadsheet/</a></li>\n<li><a href=\"http://poi.apache.org/components/spreadsheet/how-to.html#xssf_sax_api\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://poi.apache.org/components/spreadsheet/how-to.html#xssf_sax_api</a></li>\n</ul>\n\n<p>JavaでExcelを操作するライブラリであるApache POIでは、HSSFとXSSFという2種類に対応しています。ざっくりいうとHSSFは拡張子がxlsのファイル、XSSFは拡張子がxlsxを扱います。Excel 2007以降はxlsxが標準となっているので、ここではXSSF/xlsxについて記述します (新規システム構築でHSSF/xls対応が必要なことはない…よね?)。</p>\n\n<p>さて、XSSF/xlsxの読み書きに際して、Apache POIは大きく分けて3種類のAPIを用意しています。</p>\n\n<p>① User API </p>\n\n<p>読み書き両方が可能。Google検索でよく引っかかるのは大体これ。いかにもJavaらしいオブジェクト指向的なAPIで、わかりやすく使いやすいのですが、読み書きするファイルの中身をすべてメモリ上に展開するため、メモリ消費がかなり激しいです。Out Of Memoryの原因になりがち。</p>\n\n<p>② Streaming Usermodel API (SXSSF)</p>\n\n<p>一応読み込みもできなくはないのですが、実質的には書き込み専用。User API互換で、特徴はメモリ消費量が少ないこと。これは一定量書き込むたびに一時ファイルへ書き出す作りになっているからで、書き込み時にOut Of Memoryなどを起こしている場合には、こちらに切り替えると、問題が解決する場合があります。ただし、一時ファイルに一度書きだした行は読み込みも書き込みもできないなど、若干使い方に癖があるため、ここは注意して使いましょう。</p>\n\n<p>③ Event API</p>\n\n<p>読み込み専用のAPIで、API体系や使い方は上記2つのAPIとは全く違います。名前の通り、イベントドリブン的に処理ができるAPIで、User APIに比べて、メモリ消費量が少なく、高速にxlsxファイルの読み込みが可能です。User APIを使ったExcelの読み込み処理で、Out Of Memoryを起こしている場合の代替案にすることが多いです。デメリットとしては、若干マイナーで、Google検索でもなかなかサンプルが見つからないことでしょうか。一応、<a href=\"https://svn.apache.org/repos/asf/poi/trunk/poi-examples/src/main/java/org/apache/poi/examples/xssf/eventusermodel/XLSX2CSV.java\" rel=\"nofollow noopener\" target=\"_blank\">公式にサンプルコードは用意されています</a>が、複雑なことをやろうとすると、サンプルが転がっておらず、途端に難易度が上がります。</p>\n\n<p>個人的な経験では、Apache POIを利用する場合、おうおうにしてメモリ消費が問題となります。Out Of Memoryとの戦いですね。上記3種類のAPIをうまく活用して、開発のしやすさとメモリ消費量の両天秤でうまく開発を進めていきたいものです。</p>\n","body":"注意: 基本的にはこのあたりのドキュメントを読めばよい話ですが、自分用に簡単にまとめておきますね(´・ω・`)\n\n- https://poi.apache.org/components/spreadsheet/\n- http://poi.apache.org/components/spreadsheet/how-to.html#xssf_sax_api\n\nJavaでExcelを操作するライブラリであるApache POIでは、HSSFとXSSFという2種類に対応しています。ざっくりいうとHSSFは拡張子がxlsのファイル、XSSFは拡張子がxlsxを扱います。Excel 2007以降はxlsxが標準となっているので、ここではXSSF/xlsxについて記述します (新規システム構築でHSSF/xls対応が必要なことはない…よね?)。\n\nさて、XSSF/xlsxの読み書きに際して、Apache POIは大きく分けて3種類のAPIを用意しています。\n\n① User API \n\n読み書き両方が可能。Google検索でよく引っかかるのは大体これ。いかにもJavaらしいオブジェクト指向的なAPIで、わかりやすく使いやすいのですが、読み書きするファイルの中身をすべてメモリ上に展開するため、メモリ消費がかなり激しいです。Out Of Memoryの原因になりがち。\n\n② Streaming Usermodel API (SXSSF)\n\n一応読み込みもできなくはないのですが、実質的には書き込み専用。User API互換で、特徴はメモリ消費量が少ないこと。これは一定量書き込むたびに一時ファイルへ書き出す作りになっているからで、書き込み時にOut Of Memoryなどを起こしている場合には、こちらに切り替えると、問題が解決する場合があります。ただし、一時ファイルに一度書きだした行は読み込みも書き込みもできないなど、若干使い方に癖があるため、ここは注意して使いましょう。\n\n③ Event API\n\n読み込み専用のAPIで、API体系や使い方は上記2つのAPIとは全く違います。名前の通り、イベントドリブン的に処理ができるAPIで、User APIに比べて、メモリ消費量が少なく、高速にxlsxファイルの読み込みが可能です。User APIを使ったExcelの読み込み処理で、Out Of Memoryを起こしている場合の代替案にすることが多いです。デメリットとしては、若干マイナーで、Google検索でもなかなかサンプルが見つからないことでしょうか。一応、[公式にサンプルコードは用意されています](https://svn.apache.org/repos/asf/poi/trunk/poi-examples/src/main/java/org/apache/poi/examples/xssf/eventusermodel/XLSX2CSV.java)が、複雑なことをやろうとすると、サンプルが転がっておらず、途端に難易度が上がります。\n\n個人的な経験では、Apache POIを利用する場合、おうおうにしてメモリ消費が問題となります。Out Of Memoryとの戦いですね。上記3種類のAPIをうまく活用して、開発のしやすさとメモリ消費量の両天秤でうまく開発を進めていきたいものです。\n","coediting":false,"comments_count":1,"created_at":"2021-10-03T19:04:21+09:00","group":null,"id":"4ee737e9fb98dfb275b4","likes_count":3,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Java","versions":[]},{"name":"POI","versions":[]}],"title":"XSSF(xlsx)を扱う3種類の方法とメモリ消費量について","updated_at":"2021-10-03T19:04:51+09:00","url":"https://qiita.com/neko_the_shadow/items/4ee737e9fb98dfb275b4","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":3434,"team_membership":null,"organization_url_name":null}