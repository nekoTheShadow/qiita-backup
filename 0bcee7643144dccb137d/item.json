{"rendered_body":"<p>とあるディレクトリの下にあるファイルを再帰的に探索する必要が最近ありました。Javaの標準apiにそのような機能が用意されていると思いきや、意外もないとのこと。</p>\n\n<p><strong>2016-12-29追記</strong>_: 「標準にはない」と書いていますが、実はいろいろあるとのご指摘をいただいています。詳しくはコメント欄を参照してください。</p>\n\n<p>たとえば次のような構造のディレクトリがあるとします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>D:\\&gt;tree D:\\temp /f\nフォルダー パスの一覧:  ボリューム Data\nボリューム シリアル番号は C4C7-10BC です\nD:\\TEMP\n│  テキスト0.txt\n│\n├─フォルダ1\n│  │  テキスト1.txt\n│  │\n│  └─フォルダ1-1\n│          テキスト1-1.txt\n│\n├─フォルダ2\n│      テキスト1.txt\n│\n└─フォルダ3\n        テキスト3.txt\n</pre></div></div>\n\n<p>この<code>D:\\temp</code>の下にあるファイルを再帰的に探索する場合は以下のようにします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kn\">package</span> <span class=\"nn\">folder</span><span class=\"o\">;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.File</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.ArrayList</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.List</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Stack</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">FolderUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">String</span> <span class=\"n\">absolutePath</span> <span class=\"o\">=</span> <span class=\"s\">\"D:\\\\temp\"</span><span class=\"o\">;</span>\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">File</span><span class=\"o\">&gt;</span> <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"nc\">FolderUtils</span><span class=\"o\">.</span><span class=\"na\">findAllFile</span><span class=\"o\">(</span><span class=\"n\">absolutePath</span><span class=\"o\">);</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">File</span> <span class=\"n\">file</span> <span class=\"o\">:</span> <span class=\"n\">files</span><span class=\"o\">)</span> <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">getAbsolutePath</span><span class=\"o\">());</span>\n            <span class=\"c1\">// D:\\temp\\フォルダ2\\テキスト1.txt</span>\n            <span class=\"c1\">// D:\\temp\\フォルダ1\\フォルダ1-1\\テキスト1-1.txt</span>\n            <span class=\"c1\">// D:\\temp\\フォルダ1\\テキスト1.txt</span>\n            <span class=\"c1\">// D:\\temp\\フォルダ3\\テキスト3.txt</span>\n            <span class=\"c1\">// D:\\temp\\テキスト0.txt</span>\n\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n     * 与えられたディレクトリの下にあるファイルを再帰的に探索する。\n     * @param absolutePath ディレクトリの絶対パス。\n     * @return ファイルの一覧\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">File</span><span class=\"o\">&gt;</span> <span class=\"nf\">findAllFile</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">absolutePath</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">File</span><span class=\"o\">&gt;</span> <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n        <span class=\"nc\">Stack</span><span class=\"o\">&lt;</span><span class=\"nc\">File</span><span class=\"o\">&gt;</span> <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Stack</span><span class=\"o\">&lt;&gt;();</span>\n        <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">absolutePath</span><span class=\"o\">));</span>\n        <span class=\"k\">while</span> <span class=\"o\">(!</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"nc\">File</span> <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">pop</span><span class=\"o\">();</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"na\">isFile</span><span class=\"o\">())</span> <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">);</span>\n\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"na\">isDirectory</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">File</span> <span class=\"n\">child</span> <span class=\"o\">:</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"na\">listFiles</span><span class=\"o\">())</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"na\">push</span><span class=\"o\">(</span><span class=\"n\">child</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">files</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</pre></div></div>\n\n<p>アルゴリズムは深さ優先探索。ディレクトリならその直下を探索し、それ以外ならリストに記録するだけの単純なものです。深さ優先探索と相性のいい再帰呼び出しではなく、スタックを用いた実装にしているのは効率的な実装を目指したから――ではなく、単にJavaにスタックがあることを知って使いたかったからです(´・ω・<code>) 大した理由がなくてすみません(´・ω・</code>)</p>\n","body":"とあるディレクトリの下にあるファイルを再帰的に探索する必要が最近ありました。Javaの標準apiにそのような機能が用意されていると思いきや、意外もないとのこと。\n\n__2016-12-29追記___: 「標準にはない」と書いていますが、実はいろいろあるとのご指摘をいただいています。詳しくはコメント欄を参照してください。\n\n\nたとえば次のような構造のディレクトリがあるとします。\n\n```\nD:\\>tree D:\\temp /f\nフォルダー パスの一覧:  ボリューム Data\nボリューム シリアル番号は C4C7-10BC です\nD:\\TEMP\n│  テキスト0.txt\n│\n├─フォルダ1\n│  │  テキスト1.txt\n│  │\n│  └─フォルダ1-1\n│          テキスト1-1.txt\n│\n├─フォルダ2\n│      テキスト1.txt\n│\n└─フォルダ3\n        テキスト3.txt\n```\n\nこの`D:\\temp`の下にあるファイルを再帰的に探索する場合は以下のようにします。\n \n```java\npackage folder;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Stack;\n\npublic class FolderUtils {\n\n\tpublic static void main(String[] args) {\n\t\t\n\t\tString absolutePath = \"D:\\\\temp\";\n\t\tList<File> files = FolderUtils.findAllFile(absolutePath);\n\t\tfor (File file : files) System.out.println(file.getAbsolutePath());\n\t\t\t// D:\\temp\\フォルダ2\\テキスト1.txt\n\t\t\t// D:\\temp\\フォルダ1\\フォルダ1-1\\テキスト1-1.txt\n\t\t\t// D:\\temp\\フォルダ1\\テキスト1.txt\n\t\t\t// D:\\temp\\フォルダ3\\テキスト3.txt\n\t\t\t// D:\\temp\\テキスト0.txt\n\n\t}\n\n\n\t/**\n\t * 与えられたディレクトリの下にあるファイルを再帰的に探索する。\n\t * @param absolutePath ディレクトリの絶対パス。\n\t * @return ファイルの一覧\n\t */\n\tpublic static List<File> findAllFile(String absolutePath) {\n\n\t\tList<File> files = new ArrayList<>();\n\n\t\tStack<File> stack = new Stack<>();\n\t\tstack.add(new File(absolutePath));\n\t\twhile (!stack.isEmpty()) {\n\t\t\tFile item = stack.pop();\n\t\t\tif (item.isFile()) files.add(item);\n\n\t\t\tif (item.isDirectory()) {\n\t\t\t\tfor (File child : item.listFiles()) stack.push(child);\n\t\t\t}\n\t\t}\n\n\t\treturn files;\n\t}\n}\n\n```\n\nアルゴリズムは深さ優先探索。ディレクトリならその直下を探索し、それ以外ならリストに記録するだけの単純なものです。深さ優先探索と相性のいい再帰呼び出しではなく、スタックを用いた実装にしているのは効率的な実装を目指したから――ではなく、単にJavaにスタックがあることを知って使いたかったからです(´・ω・`) 大した理由がなくてすみません(´・ω・`)\n  \n","coediting":false,"comments_count":3,"created_at":"2016-12-28T23:55:50+09:00","group":null,"id":"0bcee7643144dccb137d","likes_count":6,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"特定のディレクトリの下にあるファイルを再帰的に探索したい","updated_at":"2016-12-29T06:53:17+09:00","url":"https://qiita.com/neko_the_shadow/items/0bcee7643144dccb137d","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}