{"rendered_body":"<p>zipファイルの中身とその圧縮前のサイズの一覧を取得する--という、この世界でどれだけ需要があるかわからない処理を実装する機会があったため、その技術メモになります。</p>\n\n<p>まずは下準備として、以下の手順でzipファイルを準備します。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> dir0/dir1/dir2\n<span class=\"nb\">echo</span> <span class=\"nt\">-n</span> 1   <span class=\"o\">&gt;</span> dir0/file1\n<span class=\"nb\">echo</span> <span class=\"nt\">-n</span> 22  <span class=\"o\">&gt;</span> dir0/dir1/file2\n<span class=\"nb\">echo</span> <span class=\"nt\">-n</span> 333 <span class=\"o\">&gt;</span> dir0/dir1/dir2/file3\n<span class=\"nb\">cd </span>dir0\nzip <span class=\"nt\">-r</span> ../zipfile.zip <span class=\"k\">*</span>\n<span class=\"nb\">cd</span> ..\n</pre></div></div>\n\n<p>以上のコマンドを上から順番に流していくと、zipfile.zipというzipファイルが作成されます。中身の検証として、以下の手順でzipfile.zipを解凍、格納されたファイルと圧縮前のサイズの一覧を記録しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>unzip <span class=\"nt\">-d</span> dst zipfile.zip\n<span class=\"nb\">cd </span>dst\nfind <span class=\"nb\">.</span> <span class=\"nt\">-type</span> f <span class=\"nt\">-exec</span> <span class=\"nb\">stat</span> <span class=\"nt\">-c</span> %n<span class=\"o\">=</span>%sB <span class=\"o\">{}</span> <span class=\"se\">\\;</span>\n\n<span class=\"c\"># ./dir1/dir2/file3=3B</span>\n<span class=\"c\"># ./dir1/file2=2B</span>\n<span class=\"c\"># ./file1=1B</span>\n</pre></div></div>\n\n<p>準備はこれで完了。本題のJavaコードは以下のようになります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.zip.ZipFile</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"kt\">var</span> <span class=\"n\">zipfile</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ZipFile</span><span class=\"o\">(</span><span class=\"s\">\"zipfile.zip\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">zipfile</span><span class=\"o\">.</span><span class=\"na\">entries</span><span class=\"o\">();</span>\n            <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">entries</span><span class=\"o\">.</span><span class=\"na\">hasMoreElements</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"kt\">var</span> <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">entries</span><span class=\"o\">.</span><span class=\"na\">nextElement</span><span class=\"o\">();</span>\n                <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">isDirectory</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"k\">continue</span><span class=\"o\">;</span>\n                <span class=\"o\">}</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"%s=%dB%n\"</span><span class=\"o\">,</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">(),</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"na\">getSize</span><span class=\"o\">());</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>これを実行すると、以下のような出力が得られます。比較してみると、前準備の内容と一致していることがわかりますね(｀・ω・´)ｼｬｷｰﾝ</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre>dir1/dir2/file3<span class=\"o\">=</span>3B\ndir1/file2<span class=\"o\">=</span>2B\n<span class=\"nv\">file1</span><span class=\"o\">=</span>1B\n</pre></div></div>\n","body":"zipファイルの中身とその圧縮前のサイズの一覧を取得する--という、この世界でどれだけ需要があるかわからない処理を実装する機会があったため、その技術メモになります。\n\nまずは下準備として、以下の手順でzipファイルを準備します。\n\n```bash\nmkdir -p dir0/dir1/dir2\necho -n 1   > dir0/file1\necho -n 22  > dir0/dir1/file2\necho -n 333 > dir0/dir1/dir2/file3\ncd dir0\nzip -r ../zipfile.zip *\ncd ..\n```\n\n以上のコマンドを上から順番に流していくと、zipfile.zipというzipファイルが作成されます。中身の検証として、以下の手順でzipfile.zipを解凍、格納されたファイルと圧縮前のサイズの一覧を記録しておきます。\n\n```bash\nunzip -d dst zipfile.zip\ncd dst\nfind . -type f -exec stat -c %n=%sB {} \\;\n\n# ./dir1/dir2/file3=3B\n# ./dir1/file2=2B\n# ./file1=1B\n```\n\n準備はこれで完了。本題のJavaコードは以下のようになります。\n\n```java:Main.java\nimport java.io.IOException;\nimport java.util.zip.ZipFile;\n\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\ttry (var zipfile = new ZipFile(\"zipfile.zip\")) {\n\t\t\tvar entries = zipfile.entries();\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tvar entry = entries.nextElement();\n\t\t\t\tif (entry.isDirectory()) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tSystem.out.printf(\"%s=%dB%n\", entry.getName(), entry.getSize());\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\nこれを実行すると、以下のような出力が得られます。比較してみると、前準備の内容と一致していることがわかりますね(｀・ω・´)ｼｬｷｰﾝ\n\n```bash\ndir1/dir2/file3=3B\ndir1/file2=2B\nfile1=1B\n```\n","coediting":false,"comments_count":0,"created_at":"2018-06-20T23:23:51+09:00","group":null,"id":"992378f37f977331581a","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"zipファイルの中身とその圧縮前のサイズの一覧を取得したい","updated_at":"2018-06-20T23:23:51+09:00","url":"https://qiita.com/neko_the_shadow/items/992378f37f977331581a","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":163,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}