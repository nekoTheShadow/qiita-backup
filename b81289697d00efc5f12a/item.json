{"rendered_body":"<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sample.rb\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"ss\">:encoding</span> <span class=\"o\">=&gt;</span> <span class=\"no\">Encoding</span><span class=\"o\">::</span><span class=\"no\">CP932</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">file</span><span class=\"o\">|</span>\n  <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"nf\">each_line</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>ファイル読み込み処理を行うと、頻繁に出くわすのがエンコード関係の例外。<code>Encoding::InvalidByteSequenceError</code>など、その名もずばりな例外はもちろんのこと、たとえば読み込んだ行に対して<code>line.split(\",\")</code>を実行したとたん、<code>ArgumentError</code>が発生するということもあります。</p>\n\n<p>このような例外はたいていファイルに含まれる不正なバイトやや変換できない文字が原因です。ではそのようなバイトや文字を読み込んだ場合でも、例外を発生させるのではなく、あたかも正しいバイトや文字を読み込んだかのようにふるまわせるにはどうすればよいでしょうか? あけすけにいってしまうと――<strong>ファイルの読み込み時に文字コード関係の例外を抑制するにはどうすればよいでしょうか?</strong></p>\n\n<p><strong>実は<code>File#open</code>の引数として、<code>String#encode</code>のオプションを指定することができます。</strong>これを利用しましょう。たとえば「読み込んだファイルに不正なバイトや変換不可能文字が含まれていた場合でも例外を発生させるのではなく、無視して処理を実行したい」というときには次のように書きます。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sample.rb\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"ss\">:encoding</span> <span class=\"o\">=&gt;</span> <span class=\"no\">Encoding</span><span class=\"o\">::</span><span class=\"no\">CP932</span><span class=\"p\">,</span> <span class=\"ss\">:invalid</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:replace</span><span class=\"p\">,</span> <span class=\"ss\">:undef</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:replace</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">file</span><span class=\"o\">|</span>\n  <span class=\"n\">file</span><span class=\"p\">.</span><span class=\"nf\">each_line</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>この例では「不正な文字」は置換されるため、例外の発生が抑制されるのですが、一方で<strong>情報が失われる可能性があることにも注意する必要があります。</strong>ただし「ファイル処理のたびに<code>begin/rescue/retry</code>を書く面倒さ」「巨大ファイルの処理中に例外が起きたために最初からやり直さねばならない絶望感」そして「困難なデバックの結果、その例外が本質的ではないところで起きたことが分かった時のやるせなさ」などなどを勘案すると、情報を失うことを覚悟で「不正な文字」を捨ててしまうのがもっとも現実的だとは思います。</p>\n\n<p>なお「<code>File#open</code>の引数に<code>String#encode</code>と同じオプションが指定できる」ことですが、<code>File#open</code>の「るりま」には明記されていません。「るりま」では<code>IO#open</code>にその旨が少し書かれているだけで、やや不親切なような気もしなくはない(´・ω・｀)</p>\n\n<p>また<strong><code>csv</code>ライブラリにもファイルをCSV形式として開く<code>CSV#open</code>が用意されていますが、こちらのメソッドは<code>String#encode</code>と同じオプションを指定することはできません。</strong>同じ名前なのにややこしい(´・ω・｀) したがって<code>CSV#open</code>を何も考えずに使っていると、文字コードがらみの例外が頻発することになります。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"c1\"># この書き方だと「不正な文字」に出くわすと例外が発生する。</span>\n<span class=\"nb\">require</span> <span class=\"s2\">\"csv\"</span>\n<span class=\"no\">CSV</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sample.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"ss\">:encoding</span> <span class=\"o\">=&gt;</span> <span class=\"no\">Encoding</span><span class=\"o\">::</span><span class=\"no\">CP932</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">csv</span><span class=\"o\">|</span>\n  <span class=\"n\">csv</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">row</span><span class=\"o\">|</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>この対処法は実は簡単です。上述の例では<code>CSV#open</code>の引数にパス文字列を与えていますが、これを<code>File</code>オブジェクトに変更します。そしてこの<code>File</code>オブジェクトを生成する<code>File#open</code>メソッドの引数として、<code>String#encode</code>のオプションを指定すればよいというわけです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><code><span class=\"c1\"># 2017-10-24: サンプルコードに誤りがあったため修正</span>\n<span class=\"c1\"># require \"csv\"</span>\n<span class=\"c1\"># File.open(\"sample.csv\", \"r\", :encoding =&gt; Encoding::CP932, :invalid =&gt; :replace, :undef =&gt; :replace) do |file|</span>\n<span class=\"c1\">#   CSV.open(file) do |csv|</span>\n<span class=\"c1\">#     csv.each do |row|</span>\n<span class=\"c1\">#       do_something(row)</span>\n<span class=\"c1\">#     end</span>\n<span class=\"c1\">#   end</span>\n<span class=\"c1\"># end</span>\n\n<span class=\"nb\">require</span> <span class=\"s2\">\"csv\"</span>\n<span class=\"no\">File</span><span class=\"p\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"s2\">\"sample.csv\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">,</span> <span class=\"ss\">:encoding</span> <span class=\"o\">=&gt;</span> <span class=\"no\">Encoding</span><span class=\"o\">::</span><span class=\"no\">CP932</span><span class=\"p\">,</span> <span class=\"ss\">:invalid</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:replace</span><span class=\"p\">,</span> <span class=\"ss\">:undef</span> <span class=\"o\">=&gt;</span> <span class=\"ss\">:replace</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">file</span><span class=\"o\">|</span>\n  <span class=\"no\">CSV</span><span class=\"p\">.</span><span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">row</span><span class=\"o\">|</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p><strong>★参考★</strong><br>\n- <code>File#open</code>: <a href=\"https://docs.ruby-lang.org/ja/latest/method/File/s/new.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.ruby-lang.org/ja/latest/method/File/s/new.html</a><br>\n- <code>String#encode</code>: <a href=\"https://docs.ruby-lang.org/ja/latest/method/String/i/encode.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.ruby-lang.org/ja/latest/method/String/i/encode.html</a><br>\n- <code>IO#open</code>: <a href=\"https://docs.ruby-lang.org/ja/latest/method/IO/s/open.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.ruby-lang.org/ja/latest/method/IO/s/open.html</a><br>\n-  <code>CSV</code>: <a href=\"https://docs.ruby-lang.org/ja/latest/class/CSV.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.ruby-lang.org/ja/latest/class/CSV.html</a></p>\n","body":"\n```rb\nFile.open(\"sample.rb\", \"r\", :encoding => Encoding::CP932) do |file|\n  file.each_line do |line|\n    do_something(line)\n  end\nend\n```\n\nファイル読み込み処理を行うと、頻繁に出くわすのがエンコード関係の例外。`Encoding::InvalidByteSequenceError `など、その名もずばりな例外はもちろんのこと、たとえば読み込んだ行に対して`line.split(\",\")`を実行したとたん、`ArgumentError`が発生するということもあります。\n\nこのような例外はたいていファイルに含まれる不正なバイトやや変換できない文字が原因です。ではそのようなバイトや文字を読み込んだ場合でも、例外を発生させるのではなく、あたかも正しいバイトや文字を読み込んだかのようにふるまわせるにはどうすればよいでしょうか? あけすけにいってしまうと――__ファイルの読み込み時に文字コード関係の例外を抑制するにはどうすればよいでしょうか?__\n\n__実は`File#open`の引数として、`String#encode`のオプションを指定することができます。__これを利用しましょう。たとえば「読み込んだファイルに不正なバイトや変換不可能文字が含まれていた場合でも例外を発生させるのではなく、無視して処理を実行したい」というときには次のように書きます。\n\n```rb\nFile.open(\"sample.rb\", \"r\", :encoding => Encoding::CP932, :invalid => :replace, :undef => :replace) do |file|\n  file.each_line do |line|\n    do_something(line)\n  end\nend\n```\n\nこの例では「不正な文字」は置換されるため、例外の発生が抑制されるのですが、一方で__情報が失われる可能性があることにも注意する必要があります。__ただし「ファイル処理のたびに`begin/rescue/retry`を書く面倒さ」「巨大ファイルの処理中に例外が起きたために最初からやり直さねばならない絶望感」そして「困難なデバックの結果、その例外が本質的ではないところで起きたことが分かった時のやるせなさ」などなどを勘案すると、情報を失うことを覚悟で「不正な文字」を捨ててしまうのがもっとも現実的だとは思います。\n\nなお「`File#open`の引数に`String#encode`と同じオプションが指定できる」ことですが、`File#open`の「るりま」には明記されていません。「るりま」では`IO#open`にその旨が少し書かれているだけで、やや不親切なような気もしなくはない(´・ω・｀)\n\nまた__`csv`ライブラリにもファイルをCSV形式として開く`CSV#open`が用意されていますが、こちらのメソッドは`String#encode`と同じオプションを指定することはできません。__同じ名前なのにややこしい(´・ω・｀) したがって`CSV#open`を何も考えずに使っていると、文字コードがらみの例外が頻発することになります。\n\n```rb\n# この書き方だと「不正な文字」に出くわすと例外が発生する。\nrequire \"csv\"\nCSV.open(\"sample.csv\", \"r\", :encoding => Encoding::CP932) do |csv|\n  csv.each do |row|\n    do_something(row)\n  end\nend\n```\n\nこの対処法は実は簡単です。上述の例では`CSV#open`の引数にパス文字列を与えていますが、これを`File`オブジェクトに変更します。そしてこの`File`オブジェクトを生成する`File#open`メソッドの引数として、`String#encode`のオプションを指定すればよいというわけです。\n\n```rb\n# 2017-10-24: サンプルコードに誤りがあったため修正\n# require \"csv\"\n# File.open(\"sample.csv\", \"r\", :encoding => Encoding::CP932, :invalid => :replace, :undef => :replace) do |file|\n#   CSV.open(file) do |csv|\n#     csv.each do |row|\n#       do_something(row)\n#     end\n#   end\n# end\n\nrequire \"csv\"\nFile.open(\"sample.csv\", \"r\", :encoding => Encoding::CP932, :invalid => :replace, :undef => :replace) do |file|\n  CSV.parse(file) do |row|\n    do_something(row)\n  end\nend\n```\n\n__★参考★__\n- `File#open`: https://docs.ruby-lang.org/ja/latest/method/File/s/new.html\n- `String#encode`: https://docs.ruby-lang.org/ja/latest/method/String/i/encode.html\n- `IO#open`: https://docs.ruby-lang.org/ja/latest/method/IO/s/open.html\n-  `CSV`: https://docs.ruby-lang.org/ja/latest/class/CSV.html\n\n\n\n\n","coediting":false,"comments_count":6,"created_at":"2017-08-11T01:38:23+09:00","group":null,"id":"b81289697d00efc5f12a","likes_count":4,"private":false,"reactions_count":0,"stocks_count":5,"tags":[{"name":"Ruby","versions":[]}],"title":"ファイル読み込みの際に文字コード関係の例外が発生する場合(File#openの引数にはString#encodeのオプションが利用できる)","updated_at":"2017-10-24T22:53:19+09:00","url":"https://qiita.com/neko_the_shadow/items/b81289697d00efc5f12a","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":214,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":8242,"team_membership":null,"organization_url_name":null}