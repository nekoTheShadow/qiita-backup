{"rendered_body":"<p><a href=\"https://codeiq.jp/challenge/2903\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「『ディビジョン・サム』問題」</a>の掲載期限が終了したということで、自分の提出コードを公開します。ほかの解答者のコードは<a href=\"http://togetter.com/li/1049668\" rel=\"nofollow noopener\" target=\"_blank\">Togetter</a>にまとめらているので、ぜひご参考に。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"s\">\"\"\"\n「ディビジョン・サム問題」(https://codeiq.jp/challenge/2903)の解答コード。\n\n== 方針 ==\n\nとある整数の約数の和は素因数分解を利用することができる。\nたとえば整数mが次のように素因数分解できるとする: m = p^2 * q^3\nこのとき整数mの約数の和は (p^0 + p^1 + p^2) * (q^0 + q^1 + q^2  + q^3)\n\n本問では巨大な整数n!^nを素因数分解を行う必要がある。\nn!^n = 1^n * 2^n * ... * n^n であるから、1^n, 2^n, ... n^nを順番に因数分解することで、\n最終的にn!^nの素因数分解の結果を求めることができる\n\"\"\"</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">collections</span><span class=\"p\">,</span> <span class=\"n\">math</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prime_division</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    x &gt; 0を満たす整数に対して素因数分解を行う。\n    戻り値はkeyが素数、valueが指数となるような辞書。\n    \"\"\"</span>\n    <span class=\"n\">ht</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">factor</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">factor</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">factor</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">x</span> <span class=\"o\">//=</span> <span class=\"n\">factor</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">ht</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">geometric_sequence_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    初項a,公比rの等比数列について第1項から第n項までの和を求める。\n    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">**</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    問題文中のF(n).\n    \"\"\"</span>\n\n    <span class=\"c1\"># 1^n, 2^n, ... n^nについて素因数分解を行い、n!^nの素因数分解を行う。\n</span>    <span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">exp</span> <span class=\"ow\">in</span> <span class=\"n\">prime_division</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">items</span><span class=\"p\">():</span> <span class=\"n\">factors</span><span class=\"p\">[</span><span class=\"n\">prime</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">exp</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n\n    <span class=\"c1\"># (p^0 + p^1 + ... ) * (q^0 + q^1 + ...) * ... を求める。なお(p^0 + p^1 + ...)は等比数列である。\n</span>    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"n\">factors</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span> <span class=\"o\">*</span> <span class=\"n\">geometric_sequence_sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n</pre></div></div>\n\n<p>正直なところ解答ソースコードに書いた以上のことはないのですが、少しだけコメントしておきますね。</p>\n\n<p>「『ディビジョン・サム』問題」はざっくりいうと<strong>「巨大数の約数の和を求める」</strong>という内容でした。整数の約数の和は素因数分解を利用して求めることができるということはよく知られています(大学受験などでは頻出ですね)。よって本問題は<strong>「与えられた巨大数をどれだけうまく素因数分解できるか」</strong>という点に集約できます。巨大数を愚直に生成して、それから素因数分解をする――という方法ではいうまでもなくうまくいきません。したがって愚直解ではなく、より洗練された方法に気が付くかという点が本問の肝だったように思います。</p>\n","body":"\n[CodeIQ「『ディビジョン・サム』問題」](https://codeiq.jp/challenge/2903)の掲載期限が終了したということで、自分の提出コードを公開します。ほかの解答者のコードは[Togetter](http://togetter.com/li/1049668)にまとめらているので、ぜひご参考に。\n\n```py3\n\"\"\"\n「ディビジョン・サム問題」(https://codeiq.jp/challenge/2903)の解答コード。\n\n== 方針 ==\n\nとある整数の約数の和は素因数分解を利用することができる。\nたとえば整数mが次のように素因数分解できるとする: m = p^2 * q^3\nこのとき整数mの約数の和は (p^0 + p^1 + p^2) * (q^0 + q^1 + q^2  + q^3)\n\n本問では巨大な整数n!^nを素因数分解を行う必要がある。\nn!^n = 1^n * 2^n * ... * n^n であるから、1^n, 2^n, ... n^nを順番に因数分解することで、\n最終的にn!^nの素因数分解の結果を求めることができる\n\"\"\"\n\n\nimport collections, math\n\ndef prime_division(x):\n    \"\"\"\n    x > 0を満たす整数に対して素因数分解を行う。\n    戻り値はkeyが素数、valueが指数となるような辞書。\n    \"\"\"\n    ht = collections.defaultdict(int)\n    for factor in range(2, int(math.sqrt(x)) + 1):\n        if x == 1: break\n        \n        while x % factor == 0:\n            ht[factor] += 1\n            x //= factor\n    \n    if x != 1: ht[x] += 1\n    return ht\n\n\ndef geometric_sequence_sum(a, r, n):\n    \"\"\"\n    初項a,公比rの等比数列について第1項から第n項までの和を求める。\n    \"\"\"\n    return (a * (r ** n - 1)) // (r - 1)\n\n\ndef f(n):\n    \"\"\"\n    問題文中のF(n).\n    \"\"\"\n    \n    # 1^n, 2^n, ... n^nについて素因数分解を行い、n!^nの素因数分解を行う。\n    factors = collections.defaultdict(int)\n    for x in range(2, n + 1):\n        for prime, exp in prime_division(x).items(): factors[prime] += exp * n\n    \n    # (p^0 + p^1 + ... ) * (q^0 + q^1 + ...) * ... を求める。なお(p^0 + p^1 + ...)は等比数列である。\n    ans = 1\n    for prime, idx in factors.items():\n        ans = ans * geometric_sequence_sum(1, prime, idx+ 1) % (10 ** 6 + 3)\n    return ans\n\nif __name__ == '__main__':\n    n = int(input())\n    print(f(n))\n\n```\n\n正直なところ解答ソースコードに書いた以上のことはないのですが、少しだけコメントしておきますね。\n\n「『ディビジョン・サム』問題」はざっくりいうと__「巨大数の約数の和を求める」__という内容でした。整数の約数の和は素因数分解を利用して求めることができるということはよく知られています(大学受験などでは頻出ですね)。よって本問題は__「与えられた巨大数をどれだけうまく素因数分解できるか」__という点に集約できます。巨大数を愚直に生成して、それから素因数分解をする――という方法ではいうまでもなくうまくいきません。したがって愚直解ではなく、より洗練された方法に気が付くかという点が本問の肝だったように思います。\n\n","coediting":false,"comments_count":0,"created_at":"2016-12-01T23:41:52+09:00","group":null,"id":"aaf73e7515571c787698","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"codeiq","versions":[]},{"name":"Python3","versions":[]}],"title":"CodeIQ「『ディビジョン・サム』問題」に参加しました。","updated_at":"2016-12-01T23:43:39+09:00","url":"https://qiita.com/neko_the_shadow/items/aaf73e7515571c787698","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":165,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}