{"rendered_body":"\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<p>この記事は以下の環境で、稼働確認を実施しました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>C:\\&gt;java -version\nopenjdk version \"11.0.3\" 2019-04-16\nOpenJDK Runtime Environment AdoptOpenJDK (build 11.0.3+7)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.3+7, mixed mode)\n</code></pre></div></div>\n\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<p>以下の<code>Main.java</code>はクラスパス上に存在する<code>queen.properties</code>を読み込んだのち、その内容を整形して表示するものです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Properties</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"kt\">var</span> <span class=\"n\">in</span> <span class=\"o\">=</span> <span class=\"nc\">Main</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getClassLoader</span><span class=\"o\">().</span><span class=\"na\">getResourceAsStream</span><span class=\"o\">(</span><span class=\"s\">\"queen.properties\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">properties</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Properties</span><span class=\"o\">();</span>\n            <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">load</span><span class=\"o\">(</span><span class=\"n\">in</span><span class=\"o\">);</span>\n\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">var</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">stringPropertyNames</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"kt\">var</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">properties</span><span class=\"o\">.</span><span class=\"na\">getProperty</span><span class=\"o\">(</span><span class=\"n\">key</span><span class=\"o\">);</span>\n                <span class=\"kt\">var</span> <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"s\">\"key=`%s` value=`%s`\"</span><span class=\"o\">,</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">value</span><span class=\"o\">);</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">message</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>なお<code>queen.properties</code>の内容は次の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"ini\">\n<div class=\"code-lang\"><span class=\"bold\">queen.properties</span></div>\n<div class=\"highlight\"><pre><code><span class=\"py\">queen.vocal</span>  <span class=\"p\">=</span> <span class=\"s\">Freddie Mercury</span>\n<span class=\"py\">queen.guitar</span> <span class=\"p\">=</span> <span class=\"s\">Brian May</span>\n<span class=\"py\">queen.bass</span>   <span class=\"p\">=</span> <span class=\"s\">John Deacon</span>\n<span class=\"py\">queen.drum</span>   <span class=\"p\">=</span> <span class=\"s\">Roger Taylor</span>\n</code></pre></div>\n</div>\n\n<p>さて<code>Main.java</code>を<code>javac</code>によりコンパイルして、<code>Main.class</code>を生成し、以下の通り実行したところ、エラーが発生し、想定通りの挙動を見せませんでした。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>C:\\&gt;java -cp properties\\queen.properties; Main\nException in thread \"main\" java.lang.NullPointerException: inStream parameter is null\n        at java.base/java.util.Objects.requireNonNull(Objects.java:246)\n        at java.base/java.util.Properties.load(Properties.java:403)\n        at Main.main(Main.java:8)\n</code></pre></div></div>\n\n<p><strong>このケースでは<code>properties</code>ディレクトリに格納された<code>queen.properties</code>をクラスパスに追加したいという意図がありました。そのため、クラスパスを指定する<code>-cp</code>オプションに<code>properties\\queen.properties</code>を指定したのですが、うまく動作しなかったようです。</strong></p>\n\n<h1>\n<span id=\"原因と対策\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0%E3%81%A8%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>原因と対策</h1>\n\n<p>ワイルドカード(<code>*</code>)を利用する場合などを別にすると、クラスパスへの指定方法はおおよそ次のようなルールになっているようです。</p>\n\n<ul>\n<li>jarファイルやzipファイルはファイル名を指定する。</li>\n<li>それ以外はディレクトリ名を指定する。</li>\n</ul>\n\n<p>propertiesファイルをクラスパスに指定したいというのが今回の要望でした。したがって、クラスパスの指定方法としては後者が正解です。そこで、<code>-cp</code>オプションにファイル名ではなく、ディレクトリ名を指定したところ、想定通りの挙動になりました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>C:\\&gt;java -cp properties; Main\nkey=`queen.guitar` value=`Brian May`\nkey=`queen.drum` value=`Roger Taylor`\nkey=`queen.vocal` value=`Freddie Mercury`\nkey=`queen.bass` value=`John Deacon`\n</code></pre></div></div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<p><a href=\"https://docs.oracle.com/javase/jp/8/docs/technotes/tools/windows/classpath.html\" rel=\"nofollow noopener\" target=\"_blank\">「クラス・パスの設定」</a></p>\n","body":"# 環境\n\nこの記事は以下の環境で、稼働確認を実施しました。\n\n```\nC:\\>java -version\nopenjdk version \"11.0.3\" 2019-04-16\nOpenJDK Runtime Environment AdoptOpenJDK (build 11.0.3+7)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.3+7, mixed mode)\n```\n\n# 事象\n\n以下の`Main.java`はクラスパス上に存在する`queen.properties`を読み込んだのち、その内容を整形して表示するものです。\n\n```java:Main.java\nimport java.io.IOException;\nimport java.util.Properties;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (var in = Main.class.getClassLoader().getResourceAsStream(\"queen.properties\")) {\n            var properties = new Properties();\n            properties.load(in);\n\n            for (var key : properties.stringPropertyNames()) {\n                var value = properties.getProperty(key);\n                var message = String.format(\"key=`%s` value=`%s`\", key, value);\n                System.out.println(message);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nなお`queen.properties`の内容は次の通りです。\n\n```queen.properties\nqueen.vocal  = Freddie Mercury\nqueen.guitar = Brian May\nqueen.bass   = John Deacon\nqueen.drum   = Roger Taylor\n```\n\nさて`Main.java`を`javac`によりコンパイルして、`Main.class`を生成し、以下の通り実行したところ、エラーが発生し、想定通りの挙動を見せませんでした。\n\n```\nC:\\>java -cp properties\\queen.properties; Main\nException in thread \"main\" java.lang.NullPointerException: inStream parameter is null\n        at java.base/java.util.Objects.requireNonNull(Objects.java:246)\n        at java.base/java.util.Properties.load(Properties.java:403)\n        at Main.main(Main.java:8)\n```\n\n__このケースでは`properties`ディレクトリに格納された`queen.properties`をクラスパスに追加したいという意図がありました。そのため、クラスパスを指定する`-cp`オプションに`properties\\queen.properties`を指定したのですが、うまく動作しなかったようです。__\n\n# 原因と対策\n\nワイルドカード(`*`)を利用する場合などを別にすると、クラスパスへの指定方法はおおよそ次のようなルールになっているようです。\n\n- jarファイルやzipファイルはファイル名を指定する。\n- それ以外はディレクトリ名を指定する。\n\npropertiesファイルをクラスパスに指定したいというのが今回の要望でした。したがって、クラスパスの指定方法としては後者が正解です。そこで、`-cp`オプションにファイル名ではなく、ディレクトリ名を指定したところ、想定通りの挙動になりました。\n\n```\nC:\\>java -cp properties; Main\nkey=`queen.guitar` value=`Brian May`\nkey=`queen.drum` value=`Roger Taylor`\nkey=`queen.vocal` value=`Freddie Mercury`\nkey=`queen.bass` value=`John Deacon`\n```\n\n# 参考\n\n[「クラス・パスの設定」](https://docs.oracle.com/javase/jp/8/docs/technotes/tools/windows/classpath.html)\n","coediting":false,"comments_count":1,"created_at":"2019-10-06T00:49:29+09:00","group":null,"id":"b0427409961299fb83f2","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"-cpオプションにプロパティファイルのパスを指定したにも関わらず、クラスパスとして認識されない","updated_at":"2019-10-06T00:49:29+09:00","url":"https://qiita.com/neko_the_shadow/items/b0427409961299fb83f2","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":199,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}