{"rendered_body":"<p>Webアプリケーション構築にあたっては原則として「単一言語/単一フレームワーク」であるべきだとは思いますが、現実としてそれが許されない場合もあります。なかでも業務システムの開発などにかかわっていると、つぎはぎのような開発を強いられることもある――と聞いています(血涙)</p>\n\n<p>その延長としてSpringで作られたクラスをServletで利用する、つまり<strong>Servlet内で<code>@Autowired</code>せねばならない</strong>ということがありました。簡単にできると思いきや、かなりはまったので、メモとしてサンプルを示しておきます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"nd\">@WebServlet</span><span class=\"o\">(</span><span class=\"s\">\"/hoge\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">HogeServlet</span> <span class=\"kd\">extends</span> <span class=\"nc\">HttpServlet</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Autowired</span> <span class=\"kd\">private</span> <span class=\"nc\">HogeService</span> <span class=\"n\">hogeService</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">init</span><span class=\"o\">(</span><span class=\"nc\">ServletConfig</span> <span class=\"n\">config</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">ServletException</span> <span class=\"o\">{</span>\n        <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">init</span><span class=\"o\">(</span><span class=\"n\">config</span><span class=\"o\">);</span>\n        <span class=\"nc\">SpringBeanAutowiringSupport</span><span class=\"o\">.</span><span class=\"na\">processInjectionBasedOnServletContext</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">,</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"na\">getServletContext</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">doGet</span><span class=\"o\">(</span><span class=\"nc\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"nc\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">ServletException</span> <span class=\"o\">{</span>\n        <span class=\"n\">hogeService</span><span class=\"o\">.</span><span class=\"na\">doSomething</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>「各種Beanの生成や消滅をSpringに任せる」というのがSpringの原則であり、<code>@Autowired</code>はその典型といえます。逆にいえば<strong>Springの外にいるServletの中で<code>@Autowried</code>を利用するにはそのServletをSpringのライフサイクルの中に組み込んでやる必要があり、具体的にはオーバライドした<code>init</code>メソッドにおいてその設定を行っています。</strong></p>\n","body":"\nWebアプリケーション構築にあたっては原則として「単一言語/単一フレームワーク」であるべきだとは思いますが、現実としてそれが許されない場合もあります。なかでも業務システムの開発などにかかわっていると、つぎはぎのような開発を強いられることもある――と聞いています(血涙)\n\nその延長としてSpringで作られたクラスをServletで利用する、つまり__Servlet内で`@Autowired`せねばならない__ということがありました。簡単にできると思いきや、かなりはまったので、メモとしてサンプルを示しておきます。\n\n```java\n@WebServlet(\"/hoge\")\npublic class HogeServlet extends HttpServlet {\n\t\n    @Autowired private HogeService hogeService;\n    \n\t@Override\n\tprotected void init(ServletConfig config) throws ServletException {\n\t\tsuper.init(config);\n\t\tSpringBeanAutowiringSupport.processInjectionBasedOnServletContext(this, config.getServletContext());\n\t}\n    \n    @Override\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException {\n\t\thogeService.doSomething();\n\t}\n}\n```\n\n「各種Beanの生成や消滅をSpringに任せる」というのがSpringの原則であり、`@Autowired`はその典型といえます。逆にいえば__Springの外にいるServletの中で`@Autowried`を利用するにはそのServletをSpringのライフサイクルの中に組み込んでやる必要があり、具体的にはオーバライドした`init`メソッドにおいてその設定を行っています。__\n\n","coediting":false,"comments_count":0,"created_at":"2016-12-20T23:33:28+09:00","group":null,"id":"c82a90459e11a940cc5f","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"spring","versions":[]},{"name":"servlet","versions":[]}],"title":"Servletの中で@Autowiredを利用したい","updated_at":"2016-12-20T23:35:07+09:00","url":"https://qiita.com/neko_the_shadow/items/c82a90459e11a940cc5f","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":173,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}