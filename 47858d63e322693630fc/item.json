{"rendered_body":"<p>Javaプログラミングにおいて、少しばかり複雑なことをしようとすると、必ず頭をもたげてくるのがリフレクション。リフレクションを利用し、とあるクラスのメソッド一覧を取得するような処理を書くことは多いと思いますが、その際<strong>取得したメソッドがstaticか否かを判定したいという場合には<code>Modifier#isStatic</code>を利用します</strong>。以下がそのサンプルとなります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.lang.reflect.Method</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.lang.reflect.Modifier</span><span class=\"o\">;</span>\n\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">StaticTest</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Method</span><span class=\"o\">[]</span> <span class=\"n\">methods</span> <span class=\"o\">=</span> <span class=\"nc\">Sample</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getDeclaredMethods</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Method</span> <span class=\"n\">method</span> <span class=\"o\">:</span> <span class=\"n\">methods</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"nc\">Modifier</span><span class=\"o\">.</span><span class=\"na\">isStatic</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">getModifiers</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">method</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">());</span>\n                <span class=\"c1\">// =&gt; privateStaticMethod publicStaticMethod</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"nc\">Sample</span> <span class=\"o\">{</span>\n        <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">publicStaticMethod</span><span class=\"o\">()</span> <span class=\"o\">{};</span>\n        <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">privateStaticMethod</span><span class=\"o\">()</span> <span class=\"o\">{};</span>\n        <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">publicInstanceMethod</span><span class=\"o\">(){};</span>\n        <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">privateInstanceMethod</span><span class=\"o\">(){};</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>参考: <a href=\"https://docs.oracle.com/javase/jp/8/docs/api/java/lang/reflect/Modifier.html\" rel=\"nofollow noopener\" target=\"_blank\">『Modifier (Java Platform SE 8 )』</a></p>\n","body":"\nJavaプログラミングにおいて、少しばかり複雑なことをしようとすると、必ず頭をもたげてくるのがリフレクション。リフレクションを利用し、とあるクラスのメソッド一覧を取得するような処理を書くことは多いと思いますが、その際__取得したメソッドがstaticか否かを判定したいという場合には`Modifier#isStatic`を利用します__。以下がそのサンプルとなります。\n\n```java\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Modifier;\n\n\npublic class StaticTest {\n    \n    public static void main(String[] args) {\n        Method[] methods = Sample.class.getDeclaredMethods();\n        for (Method method : methods) {\n            if (Modifier.isStatic(method.getModifiers())) {\n                System.out.println(method.getName());\n                // => privateStaticMethod publicStaticMethod\n            }\n        }\n    }\n    \n    public static final class Sample {\n        public static void publicStaticMethod() {};\n        private static void privateStaticMethod() {};\n        public void publicInstanceMethod(){};\n        private void privateInstanceMethod(){};\n    }\n}\n```\n\n参考: [『Modifier (Java Platform SE 8 )』]( \nhttps://docs.oracle.com/javase/jp/8/docs/api/java/lang/reflect/Modifier.html)\n\n","coediting":false,"comments_count":0,"created_at":"2017-05-02T00:38:59+09:00","group":null,"id":"47858d63e322693630fc","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"[リフレクション]メソッドがstaticかどうかを判定するにはModifier#isStaticを利用する。","updated_at":"2017-05-02T00:38:59+09:00","url":"https://qiita.com/neko_the_shadow/items/47858d63e322693630fc","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":183,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}