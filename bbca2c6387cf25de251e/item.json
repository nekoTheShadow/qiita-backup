{"rendered_body":"<p>たとえばコマンドラインツールを開発していると、<code>main</code>メソッドをテストしたりデバッグしたりしたいということがあります。そのような場合リフレクションを使うと便利ですが、どのようにすれば<code>main</code>メソッドをリフレクションから実行できるでしょうか? その結論が以下のサンプルです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"k\">try</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Method</span> <span class=\"n\">mainMethod</span> <span class=\"o\">=</span> <span class=\"nc\">Sample</span><span class=\"o\">.</span><span class=\"na\">class</span><span class=\"o\">.</span><span class=\"na\">getMethod</span><span class=\"o\">(</span><span class=\"s\">\"main\"</span><span class=\"o\">,</span> <span class=\"nc\">String</span><span class=\"o\">[].</span><span class=\"na\">class</span><span class=\"o\">);</span>\n    <span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">\"arg1\"</span><span class=\"o\">,</span> <span class=\"s\">\"arg2\"</span><span class=\"o\">,</span> <span class=\"s\">\"arg3\"</span><span class=\"o\">};</span>\n    <span class=\"n\">mainMethod</span><span class=\"o\">.</span><span class=\"na\">invoke</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"nc\">Object</span><span class=\"o\">)</span> <span class=\"n\">args</span><span class=\"o\">);</span>\n<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">NoSuchMethodException</span> \n            <span class=\"o\">|</span> <span class=\"nc\">SecurityException</span> \n            <span class=\"o\">|</span> <span class=\"nc\">IllegalAccessException</span>\n            <span class=\"o\">|</span> <span class=\"nc\">IllegalArgumentException</span>\n            <span class=\"o\">|</span> <span class=\"nc\">InvocationTargetException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n    <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">RuntimeException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>ポイントとしては<code>invoke</code>でしょうか。<strong>第1引数に<code>null</code>を与えて、以降の可変長引数部分は<code>Object</code>にキャストした<code>args</code>を指定する。</strong>この2点を守って楽しくリフレクションしましょう(´・ω・`)</p>\n","body":"\nたとえばコマンドラインツールを開発していると、`main`メソッドをテストしたりデバッグしたりしたいということがあります。そのような場合リフレクションを使うと便利ですが、どのようにすれば`main`メソッドをリフレクションから実行できるでしょうか? その結論が以下のサンプルです。\n\n```java\ntry {\n    Method mainMethod = Sample.class.getMethod(\"main\", String[].class);\n    String[] args = {\"arg1\", \"arg2\", \"arg3\"};\n    mainMethod.invoke(null, (Object) args);\n} catch (NoSuchMethodException \n            | SecurityException \n            | IllegalAccessException\n            | IllegalArgumentException\n            | InvocationTargetException e) {\n    e.printStackTrace();\n    throw new RuntimeException(e);\n}\n```\n\nポイントとしては`invoke`でしょうか。__第1引数に`null`を与えて、以降の可変長引数部分は`Object`にキャストした`args`を指定する。__この2点を守って楽しくリフレクションしましょう(´・ω・`)\n","coediting":false,"comments_count":0,"created_at":"2017-05-14T21:12:48+09:00","group":null,"id":"bbca2c6387cf25de251e","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"リフレクションを利用してmainメソッドを呼び出したい","updated_at":"2017-05-14T21:12:48+09:00","url":"https://qiita.com/neko_the_shadow/items/bbca2c6387cf25de251e","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":166,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}