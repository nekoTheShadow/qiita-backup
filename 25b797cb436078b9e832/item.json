{"rendered_body":"<p>WSL2では、インストールしたUbuntuが仮想マシンとして稼働し、ホストとは別のIPアドレスを有します。そのため、ホスト(Windows)からWSL2(Ubuntu)で動くソフトウェアをつつく際、WSL2のIPアドレスを指定する必要がある場合があります。</p>\n\n<p>では、WSL2のIPアドレスはどのように確認すればよいでしょうか?</p>\n\n<p>なお、以下記事のように<code>.wslconfig</code>を設定してやると、WSL2上で稼働するソフトウェアに<code>localhost</code>でアクセスできるようになるのですが、少なくとも自分の環境では、<code>.wslconfig</code>がなぜかうまく動かなかったり、ホスト側のソフトウェアが<code>localhost</code>をうまく解決できなかったりする場合があります。本記事はそういうケースで役に立つ想定です。</p>\n\n<p><a href=\"https://forest.watch.impress.co.jp/docs/news/1198651.html\" rel=\"nofollow noopener\" target=\"_blank\">「「WSL 2」最大の課題であった“localhost”問題が解決 ～「Windows 10」Build 18945」</a></p>\n\n<h1>\n<span id=\"確認方法1-ipコマンドを使う\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%951-ip%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>確認方法1: ipコマンドを使う</h1>\n\n<p>Ubuntu上で<code>ip a</code>コマンドを実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ ip a\n1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: bond0: &lt;BROADCAST,MULTICAST,MASTER&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 0e:35:94:f5:06:c9 brd ff:ff:ff:ff:ff:ff\n3: dummy0: &lt;BROADCAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether a6:87:9b:57:13:5f brd ff:ff:ff:ff:ff:ff\n4: sit0@NONE: &lt;NOARP&gt; mtu 1480 qdisc noop state DOWN group default qlen 1000\n    link/sit 0.0.0.0 brd 0.0.0.0\n5: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:06:d3:8a brd ff:ff:ff:ff:ff:ff\n    inet 172.18.14.158/20 brd 172.18.15.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe06:d38a/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre></div></div>\n\n<p>実行結果のうち、<code>eth0</code>のinetが取得したいWSL2のIPアドレスになります。上記であれば<code>172.18.14.158</code>が対象のIPアドレスです。</p>\n\n<p><code>eth0</code>のみを決め打ちで取得したいのであれば<code>ip a show dev eth0</code>とすることもできます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ ip a show dev eth0\n5: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:06:d3:8a brd ff:ff:ff:ff:ff:ff\n    inet 172.18.14.158/20 brd 172.18.15.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe06:d38a/64 scope link\n       valid_lft forever preferred_lft forever\n</code></pre></div></div>\n\n<h1>\n<span id=\"確認方法2-hostnameコマンドを使う\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%952-hostname%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>確認方法2: hostnameコマンドを使う</h1>\n\n<p>ipコマンドを利用すると、たくさんの情報が出力されてしまうので、スクリプトでIPアドレスを取り出す場合などはやや不便です。こういう場合は<code>hostname -I</code>を利用するとよいでしょう。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ hostname -I\n172.18.14.158\n</code></pre></div></div>\n\n<p>対象のIPアドレスだけが取得できていることがわかります。ただし<code>hostname</code>コマンドにはあぶなかっしい側面もあるので、注意して使いましょう。</p>\n\n<p>参考記事: <a href=\"https://qiita.com/satton6987/items/f50ad3df302290d1f544\" id=\"reference-32e06631406243bc74a1\">【Linux】インフラエンジニアの僕が「hostname」コマンドを使わない理由とは？</a></p>\n\n<h1>\n<span id=\"ホスト側からipアドレスを取得したい\" class=\"fragment\"></span><a href=\"#%E3%83%9B%E3%82%B9%E3%83%88%E5%81%B4%E3%81%8B%E3%82%89ip%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E3%81%84\"><i class=\"fa fa-link\"></i></a>ホスト側からIPアドレスを取得したい</h1>\n\n<p>確認方法1、確認方法2は両方ともUbuntuのコンソールにコマンドを打ち込む想定でしたが、ホスト側のcmdやPowerShellからWSL2側のIPアドレスを取得したい場合は、<code>wsl -e</code>コマンドを利用するとよいでしょう。<code>-e</code>オプションは指定したコマンドをWSL2上で実行します。たとえば、確認方法2であれば以下のようになるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>C:\\&gt; wsl -e hostname -I\n172.18.14.158\n</code></pre></div></div>\n\n<h1>\n<span id=\"注意点\" class=\"fragment\"></span><a href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\"><i class=\"fa fa-link\"></i></a>注意点</h1>\n\n<p>ここで取得できたIPアドレスは固定ではないため、Ubuntuを起動するたびに変わる可能性があります。</p>\n\n<h1>\n<span id=\"環境情報\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>環境情報</h1>\n\n<ul>\n<li>Microsoft Windows [Version 10.0.19041.388]</li>\n<li>Ubuntu 20.04 LTS</li>\n</ul>\n","body":"WSL2では、インストールしたUbuntuが仮想マシンとして稼働し、ホストとは別のIPアドレスを有します。そのため、ホスト(Windows)からWSL2(Ubuntu)で動くソフトウェアをつつく際、WSL2のIPアドレスを指定する必要がある場合があります。\n\nでは、WSL2のIPアドレスはどのように確認すればよいでしょうか?\n\nなお、以下記事のように`.wslconfig`を設定してやると、WSL2上で稼働するソフトウェアに`localhost`でアクセスできるようになるのですが、少なくとも自分の環境では、`.wslconfig`がなぜかうまく動かなかったり、ホスト側のソフトウェアが`localhost`をうまく解決できなかったりする場合があります。本記事はそういうケースで役に立つ想定です。\n\n[「「WSL 2」最大の課題であった“localhost”問題が解決 ～「Windows 10」Build 18945」](https://forest.watch.impress.co.jp/docs/news/1198651.html)\n\n# 確認方法1: ipコマンドを使う\n\nUbuntu上で`ip a`コマンドを実行します。\n\n```\n$ ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n    inet6 ::1/128 scope host\n       valid_lft forever preferred_lft forever\n2: bond0: <BROADCAST,MULTICAST,MASTER> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether 0e:35:94:f5:06:c9 brd ff:ff:ff:ff:ff:ff\n3: dummy0: <BROADCAST,NOARP> mtu 1500 qdisc noop state DOWN group default qlen 1000\n    link/ether a6:87:9b:57:13:5f brd ff:ff:ff:ff:ff:ff\n4: sit0@NONE: <NOARP> mtu 1480 qdisc noop state DOWN group default qlen 1000\n    link/sit 0.0.0.0 brd 0.0.0.0\n5: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:06:d3:8a brd ff:ff:ff:ff:ff:ff\n    inet 172.18.14.158/20 brd 172.18.15.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe06:d38a/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n実行結果のうち、`eth0`のinetが取得したいWSL2のIPアドレスになります。上記であれば`172.18.14.158`が対象のIPアドレスです。\n\n`eth0`のみを決め打ちで取得したいのであれば`ip a show dev eth0`とすることもできます。\n\n```\n$ ip a show dev eth0\n5: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n    link/ether 00:15:5d:06:d3:8a brd ff:ff:ff:ff:ff:ff\n    inet 172.18.14.158/20 brd 172.18.15.255 scope global eth0\n       valid_lft forever preferred_lft forever\n    inet6 fe80::215:5dff:fe06:d38a/64 scope link\n       valid_lft forever preferred_lft forever\n```\n\n# 確認方法2: hostnameコマンドを使う\n\nipコマンドを利用すると、たくさんの情報が出力されてしまうので、スクリプトでIPアドレスを取り出す場合などはやや不便です。こういう場合は`hostname -I`を利用するとよいでしょう。\n\n```\n$ hostname -I\n172.18.14.158\n```\n\n対象のIPアドレスだけが取得できていることがわかります。ただし`hostname`コマンドにはあぶなかっしい側面もあるので、注意して使いましょう。\n\n参考記事: [【Linux】インフラエンジニアの僕が「hostname」コマンドを使わない理由とは？](https://qiita.com/satton6987/items/f50ad3df302290d1f544)\n\n# ホスト側からIPアドレスを取得したい\n\n確認方法1、確認方法2は両方ともUbuntuのコンソールにコマンドを打ち込む想定でしたが、ホスト側のcmdやPowerShellからWSL2側のIPアドレスを取得したい場合は、`wsl -e`コマンドを利用するとよいでしょう。`-e`オプションは指定したコマンドをWSL2上で実行します。たとえば、確認方法2であれば以下のようになるはずです。\n\n```\nC:\\> wsl -e hostname -I\n172.18.14.158\n```\n\n\n# 注意点\n\nここで取得できたIPアドレスは固定ではないため、Ubuntuを起動するたびに変わる可能性があります。\n\n# 環境情報\n\n- Microsoft Windows [Version 10.0.19041.388]\n- Ubuntu 20.04 LTS\n","coediting":false,"comments_count":2,"created_at":"2020-08-12T16:55:55+09:00","group":null,"id":"25b797cb436078b9e832","likes_count":19,"private":false,"reactions_count":0,"tags":[{"name":"WSL2","versions":[]}],"title":"WSL2/UbuntuのIPアドレスを取得したい","updated_at":"2020-08-12T16:57:00+09:00","url":"https://qiita.com/neko_the_shadow/items/25b797cb436078b9e832","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":191,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}