{"rendered_body":"<p>サーバ上のgzの中身を確認する必要があるにも関わらず、手元のへっぽこWindows7 PCには7zipのようなgzに対応したソフトウェアがインストールされていない。サーバ上で解凍すると、元ファイルが巨大すぎて、手元のPCに持ってこれない恐れがある。手元で使えそうなものはJavaとEclipseだけ--ということで、Javaでgzファイルを解凍するという機会がありましたので、そのサンプルコードをQiitaに供養しておきたいと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.OutputStream</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.UncheckedIOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Files</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Path</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.zip.GZIPInputStream</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">GZIPUtils</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">unzip</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">src</span><span class=\"o\">,</span> <span class=\"nc\">Path</span> <span class=\"n\">dst</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">GZIPInputStream</span> <span class=\"n\">in</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">GZIPInputStream</span><span class=\"o\">(</span><span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">newInputStream</span><span class=\"o\">(</span><span class=\"n\">src</span><span class=\"o\">));</span>\n             <span class=\"nc\">OutputStream</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">newOutputStream</span><span class=\"o\">(</span><span class=\"n\">dst</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">len</span><span class=\"o\">;</span>\n            <span class=\"kt\">byte</span><span class=\"o\">[]</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">byte</span><span class=\"o\">[</span><span class=\"mi\">1024</span> <span class=\"o\">*</span> <span class=\"mi\">4</span><span class=\"o\">];</span>\n            <span class=\"k\">while</span> <span class=\"o\">((</span><span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">in</span><span class=\"o\">.</span><span class=\"na\">read</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">!=</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">write</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">len</span><span class=\"o\">);</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UncheckedIOException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>稼働確認をしてみましょう。まず適当なテキストファイルを作成します。ここでは1MB, 10MB, 100MBのファイルを作るとして、名前をそれぞれ001mb.txt, 010mb.txt, 100mb.txtとしておきましょう。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ cat /dev/urandom | tr -cd [:print:] | head -c 1m   &gt; 001mb.txt\n$ cat /dev/urandom | tr -cd [:print:] | head -c 10m  &gt; 010mb.txt\n$ cat /dev/urandom | tr -cd [:print:] | head -c 100m &gt; 100mb.txt\n</code></pre></div></div>\n\n<p>この3つのファイルについて、メッセージダイジェストを取得しておき、正しく解凍できているかどうかの検証に使うことにします。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ sha256sum *.txt\nf2cddb9f0bb64033f7a9d8979a47d925af06271b2e7d79b99bd9e41ad504616d  001mb.txt\n0282119ac4c00a1c14370b65e72f3283d988264fb3240f46b679ada117db3979  010mb.txt\n1104a28dd5a4033c5dd495289b590526b60c1f285357dd26af53ed0f5c4898c0  100mb.txt\n</code></pre></div></div>\n\n<p>メッセージダイジェストも取得できたということで、この3つのファイルをGZIP形式で圧縮します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ gzip *.txt\n$ ls -lh *.gz\n-rwxrwxrwx 1 dev dev 852K Nov  7 20:33 001mb.txt.gz\n-rwxrwxrwx 1 dev dev 8.4M Nov  7 20:33 010mb.txt.gz\n-rwxrwxrwx 1 dev dev  84M Nov  7 20:34 100mb.txt.gz\n</code></pre></div></div>\n\n<p>ここで圧縮したファイルを自作のJavaプログラムで解凍してみます。以下の<code>Main.java</code>は<code>GZIPUtils::unzip</code>を利用して001mb.txt.gz, 010mb.txt.gz, 100mb.txt.gzをそれぞれunzipped_001mb.txt, unzipped_010mb.txt, unzipped_100mb.txtという名前に解凍します。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Paths</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">GZIPUtils</span><span class=\"o\">.</span><span class=\"na\">unzip</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"001mb.txt.gz\"</span><span class=\"o\">),</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"unzipped_001mb.txt\"</span><span class=\"o\">));</span>\n        <span class=\"nc\">GZIPUtils</span><span class=\"o\">.</span><span class=\"na\">unzip</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"010mb.txt.gz\"</span><span class=\"o\">),</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"unzipped_010mb.txt\"</span><span class=\"o\">));</span>\n        <span class=\"nc\">GZIPUtils</span><span class=\"o\">.</span><span class=\"na\">unzip</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"100mb.txt.gz\"</span><span class=\"o\">),</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"unzipped_100mb.txt\"</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>あとは<code>Main.java</code>をコンパイルしたあとに実行、その実行結果を確認すると、想定通りunzipped_001mb.txt, unzipped_010mb.txt, unzipped_100mb.txtという3つのファイルが作成されていることがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ javac Main.java GZIPUtils.java\n$ java -cp . Main\n$ ls -hl unzipped*\n-rwxrwxrwx 1 dev dev 1.0M Nov  7 23:09 unzipped_001mb.txt\n-rwxrwxrwx 1 dev dev  10M Nov  7 23:09 unzipped_010mb.txt\n-rwxrwxrwx 1 dev dev 100M Nov  7 23:09 unzipped_100mb.txt\n</code></pre></div></div>\n\n<p>この3つのファイルについてメッセージダイジェストを確認すると、圧縮前のtxtファイルと全く同じことがわかります。つまり<code>GZIPUtils::unzip</code>は想定通り動作していると考えられます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ sha256sum unzipped*\nf2cddb9f0bb64033f7a9d8979a47d925af06271b2e7d79b99bd9e41ad504616d  unzipped_001mb.txt\n0282119ac4c00a1c14370b65e72f3283d988264fb3240f46b679ada117db3979  unzipped_010mb.txt\n1104a28dd5a4033c5dd495289b590526b60c1f285357dd26af53ed0f5c4898c0  unzipped_100mb.txt\n</code></pre></div></div>\n","body":"サーバ上のgzの中身を確認する必要があるにも関わらず、手元のへっぽこWindows7 PCには7zipのようなgzに対応したソフトウェアがインストールされていない。サーバ上で解凍すると、元ファイルが巨大すぎて、手元のPCに持ってこれない恐れがある。手元で使えそうなものはJavaとEclipseだけ--ということで、Javaでgzファイルを解凍するという機会がありましたので、そのサンプルコードをQiitaに供養しておきたいと思います。\n\n```java\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.UncheckedIOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.zip.GZIPInputStream;\n\npublic class GZIPUtils {\n    public static void unzip(Path src, Path dst) {\n        try (GZIPInputStream in = new GZIPInputStream(Files.newInputStream(src));\n             OutputStream out = Files.newOutputStream(dst)) {\n            int len;\n            byte[] b = new byte[1024 * 4];\n            while ((len = in.read(b)) != -1) {\n                out.write(b, 0, len);\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}\n```\n\n稼働確認をしてみましょう。まず適当なテキストファイルを作成します。ここでは1MB, 10MB, 100MBのファイルを作るとして、名前をそれぞれ001mb.txt, 010mb.txt, 100mb.txtとしておきましょう。\n\n```\n$ cat /dev/urandom | tr -cd [:print:] | head -c 1m   > 001mb.txt\n$ cat /dev/urandom | tr -cd [:print:] | head -c 10m  > 010mb.txt\n$ cat /dev/urandom | tr -cd [:print:] | head -c 100m > 100mb.txt\n```\n\nこの3つのファイルについて、メッセージダイジェストを取得しておき、正しく解凍できているかどうかの検証に使うことにします。\n\n```\n$ sha256sum *.txt\nf2cddb9f0bb64033f7a9d8979a47d925af06271b2e7d79b99bd9e41ad504616d  001mb.txt\n0282119ac4c00a1c14370b65e72f3283d988264fb3240f46b679ada117db3979  010mb.txt\n1104a28dd5a4033c5dd495289b590526b60c1f285357dd26af53ed0f5c4898c0  100mb.txt\n```\n\nメッセージダイジェストも取得できたということで、この3つのファイルをGZIP形式で圧縮します。\n\n```\n$ gzip *.txt\n$ ls -lh *.gz\n-rwxrwxrwx 1 dev dev 852K Nov  7 20:33 001mb.txt.gz\n-rwxrwxrwx 1 dev dev 8.4M Nov  7 20:33 010mb.txt.gz\n-rwxrwxrwx 1 dev dev  84M Nov  7 20:34 100mb.txt.gz\n```\n\nここで圧縮したファイルを自作のJavaプログラムで解凍してみます。以下の`Main.java`は`GZIPUtils::unzip`を利用して001mb.txt.gz, 010mb.txt.gz, 100mb.txt.gzをそれぞれunzipped_001mb.txt, unzipped_010mb.txt, unzipped_100mb.txtという名前に解凍します。\n\n```java:Main.java\nimport java.nio.file.Paths;\n\npublic class Main {\n    public static void main(String[] args) {\n        GZIPUtils.unzip(Paths.get(\"001mb.txt.gz\"), Paths.get(\"unzipped_001mb.txt\"));\n        GZIPUtils.unzip(Paths.get(\"010mb.txt.gz\"), Paths.get(\"unzipped_010mb.txt\"));\n        GZIPUtils.unzip(Paths.get(\"100mb.txt.gz\"), Paths.get(\"unzipped_100mb.txt\"));\n    }\n}\n```\n\nあとは`Main.java`をコンパイルしたあとに実行、その実行結果を確認すると、想定通りunzipped_001mb.txt, unzipped_010mb.txt, unzipped_100mb.txtという3つのファイルが作成されていることがわかります。\n\n```\n$ javac Main.java GZIPUtils.java\n$ java -cp . Main\n$ ls -hl unzipped*\n-rwxrwxrwx 1 dev dev 1.0M Nov  7 23:09 unzipped_001mb.txt\n-rwxrwxrwx 1 dev dev  10M Nov  7 23:09 unzipped_010mb.txt\n-rwxrwxrwx 1 dev dev 100M Nov  7 23:09 unzipped_100mb.txt\n```\n\nこの3つのファイルについてメッセージダイジェストを確認すると、圧縮前のtxtファイルと全く同じことがわかります。つまり`GZIPUtils::unzip`は想定通り動作していると考えられます。\n\n```\n$ sha256sum unzipped*\nf2cddb9f0bb64033f7a9d8979a47d925af06271b2e7d79b99bd9e41ad504616d  unzipped_001mb.txt\n0282119ac4c00a1c14370b65e72f3283d988264fb3240f46b679ada117db3979  unzipped_010mb.txt\n1104a28dd5a4033c5dd495289b590526b60c1f285357dd26af53ed0f5c4898c0  unzipped_100mb.txt\n```\n","coediting":false,"comments_count":0,"created_at":"2019-11-07T23:30:23+09:00","group":null,"id":"dd4ce3f71388771c2bb7","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"Javaでgzファイルを解凍するサンプル","updated_at":"2019-11-07T23:31:00+09:00","url":"https://qiita.com/neko_the_shadow/items/dd4ce3f71388771c2bb7","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":188,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}