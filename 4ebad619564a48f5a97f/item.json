{"rendered_body":"<p>たまに自分で使うので、Qiitaに投稿しておきます(´・ω・`)</p>\n\n<p><code>primes(x)</code>は<code>x</code>未満の素数をリストに格納するメソッドです。アルゴリズムとしては定番の「エラトステネスのふるい」を利用しています。<code>filter</code>等を利用していない点が工夫といえると思います。</p>\n\n<p>次に<code>is_prime(x)</code>は整数<code>x</code>が素数かどうかを判定するメソッドです。アルゴリズムはやはり定番の「ためし割り」。ただし疑似素数(2でも3でも5でも割り切れない数字)を利用することで、効率化を図っています。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"c1\"># 0以上整数x「未満」の素数をリストに格納して返す\n</span><span class=\"k\">def</span> <span class=\"nf\">primes</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"n\">primes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span>\n    <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"c1\"># 1は素数ではない\n</span>\n    <span class=\"c1\"># エラトステネスのふるい\n</span>    <span class=\"k\">for</span> <span class=\"n\">prime</span> <span class=\"ow\">in</span> <span class=\"n\">primes</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">prime</span> <span class=\"o\">&gt;</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span> <span class=\"k\">break</span>\n        <span class=\"k\">if</span> <span class=\"n\">prime</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"k\">for</span> <span class=\"n\">non_prime</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">prime</span><span class=\"p\">):</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"n\">non_prime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">prime</span> <span class=\"k\">for</span> <span class=\"n\">prime</span> <span class=\"ow\">in</span> <span class=\"n\">primes</span> <span class=\"k\">if</span> <span class=\"n\">prime</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># 整数xが素数かどうかを判定する\n</span><span class=\"k\">def</span> <span class=\"nf\">is_prime</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">False</span> <span class=\"c1\"># 2未満に素数はない\n</span>    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"ow\">or</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"ow\">or</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">True</span> <span class=\"c1\"># 2,3,5は素数\n</span>    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">False</span> <span class=\"c1\"># 2,3,5の倍数は合成数\n</span>\n    <span class=\"c1\"># ためし割り: 疑似素数(2でも3でも5でも割り切れない数字)で次々に割っていく\n</span>    <span class=\"n\">prime</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n    <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n    <span class=\"k\">while</span> <span class=\"n\">prime</span> <span class=\"o\">&lt;=</span> <span class=\"n\">math</span><span class=\"p\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">prime</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n        <span class=\"n\">prime</span> <span class=\"o\">+=</span> <span class=\"n\">step</span>\n        <span class=\"n\">step</span> <span class=\"o\">=</span> <span class=\"mi\">6</span> <span class=\"o\">-</span> <span class=\"n\">step</span>\n\n    <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">primes</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">))</span> <span class=\"c1\">#=&gt; [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n</span>\n    <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">is_prime</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)]</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"c1\">#=&gt; [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n</span>\n</pre></div></div>\n","body":"たまに自分で使うので、Qiitaに投稿しておきます(´・ω・`)\n\n`primes(x)`は`x`未満の素数をリストに格納するメソッドです。アルゴリズムとしては定番の「エラトステネスのふるい」を利用しています。`filter`等を利用していない点が工夫といえると思います。\n\n次に`is_prime(x)`は整数`x`が素数かどうかを判定するメソッドです。アルゴリズムはやはり定番の「ためし割り」。ただし疑似素数(2でも3でも5でも割り切れない数字)を利用することで、効率化を図っています。\n\n```py3\n\nimport math\n\n# 0以上整数x「未満」の素数をリストに格納して返す\ndef primes(x):\n    if x < 2: return []\n\n    primes = [i for i in range(x)]\n    primes[1] = 0 # 1は素数ではない\n\n    # エラトステネスのふるい\n    for prime in primes:\n        if prime > math.sqrt(x): break\n        if prime == 0: continue\n        for non_prime in range(2 * prime, x, prime): primes[non_prime] = 0\n    \n    return [prime for prime in primes if prime != 0]\n\n\n# 整数xが素数かどうかを判定する\ndef is_prime(x):\n    if x < 2: return False # 2未満に素数はない\n    if x == 2 or x == 3 or x == 5: return True # 2,3,5は素数\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0: return False # 2,3,5の倍数は合成数\n\n    # ためし割り: 疑似素数(2でも3でも5でも割り切れない数字)で次々に割っていく\n    prime = 7\n    step = 4\n    while prime <= math.sqrt(x):\n        if x % prime == 0: return False\n\n        prime += step\n        step = 6 - step\n    \n    return True\n\n\nif __name__ == '__main__':\n    print(primes(30)) #=> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    ls = [x for x in range(30) if is_prime(x)]\n    print(ls) #=> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n```\n","coediting":false,"comments_count":1,"created_at":"2016-07-25T22:49:41+09:00","group":null,"id":"4ebad619564a48f5a97f","likes_count":15,"private":false,"reactions_count":0,"tags":[{"name":"Python","versions":[]},{"name":"Python3","versions":[]}],"title":"Pythonで素数列挙と素数判定","updated_at":"2016-07-26T00:55:43+09:00","url":"https://qiita.com/neko_the_shadow/items/4ebad619564a48f5a97f","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":165,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}