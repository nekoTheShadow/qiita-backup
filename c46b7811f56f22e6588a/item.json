{"rendered_body":"<p>しがないSIerのシステムエンジニアとして日銭を稼ぐ毎日を送っているのですが、「作成したJavaクラスをパッケージ名を付与して一覧化する」という設計書(?)を作る機会がここ最近ありました。作ったJavaクラスの数からいって手作業はめんどくさいというか無謀な話。そこで「<strong>パッケージを再帰的に探索して、パッケージ名を付与したクラス一覧を出力する</strong>」プログラムを書くことにしました。以下はそのサンプルです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/19234611afcc5896e7b78a1beeaa6158f56fa63a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353835392f38326563616531632d393863362d623266312d363532372d3263633937663963393164392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2F82ecae1c-98c6-b2f1-6527-2cc97f9c91d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=959fade0a302baf51d2274489cff8a5b\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105859/82ecae1c-98c6-b2f1-6527-2cc97f9c91d9.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2F82ecae1c-98c6-b2f1-6527-2cc97f9c91d9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=07607ccdbd80619ccd2de3b0a92a36ef 1x\" loading=\"lazy\"></a></p>\n\n<p>たとえば上記のようなパッケージ構造のプロジェクトがあったとして、\"jp.co\"配下に属するクラスをパッケージ名付きで出力するプログラムは次のようになるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">java.io.File</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.net.URISyntaxException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.net.URL</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.FileVisitResult</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Files</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Path</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Paths</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.SimpleFileVisitor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.attribute.BasicFileAttributes</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Enumeration</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.PriorityQueue</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">PACKAGE_SEPARATOR</span> <span class=\"o\">=</span> <span class=\"s\">\".\"</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"nc\">String</span> <span class=\"no\">CLASS_SUFFIX</span> <span class=\"o\">=</span> <span class=\"s\">\".class\"</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span><span class=\"o\">,</span> <span class=\"nc\">URISyntaxException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// クラスローダを利用して、パッケージ配下のリソースを取得する。</span>\n        <span class=\"nc\">String</span> <span class=\"n\">rootPackageName</span> <span class=\"o\">=</span> <span class=\"s\">\"jp.co\"</span><span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"no\">PACKAGE_SEPARATOR</span><span class=\"o\">,</span> <span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">separator</span><span class=\"o\">);</span>\n        <span class=\"nc\">ClassLoader</span> <span class=\"n\">classLoader</span> <span class=\"o\">=</span> <span class=\"nc\">ClassLoader</span><span class=\"o\">.</span><span class=\"na\">getSystemClassLoader</span><span class=\"o\">();</span>\n        <span class=\"nc\">Enumeration</span><span class=\"o\">&lt;</span><span class=\"no\">URL</span><span class=\"o\">&gt;</span> <span class=\"n\">rootUrls</span> <span class=\"o\">=</span> <span class=\"n\">classLoader</span><span class=\"o\">.</span><span class=\"na\">getResources</span><span class=\"o\">(</span><span class=\"n\">rootPackageName</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// ディレクトリを再帰的に探索して、\".class\"で終わるファイルを見つけた場合は</span>\n        <span class=\"c1\">// 文字列を整形したのちにリストへ格納しておく。</span>\n        <span class=\"nc\">PriorityQueue</span><span class=\"o\">&lt;</span><span class=\"nc\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">classNames</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">PriorityQueue</span><span class=\"o\">();</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">rootUrls</span><span class=\"o\">.</span><span class=\"na\">hasMoreElements</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"no\">URL</span> <span class=\"n\">rootUrl</span> <span class=\"o\">=</span> <span class=\"n\">rootUrls</span><span class=\"o\">.</span><span class=\"na\">nextElement</span><span class=\"o\">();</span>\n            <span class=\"nc\">Path</span> <span class=\"n\">rootPath</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">rootUrl</span><span class=\"o\">.</span><span class=\"na\">toURI</span><span class=\"o\">());</span>\n\n            <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">walkFileTree</span><span class=\"o\">(</span><span class=\"n\">rootPath</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">SimpleFileVisitor</span><span class=\"o\">&lt;</span><span class=\"nc\">Path</span><span class=\"o\">&gt;(){</span>\n                <span class=\"nd\">@Override</span>\n                <span class=\"kd\">public</span> <span class=\"nc\">FileVisitResult</span> <span class=\"nf\">visitFile</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"nc\">BasicFileAttributes</span> <span class=\"n\">attrs</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">String</span> <span class=\"n\">pathName</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n                    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">pathName</span><span class=\"o\">.</span><span class=\"na\">endsWith</span><span class=\"o\">(</span><span class=\"no\">CLASS_SUFFIX</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">beginIndex</span> <span class=\"o\">=</span> <span class=\"n\">pathName</span><span class=\"o\">.</span><span class=\"na\">lastIndexOf</span><span class=\"o\">(</span><span class=\"n\">rootPackageName</span><span class=\"o\">);</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">endIndex</span> <span class=\"o\">=</span> <span class=\"n\">pathName</span><span class=\"o\">.</span><span class=\"na\">lastIndexOf</span><span class=\"o\">(</span><span class=\"no\">CLASS_SUFFIX</span><span class=\"o\">);</span>\n                        <span class=\"nc\">String</span> <span class=\"n\">className</span> <span class=\"o\">=</span> <span class=\"n\">pathName</span><span class=\"o\">.</span><span class=\"na\">substring</span><span class=\"o\">(</span><span class=\"n\">beginIndex</span><span class=\"o\">,</span> <span class=\"n\">endIndex</span><span class=\"o\">)</span>\n                                                   <span class=\"o\">.</span><span class=\"na\">replace</span><span class=\"o\">(</span><span class=\"nc\">File</span><span class=\"o\">.</span><span class=\"na\">separator</span><span class=\"o\">,</span> <span class=\"no\">PACKAGE_SEPARATOR</span><span class=\"o\">);</span>\n\n                        <span class=\"n\">classNames</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"n\">className</span><span class=\"o\">);</span>\n                    <span class=\"o\">}</span>\n\n                    <span class=\"k\">return</span> <span class=\"kd\">super</span><span class=\"o\">.</span><span class=\"na\">visitFile</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">attrs</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">});</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"c1\">// 見つけ出したクラス名の一覧を出力する。</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">className</span> <span class=\"o\">:</span> <span class=\"n\">classNames</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">className</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"cm\">/*\n        jp.co.first.ClassA\n        jp.co.first.ClassB\n        jp.co.first.sub.ClassC\n        jp.co.first.sub.ClassD\n        jp.co.second.ClassE\n        jp.co.second.ClassF\n        */</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n</code></pre></div></div>\n","body":"\nしがないSIerのシステムエンジニアとして日銭を稼ぐ毎日を送っているのですが、「作成したJavaクラスをパッケージ名を付与して一覧化する」という設計書(?)を作る機会がここ最近ありました。作ったJavaクラスの数からいって手作業はめんどくさいというか無謀な話。そこで「__パッケージを再帰的に探索して、パッケージ名を付与したクラス一覧を出力する__」プログラムを書くことにしました。以下はそのサンプルです。\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/105859/82ecae1c-98c6-b2f1-6527-2cc97f9c91d9.png)\n\nたとえば上記のようなパッケージ構造のプロジェクトがあったとして、\"jp.co\"配下に属するクラスをパッケージ名付きで出力するプログラムは次のようになるはずです。\n\n```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.SimpleFileVisitor;\nimport java.nio.file.attribute.BasicFileAttributes;\nimport java.util.Enumeration;\nimport java.util.PriorityQueue;\n\npublic class Main {\n    \n    private static final String PACKAGE_SEPARATOR = \".\";\n    \n    private static final String CLASS_SUFFIX = \".class\";\n    \n    public static void main(String[] args) throws IOException, URISyntaxException {\n        // クラスローダを利用して、パッケージ配下のリソースを取得する。\n        String rootPackageName = \"jp.co\".replace(PACKAGE_SEPARATOR, File.separator);\n        ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n        Enumeration<URL> rootUrls = classLoader.getResources(rootPackageName);\n        \n        // ディレクトリを再帰的に探索して、\".class\"で終わるファイルを見つけた場合は\n        // 文字列を整形したのちにリストへ格納しておく。\n        PriorityQueue<String> classNames = new PriorityQueue();\n        while (rootUrls.hasMoreElements()) {\n            URL rootUrl = rootUrls.nextElement();\n            Path rootPath = Paths.get(rootUrl.toURI());\n           \n            Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>(){\n                @Override\n                public FileVisitResult visitFile(Path path, BasicFileAttributes attrs) throws IOException {\n                    String pathName = path.toString();\n                    if (pathName.endsWith(CLASS_SUFFIX)) {\n                        int beginIndex = pathName.lastIndexOf(rootPackageName);\n                        int endIndex = pathName.lastIndexOf(CLASS_SUFFIX);\n                        String className = pathName.substring(beginIndex, endIndex)\n                                                   .replace(File.separator, PACKAGE_SEPARATOR);\n                        \n                        classNames.add(className);\n                    }\n                    \n                    return super.visitFile(path, attrs);\n                }\n            });\n        }\n        \n        // 見つけ出したクラス名の一覧を出力する。\n        for (String className : classNames) {\n            System.out.println(className);\n        }\n        \n        /*\n        jp.co.first.ClassA\n        jp.co.first.ClassB\n        jp.co.first.sub.ClassC\n        jp.co.first.sub.ClassD\n        jp.co.second.ClassE\n        jp.co.second.ClassF\n        */\n    }\n}\n\n```\n","coediting":false,"comments_count":0,"created_at":"2017-02-26T01:33:56+09:00","group":null,"id":"c46b7811f56f22e6588a","likes_count":2,"private":false,"reactions_count":0,"stocks_count":5,"tags":[{"name":"Java","versions":[]}],"title":"パッケージ配下のクラス一覧を再帰的に探索したい","updated_at":"2017-02-26T01:33:56+09:00","url":"https://qiita.com/neko_the_shadow/items/c46b7811f56f22e6588a","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":8090,"team_membership":null,"organization_url_name":null}