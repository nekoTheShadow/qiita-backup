{"rendered_body":"<p>残業続きでとても眠いので、ごく簡単に済ませたいと思います。誤字脱字は許してね(´・ω・`) </p>\n\n<p>やりたいことはタイトルの通り。MyBatis-Springではトランザクション管理をMyBatis-Springに一任します。つまりプログラマはコミットやロールバックなどを明示的に呼び出す必要はないのですが……とはいえトランザクション管理をプログラム的に行いたい場面があるのも事実です。</p>\n\n<p>まずトランザクション管理について、Springの設定用xmlに次のようなbean定義がなされているとします。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><span class=\"nt\">&lt;bean</span> <span class=\"na\">id=</span><span class=\"s\">\"transactionManager\"</span>\n           <span class=\"na\">class=</span><span class=\"s\">\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;property</span> <span class=\"na\">name=</span><span class=\"s\">\"dataSource\"</span> <span class=\"na\">ref=</span><span class=\"s\">\"dataSource\"</span> <span class=\"nt\">/&gt;</span>\n<span class=\"nt\">&lt;/bean&gt;</span>\n</pre></div></div>\n\n<p>次にMybatisについて、Mapperインターフェイスが次のように存在するとします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">interface</span> <span class=\"nc\">Dao</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Insert</span><span class=\"o\">(</span><span class=\"s\">\"INSERT INTO user VALUES(#{userid}, #{name})\"</span><span class=\"o\">)</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">insertUser</span><span class=\"o\">(</span><span class=\"nd\">@Param</span><span class=\"o\">(</span><span class=\"s\">\"userid\"</span><span class=\"o\">)</span> <span class=\"nc\">Stringuserid</span><span class=\"o\">,</span> <span class=\"nd\">@Param</span><span class=\"o\">(</span><span class=\"s\">\"name\"</span><span class=\"o\">)</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n\n    <span class=\"nd\">@Update</span><span class=\"o\">(</span><span class=\"s\">\"UPDATE user SET name = #{name} WHERE userid = #{userid}\"</span><span class=\"o\">)</span>\n    <span class=\"kt\">int</span> <span class=\"nf\">updateUser</span><span class=\"o\">(</span><span class=\"nd\">@Param</span><span class=\"o\">(</span><span class=\"s\">\"userid\"</span><span class=\"o\">)</span> <span class=\"nc\">String</span> <span class=\"n\">userid</span><span class=\"o\">,</span> <span class=\"nd\">@Param</span><span class=\"o\">(</span><span class=\"s\">\"name\"</span><span class=\"o\">)</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n</pre></div></div>\n\n<p>さてMyBatis-Springにおいて、明示的にトランザクション管理を行う場合は<code>TransactionManager</code>を利用します。具体的には以下の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Service</span> <span class=\"o\">{</span>\n\n    <span class=\"nd\">@Autowired</span> <span class=\"nc\">Dao</span> <span class=\"n\">dao</span><span class=\"o\">;</span>\n    <span class=\"nd\">@Autowired</span> <span class=\"nc\">PlatformTransactionManager</span> <span class=\"n\">txManager</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">sample</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">userid</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"c1\">// トランザクション管理の開始</span>\n        <span class=\"nc\">DefaultTransactionDefinition</span> <span class=\"n\">txDefinition</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">DefaultTransactionDefinition</span><span class=\"o\">();</span>\n        <span class=\"n\">txDefinition</span><span class=\"o\">.</span><span class=\"na\">setPropagationBehavior</span><span class=\"o\">(</span><span class=\"nc\">TransactionDefinition</span><span class=\"o\">.</span><span class=\"na\">PROPAGATION_REQUIRED</span><span class=\"o\">);</span>\n        <span class=\"nc\">TransactionStatus</span> <span class=\"n\">txStatus</span> <span class=\"o\">=</span> <span class=\"n\">txManager</span><span class=\"o\">.</span><span class=\"na\">getTransaction</span><span class=\"o\">(</span><span class=\"n\">txDefinition</span><span class=\"o\">);</span>\n\n\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// DBに対するアクセスを実行</span>\n            <span class=\"n\">dao</span><span class=\"o\">.</span><span class=\"na\">insertUser</span><span class=\"o\">(</span><span class=\"n\">userid</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n            <span class=\"n\">dao</span><span class=\"o\">.</span><span class=\"na\">updateUser</span><span class=\"o\">(</span><span class=\"n\">userid</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n\n            <span class=\"c1\">// DBへのアクセスが問題なく終了した場合は処理を確定させる</span>\n            <span class=\"n\">txManager</span><span class=\"o\">.</span><span class=\"na\">commit</span><span class=\"o\">(</span><span class=\"n\">txStatus</span><span class=\"o\">);</span>\n\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">Exception</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n            <span class=\"c1\">// 何らかの事情で更新処理に失敗した場合は処理をロールバックする</span>\n            <span class=\"n\">txManager</span><span class=\"o\">.</span><span class=\"na\">rollback</span><span class=\"o\">(</span><span class=\"n\">txStatus</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>   \n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>簡単ですね(´・ω・`)</p>\n","body":"\n残業続きでとても眠いので、ごく簡単に済ませたいと思います。誤字脱字は許してね(´・ω・`) \n\nやりたいことはタイトルの通り。MyBatis-Springではトランザクション管理をMyBatis-Springに一任します。つまりプログラマはコミットやロールバックなどを明示的に呼び出す必要はないのですが……とはいえトランザクション管理をプログラム的に行いたい場面があるのも事実です。\n\nまずトランザクション管理について、Springの設定用xmlに次のようなbean定義がなされているとします。\n\n```xml\n<bean id=\"transactionManager\"\n           class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\">\n  <property name=\"dataSource\" ref=\"dataSource\" />\n</bean>\n```\n次にMybatisについて、Mapperインターフェイスが次のように存在するとします。\n\n```java\npublic interface Dao {\n\n\t@Insert(\"INSERT INTO user VALUES(#{userid}, #{name})\")\n\tint insertUser(@Param(\"userid\") Stringuserid, @Param(\"name\") String name)\n\n\t@Update(\"UPDATE user SET name = #{name} WHERE userid = #{userid}\")\n\tint updateUser(@Param(\"userid\") String userid, @Param(\"name\") String name)\n}\n\n```\nさてMyBatis-Springにおいて、明示的にトランザクション管理を行う場合は`TransactionManager`を利用します。具体的には以下の通りです。\n\n```java\npublic class Service {\n\t\n\t@Autowired Dao dao;\n\t@Autowired PlatformTransactionManager txManager;\n\t\n\tpublic void sample(String userid, String name) {\n\t\t\n\t\t// トランザクション管理の開始\n\t\tDefaultTransactionDefinition txDefinition = new DefaultTransactionDefinition();\n\t\ttxDefinition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n\t\tTransactionStatus txStatus = txManager.getTransaction(txDefinition);\n\t\t\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\t// DBに対するアクセスを実行\n\t\t\tdao.insertUser(userid, name);\n\t\t\tdao.updateUser(userid, name);\n\t\t\t\n\t\t\t// DBへのアクセスが問題なく終了した場合は処理を確定させる\n\t\t\ttxManager.commit(txStatus);\n            \n\t\t} catch (Exception e) {\n\t\t\t\n\t\t\t// 何らかの事情で更新処理に失敗した場合は処理をロールバックする\n\t\t\ttxManager.rollback(txStatus);\n\t\t}\t\n\t}\n}\n```\n\n簡単ですね(´・ω・`)\n\n","coediting":false,"comments_count":0,"created_at":"2016-10-08T23:30:18+09:00","group":null,"id":"2770036dae7436ca18a4","likes_count":9,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"spring","versions":[]},{"name":"MyBatis","versions":[]}],"title":"MyBatis-Springでプログラム的にトランザクション管理をする","updated_at":"2018-06-14T17:27:52+09:00","url":"https://qiita.com/neko_the_shadow/items/2770036dae7436ca18a4","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":179,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}