{"rendered_body":"<p>自分がかかわっているシステム開発プロジェクトで、他のチームがこのことでえらく盛り上がっていたので、自分なりに調べた結果を残しておきたいと思います(´・ω・｀)</p>\n\n<h1>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n\n<p>商品在庫を管理するシステム(Java + Doma2)を構築するにあたって、ユーザ入力値をもとに商品名を前方一致で検索したいという要件があったとします。</p>\n\n<p>この要件を実現するため、とある開発者が実施したことは、まず以下のような2-way SQL (<code>findLikeName.sql</code>)を用意することでした。</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\">\n<div class=\"code-lang\"><span class=\"bold\">findLikeName.sql</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">product</span>\n <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"cm\">/* name */</span><span class=\"s1\">'みかん%'</span>\n</code></pre></div>\n</div>\n\n<p>これを以下のような形で呼び出すわけですね。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"nc\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"りんご\"</span><span class=\"o\">;</span> <span class=\"c1\">// ユーザの入力した値</span>\n<span class=\"n\">name</span> <span class=\"o\">+=</span> <span class=\"s\">\"%\"</span><span class=\"o\">;</span>\n<span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Product</span><span class=\"o\">&gt;</span> <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">productDao</span><span class=\"o\">.</span><span class=\"na\">findLikeName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n<span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">products</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>この場合、以下のようなクエリが発行されるので、要件が実現できているように見えます。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">product</span>\n <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"s1\">'りんご%'</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"問題点\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C%E7%82%B9\"><i class=\"fa fa-link\"></i></a>問題点</h1>\n\n<p>たとえばユーザ入力値が<code>%</code>だったとします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"nc\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"%\"</span><span class=\"o\">;</span> <span class=\"c1\">// ユーザの入力した値</span>\n<span class=\"n\">name</span> <span class=\"o\">+=</span> <span class=\"s\">\"%\"</span><span class=\"o\">;</span>\n<span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Product</span><span class=\"o\">&gt;</span> <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">productDao</span><span class=\"o\">.</span><span class=\"na\">findLikeName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n<span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">products</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>この場合、以下のようなSQLが実行されます。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">product</span>\n <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"s1\">'%%'</span>\n</code></pre></div></div>\n\n<p>このクエリはnameがnull以外の行にヒットしてしまいます。これでは<code>%</code>で商品名を前方一致検索したいという要件にこたえられていないだけでなく、セキュリティ上の問題を発生させる可能性すらあります。</p>\n\n<h1>\n<span id=\"修正方法\" class=\"fragment\"></span><a href=\"#%E4%BF%AE%E6%AD%A3%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>修正方法</h1>\n\n<p><a href=\"https://doma.readthedocs.io/en/2.46.0/expression/#using-built-in-functions\" rel=\"nofollow noopener\" target=\"_blank\">この解決策としては<code>Expression language</code>の<code>@prefix</code>を利用することです。</a></p>\n\n<p>今回の場合はまず<code>findLikeName.sql</code>を以下の通りに修正します。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\">\n<div class=\"code-lang\"><span class=\"bold\">findLikeName.sql</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">product</span>\n <span class=\"k\">WHERE</span> <span class=\"n\">name</span> <span class=\"k\">LIKE</span> <span class=\"cm\">/* @prefix(name) */</span><span class=\"s1\">'みかん%'</span>\n</code></pre></div>\n</div>\n\n<p>その後呼び出し方を以下のように修正します。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"nc\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s\">\"りんご\"</span><span class=\"o\">;</span> <span class=\"c1\">// ユーザの入力した値</span>\n<span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Product</span><span class=\"o\">&gt;</span> <span class=\"n\">products</span> <span class=\"o\">=</span> <span class=\"n\">productDao</span><span class=\"o\">.</span><span class=\"na\">findLikeName</span><span class=\"o\">(</span><span class=\"n\">name</span><span class=\"o\">);</span>\n<span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">products</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p><code>@prefix</code>は入力パラメタを前方一致検索用の文字列に変換してくれるだけでなく、<code>%</code>や<code>_</code>のような特別な意味を持つ文字をエスケープしてくれる関数です。そのため、パラメタとして<code>%</code>が渡されたとしても安心ということですね。</p>\n\n<h1>\n<span id=\"環境情報-pomxmlから抜粋\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1-pomxml%E3%81%8B%E3%82%89%E6%8A%9C%E7%B2%8B\"><i class=\"fa fa-link\"></i></a>環境情報 (pom.xmlから抜粋)</h1>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">pom.xml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.h2database<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>h2<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.seasar.doma.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>doma-spring-boot-starter<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>1.5.0<span class=\"nt\">&lt;/version&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n<span class=\"nt\">&lt;dependency&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>org.seasar.doma<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>doma-processor<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>2.30.0<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;scope&gt;</span>provided<span class=\"nt\">&lt;/scope&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div>\n</div>\n","body":"自分がかかわっているシステム開発プロジェクトで、他のチームがこのことでえらく盛り上がっていたので、自分なりに調べた結果を残しておきたいと思います(´・ω・｀)\n\n# 前提\n\n商品在庫を管理するシステム(Java + Doma2)を構築するにあたって、ユーザ入力値をもとに商品名を前方一致で検索したいという要件があったとします。\n\nこの要件を実現するため、とある開発者が実施したことは、まず以下のような2-way SQL (`findLikeName.sql`)を用意することでした。\n\n```SQL:findLikeName.sql\nSELECT *\n  FROM product\n WHERE name LIKE /* name */'みかん%'\n```\n\nこれを以下のような形で呼び出すわけですね。\n\n```java\nString name = \"りんご\"; // ユーザの入力した値\nname += \"%\";\nList<Product> products = productDao.findLikeName(name);\ndoSomething(products);\n```\n\nこの場合、以下のようなクエリが発行されるので、要件が実現できているように見えます。\n\n```sql\nSELECT *\n  FROM product\n WHERE name LIKE 'りんご%'\n``` \n\n# 問題点\n\nたとえばユーザ入力値が`%`だったとします。\n\n```java\nString name = \"%\"; // ユーザの入力した値\nname += \"%\";\nList<Product> products = productDao.findLikeName(name);\ndoSomething(products);\n```\n\nこの場合、以下のようなSQLが実行されます。\n\n```sql\nSELECT *\n  FROM product\n WHERE name LIKE '%%'\n``` \n\nこのクエリはnameがnull以外の行にヒットしてしまいます。これでは`%`で商品名を前方一致検索したいという要件にこたえられていないだけでなく、セキュリティ上の問題を発生させる可能性すらあります。\n\n# 修正方法\n\n[この解決策としては`Expression language`の`@prefix`を利用することです。](https://doma.readthedocs.io/en/2.46.0/expression/#using-built-in-functions)\n\n今回の場合はまず`findLikeName.sql`を以下の通りに修正します。\n\n```sql:findLikeName.sql\nSELECT *\n  FROM product\n WHERE name LIKE /* @prefix(name) */'みかん%'\n```\n\nその後呼び出し方を以下のように修正します。\n\n```java\nString name = \"りんご\"; // ユーザの入力した値\nList<Product> products = productDao.findLikeName(name);\ndoSomething(products);\n```\n\n`@prefix`は入力パラメタを前方一致検索用の文字列に変換してくれるだけでなく、`%`や`_`のような特別な意味を持つ文字をエスケープしてくれる関数です。そのため、パラメタとして`%`が渡されたとしても安心ということですね。\n\n# 環境情報 (pom.xmlから抜粋)\n\n```xml:pom.xml\n<dependency>\n  <groupId>com.h2database</groupId>\n  <artifactId>h2</artifactId>\n  <scope>runtime</scope>\n</dependency>\n<dependency>\n    <groupId>org.seasar.doma.boot</groupId>\n    <artifactId>doma-spring-boot-starter</artifactId>\n    <version>1.5.0</version>\n</dependency>\n<dependency>\n    <groupId>org.seasar.doma</groupId>\n    <artifactId>doma-processor</artifactId>\n    <version>2.30.0</version>\n    <scope>provided</scope>\n</dependency>\n```\n\n","coediting":false,"comments_count":0,"created_at":"2021-04-11T13:55:40+09:00","group":null,"id":"63fe88b609e25beab3fb","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"Doma","versions":[]}],"title":"Doma2で前方一致検索をしたい場合は@prefixを活用する。","updated_at":"2021-04-11T13:55:40+09:00","url":"https://qiita.com/neko_the_shadow/items/63fe88b609e25beab3fb","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":197,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}