{"rendered_body":"<p><code>Files.list</code>や<code>Files.walk</code>や<code>Files.find</code>の戻り値である<code>Stream&lt;Path&gt;</code>は<code>DirectoryStream</code>をラップしたもので、利用後は必ず<code>close</code>する必要があります。<a href=\"https://docs.oracle.com/javase/jp/8/docs/api/java/nio/file/Files.html\" rel=\"nofollow noopener\" target=\"_blank\">このことはJavaDocにも以下の通りに記述されています。</a></p>\n\n<blockquote>\n<p>返されるストリームは、1つ以上のDirectoryStreamをカプセル化します。ファイル・システム・リソースのタイムリな破棄が必要な場合は、try-with-resources構文を使用して、ストリーム操作の完了後にストリームのcloseメソッドが呼び出されるようにしてください。クローズされたストリームに対して操作すると、結果としてIllegalStateExceptionが発生します。</p>\n</blockquote>\n\n<p>では<code>DirecotryStream</code>のラッパーである<code>Stream&lt;Path&gt;</code>を<code>close</code>しない場合、どうなるでしょうか? 以下のコードは<code>Files.list</code>を<code>close</code>せずに呼び出し続けるものです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">list</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"/dev\"</span><span class=\"o\">)).</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>これを実行してみると、以下のような例外が発生します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Exception in thread \"main\" java.nio.file.FileSystemException: /dev: Too many open files\n        at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\n        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\n        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\n        at java.base/sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:432)\n        at java.base/java.nio.file.Files.newDirectoryStream(Files.java:471)\n        at java.base/java.nio.file.Files.list(Files.java:3698)\n        at list.Main.main(Main.java:11)\n</code></pre></div></div>\n\n<p><code>Too many open files</code> というメッセージからもわかる通り、<code>Stream&lt;Path&gt;</code>を明示的にクローズしないと、ファイルディスクリプタがオープンしたままになって、そのうちにプロセスのファイルディスクリプタの上限に達してしまいます。</p>\n\n<p>よってJavaDocに書かれてある通り、<code>Stream&lt;Path&gt;</code>は使い終わったら、明確にクローズする必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">Stream</span><span class=\"o\">&lt;</span><span class=\"nc\">Path</span><span class=\"o\">&gt;</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">list</span><span class=\"o\">(</span><span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"/dev\"</span><span class=\"o\">)))</span> <span class=\"o\">{</span>\n            <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Path</span><span class=\"o\">&gt;</span> <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UncheckedIOException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<hr>\n\n<p><strong>環境情報</strong></p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>C:\\&gt;javac -version\njavac 11.0.3\nC:\\&gt;java -version\nopenjdk version \"11.0.3\" 2019-04-16\nOpenJDK Runtime Environment AdoptOpenJDK (build 11.0.3+7)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.3+7, mixed mode)\n</code></pre></div></div>\n","body":"`Files.list`や`Files.walk`や`Files.find`の戻り値である`Stream<Path>`は`DirectoryStream`をラップしたもので、利用後は必ず`close`する必要があります。[このことはJavaDocにも以下の通りに記述されています。](https://docs.oracle.com/javase/jp/8/docs/api/java/nio/file/Files.html)\n\n> 返されるストリームは、1つ以上のDirectoryStreamをカプセル化します。ファイル・システム・リソースのタイムリな破棄が必要な場合は、try-with-resources構文を使用して、ストリーム操作の完了後にストリームのcloseメソッドが呼び出されるようにしてください。クローズされたストリームに対して操作すると、結果としてIllegalStateExceptionが発生します。\n\nでは`DirecotryStream`のラッパーである`Stream<Path>`を`close`しない場合、どうなるでしょうか? 以下のコードは`Files.list`を`close`せずに呼び出し続けるものです。\n\n```Main.java\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        while (true) {\n            Files.list(Paths.get(\"/dev\")).collect(Collectors.toList());\n        }\n    }\n}\n```\n\nこれを実行してみると、以下のような例外が発生します。\n\n```\nException in thread \"main\" java.nio.file.FileSystemException: /dev: Too many open files\n        at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)\n        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\n        at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\n        at java.base/sun.nio.fs.UnixFileSystemProvider.newDirectoryStream(UnixFileSystemProvider.java:432)\n        at java.base/java.nio.file.Files.newDirectoryStream(Files.java:471)\n        at java.base/java.nio.file.Files.list(Files.java:3698)\n        at list.Main.main(Main.java:11)\n```\n\n`Too many open files` というメッセージからもわかる通り、`Stream<Path>`を明示的にクローズしないと、ファイルディスクリプタがオープンしたままになって、そのうちにプロセスのファイルディスクリプタの上限に達してしまいます。\n\nよってJavaDocに書かれてある通り、`Stream<Path>`は使い終わったら、明確にクローズする必要があります。\n\n```Main.java\npublic class Main {\n    public static void main(String[] args) {\n        try (Stream<Path> ds = Files.list(Paths.get(\"/dev\"))) {\n            List<Path> paths = ds.collect(Collectors.toList());\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}\n```\n\n---\n\n__環境情報__\n\n```\nC:\\>javac -version\njavac 11.0.3\nC:\\>java -version\nopenjdk version \"11.0.3\" 2019-04-16\nOpenJDK Runtime Environment AdoptOpenJDK (build 11.0.3+7)\nOpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.3+7, mixed mode)\n```\n","coediting":false,"comments_count":0,"created_at":"2021-01-31T17:55:29+09:00","group":null,"id":"e2b37aef9f97c6978d20","likes_count":1,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"Java","versions":[]}],"title":"Files.listやFiles.walkやFiles.findの戻り値であるStream<Path>はクローズしないと、Too many open files が発生する","updated_at":"2021-01-31T17:57:40+09:00","url":"https://qiita.com/neko_the_shadow/items/e2b37aef9f97c6978d20","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":207,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":3388,"team_membership":null}