{"rendered_body":"<p>先日ネットサーフィン中に次のような記事を見つけました: <a href=\"http://gigazine.net/news/20100822_hardest_sudoku/\" rel=\"nofollow noopener\" target=\"_blank\">「数学のエキスパートが3ヶ月かけて作成した「世界一難しい数独」」</a>。事実かどうかはともかく、Python3でこれを解いてみました。なお実装としてはバックトラック法を利用しています。要するに力任せに解いているということですね(´・ω・`)</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre class=\"with-code\"><code>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sudoku</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)]</span> <span class=\"c1\"># 空白の場合は0\n</span>\n    <span class=\"c1\"># 与えられた数独パズルを解く\n</span>    <span class=\"c1\"># 空白のマスを次々と埋めていき、すべての空白マスを埋めた場合はTrueを返す(埋められなかった場合はFalse)\n</span>    <span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># 消去法: ただひとつに決まるマスを埋めていく\n</span>        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n\n                <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">__find_numbers</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">ls</span><span class=\"p\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">ls</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n\n        <span class=\"n\">blanks</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">blanks</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">True</span> <span class=\"c1\"># すでにすべてのマスが埋められている場合\n</span>\n        <span class=\"n\">first_i</span><span class=\"p\">,</span> <span class=\"n\">first_j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">first_number</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">first_number</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">__find_numbers</span><span class=\"p\">(</span><span class=\"n\">first_i</span><span class=\"p\">,</span> <span class=\"n\">first_j</span><span class=\"p\">)]</span>\n\n        <span class=\"c1\"># バックトラック法:\n</span>        <span class=\"c1\">#     1. 空白のマスに数字を入れる\n</span>        <span class=\"c1\">#     2. 次の空白のマスに数字が入るかどうかを調べる\n</span>        <span class=\"c1\">#     3. 2.において、入らない場合はバックトラック\n</span>        <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">blanks</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n            <span class=\"n\">next_i</span><span class=\"p\">,</span> <span class=\"n\">next_j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">next_numbers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">__find_numbers</span><span class=\"p\">(</span><span class=\"n\">next_i</span><span class=\"p\">,</span> <span class=\"n\">next_j</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># バックトラック\n</span>            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">next_numbers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">stack_top_idx</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">temp_idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">stack_top_idx</span><span class=\"p\">,</span> <span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">temp_i</span><span class=\"p\">,</span> <span class=\"n\">temp_j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"n\">temp_idx</span><span class=\"p\">]</span>\n                    <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">temp_i</span><span class=\"p\">][</span><span class=\"n\">temp_j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">next_number</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">next_number</span> <span class=\"ow\">in</span> <span class=\"n\">next_numbers</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"c1\"># とあるマスに入れることができる数字をsetに格納する\n</span>    <span class=\"k\">def</span> <span class=\"nf\">__find_numbers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n        <span class=\"n\">used_numbers</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"c1\"># 同じ行と同じ列を調べる\n</span>        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">):</span> <span class=\"n\">used_numbers</span> <span class=\"o\">|=</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]}</span>\n\n        <span class=\"c1\"># 同じブロックを調べる\n</span>        <span class=\"n\">box_i_min</span><span class=\"p\">,</span> <span class=\"n\">box_j_min</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">//</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">//</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n        <span class=\"k\">for</span> <span class=\"n\">box_i</span><span class=\"p\">,</span> <span class=\"n\">box_j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">box_i_min</span><span class=\"p\">,</span> <span class=\"n\">box_i_min</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">),</span> \\\n                                              <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">box_j_min</span><span class=\"p\">,</span> <span class=\"n\">box_j_min</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)):</span>\n            <span class=\"n\">used_numbers</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">box_i</span><span class=\"p\">][</span><span class=\"n\">box_j</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">used_numbers</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"s\">'''\n        ..53.....\n        8......2.\n        .7..1.5..\n        4....53..\n        .1..7...6\n        ..32....8.\n        .6.5....9\n        ..4....3.\n        .....97..\n    '''</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n    <span class=\"n\">sudoku</span> <span class=\"o\">=</span> <span class=\"n\">Sudoku</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\".\"</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"n\">sudoku</span><span class=\"p\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sudoku</span><span class=\"p\">)</span>\n    <span class=\"n\">sudoku</span><span class=\"p\">.</span><span class=\"n\">solve</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"========\"</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sudoku</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># 005300000\n# 800000020\n# 070010500\n# 400005300\n# 010070006\n# 003200080\n# 060500009\n# 004000030\n# 000009700\n# =========\n# 145327698\n# 839654127\n# 672918543\n# 496185372\n# 218473956\n# 753296481\n# 367542819\n# 984761235\n# 521839764\n</span></code></pre></div></div>\n\n<p>GIGAZINEと同じ答えになったので、大丈夫でしょう(｀・ω・´)ｼｬｷｰﾝ</p>\n","body":"先日ネットサーフィン中に次のような記事を見つけました: [「数学のエキスパートが3ヶ月かけて作成した「世界一難しい数独」」](http://gigazine.net/news/20100822_hardest_sudoku/)。事実かどうかはともかく、Python3でこれを解いてみました。なお実装としてはバックトラック法を利用しています。要するに力任せに解いているということですね(´・ω・`)\n\n```py3\n\nimport itertools\n\nclass Sudoku(object):\n    def __init__(self):\n        self.matrix = [[0 for _ in range(9)] for _ in range(9)] # 空白の場合は0\n    \n    # 与えられた数独パズルを解く\n    # 空白のマスを次々と埋めていき、すべての空白マスを埋めた場合はTrueを返す(埋められなかった場合はFalse)\n    def solve(self):\n        # 消去法: ただひとつに決まるマスを埋めていく\n        while True:\n            ls = []\n            for i, j in itertools.product(range(9), repeat=2):\n                if self.matrix[i][j] != 0: continue\n\n                numbers = self.__find_numbers(i, j)\n                if len(numbers) == 1: ls.append((i, j, numbers[0]))\n\n            if len(ls) == 0: break\n            for i, j, number in ls: self.matrix[i][j] = number\n\n\n        blanks = [(i, j) for i, j in itertools.product(range(9), repeat=2) if self.matrix[i][j] == 0]\n        if len(blanks) == 0: return True # すでにすべてのマスが埋められている場合\n\n        first_i, first_j = blanks[0]\n        stack = [(0, first_number) for first_number in self.__find_numbers(first_i, first_j)]\n\n        # バックトラック法:\n        #     1. 空白のマスに数字を入れる\n        #     2. 次の空白のマスに数字が入るかどうかを調べる\n        #     3. 2.において、入らない場合はバックトラック\n        while stack:\n            idx, number = stack.pop()\n            i, j = blanks[idx]\n            self.matrix[i][j] = number\n\n            if idx == len(blanks) - 1: return True\n\n            next_i, next_j = blanks[idx + 1]\n            next_numbers = self.__find_numbers(next_i, next_j)\n\n            # バックトラック\n            if len(next_numbers) == 0:\n                stack_top_idx = stack[-1][0]\n                for temp_idx in range(stack_top_idx, idx + 1):\n                    temp_i, temp_j = blanks[temp_idx]\n                    self.matrix[temp_i][temp_j] = 0\n\n            stack.extend((idx + 1, next_number) for next_number in next_numbers)\n\n        return False\n\n    # とあるマスに入れることができる数字をsetに格納する\n    def __find_numbers(self, i, j):\n        used_numbers = set()\n        # 同じ行と同じ列を調べる\n        for x in range(9): used_numbers |= {self.matrix[x][j], self.matrix[i][x]}\n\n        # 同じブロックを調べる\n        box_i_min, box_j_min = (i // 3) * 3, (j // 3) * 3\n        for box_i, box_j in itertools.product(range(box_i_min, box_i_min + 3), \\\n                                              range(box_j_min, box_j_min + 3)):\n            used_numbers.add(self.matrix[box_i][box_j])\n\n        return set(range(1, 10)) - used_numbers\n\n    def __str__(self):\n        return \"\\n\".join(\"\".join(map(str, row)) for row in self.matrix)\n\nif __name__ == \"__main__\":\n    matrix = '''\n        ..53.....\n        8......2.\n        .7..1.5..\n        4....53..\n        .1..7...6\n        ..32....8.\n        .6.5....9\n        ..4....3.\n        .....97..\n    '''.split()\n\n    sudoku = Sudoku()\n    for i, j in itertools.product(range(9), repeat=2):\n        if matrix[i][j] == \".\": continue\n        sudoku.matrix[i][j] = int(matrix[i][j])\n    \n    print(sudoku)\n    sudoku.solve()\n    print(\"========\")\n    print(sudoku)\n\n\n# 005300000\n# 800000020\n# 070010500\n# 400005300\n# 010070006\n# 003200080\n# 060500009\n# 004000030\n# 000009700\n# =========\n# 145327698\n# 839654127\n# 672918543\n# 496185372\n# 218473956\n# 753296481\n# 367542819\n# 984761235\n# 521839764\n```\n\nGIGAZINEと同じ答えになったので、大丈夫でしょう(｀・ω・´)ｼｬｷｰﾝ\n","coediting":false,"comments_count":0,"created_at":"2016-07-23T23:06:08+09:00","group":null,"id":"a7b6f1e050627d862591","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Python","versions":[]},{"name":"Python3","versions":[]}],"title":"数独ソルバーをPython3で実装","updated_at":"2016-07-23T23:07:03+09:00","url":"https://qiita.com/neko_the_shadow/items/a7b6f1e050627d862591","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":187,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}