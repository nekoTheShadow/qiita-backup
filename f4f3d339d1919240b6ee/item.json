{"rendered_body":"<p>awk(gawk)には乱数を生成する組み込み関数として<code>rand</code>が用意されているのですが、たとえば以下のようなソースコードで検証ができるように、実行のたびに同じような乱数列を生成してしまいます。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"k\">for </span>_ <span class=\"k\">in</span> <span class=\"si\">$(</span><span class=\"nb\">seq </span>5<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">awk</span> <span class=\"s1\">'BEGIN{print(rand(), rand(), rand())}'</span>\n<span class=\"k\">done</span>\n<span class=\"c\"># 0.237788 0.291066 0.845814</span>\n<span class=\"c\"># 0.237788 0.291066 0.845814</span>\n<span class=\"c\"># 0.237788 0.291066 0.845814</span>\n<span class=\"c\"># 0.237788 0.291066 0.845814</span>\n<span class=\"c\"># 0.237788 0.291066 0.845814</span>\n</pre></div></div>\n\n<p>awkの仕様なのか、gawkの実装がそうなのか、正直なところよくわからないのですが、乱数生成のシード値の初期値が一定になっているらしく、そのために実行のたびに同じような乱数列が生成されてしまうようです。したがって実行のたびに異なった乱数列を生成したいという場合は<code>srand</code>を使って、シード値を変更すればよい――と思って書いたのが以下のコードになります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"k\">for </span>_ <span class=\"k\">in</span> <span class=\"si\">$(</span><span class=\"nb\">seq </span>5<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">awk</span> <span class=\"s1\">'BEGIN{srand(); print(rand(), rand(), rand())}'</span>\n<span class=\"k\">done</span>\n<span class=\"c\"># 0.589234 0.904348 0.441211</span>\n<span class=\"c\"># 0.589234 0.904348 0.441211</span>\n<span class=\"c\"># 0.589234 0.904348 0.441211</span>\n<span class=\"c\"># 0.50575 0.499608 0.730847</span>\n<span class=\"c\"># 0.50575 0.499608 0.730847</span>\n</pre></div></div>\n\n<p>結果から述べると、想定通りに動作しませんでした。確かに<code>srand</code>がシード値を書き換えてはくれているようですが、まだまだ同じような乱数列を生成してしまう。この原因をいろいろ調べたところ、<code>srand</code>は引数を省略したとき、実行時の時刻をシード値に設定するのですが、この「時刻」の単位が「秒」。つまり1秒以内に<code>srand</code>を呼び出すと、同じシード値が設定されてしまい、結果として同じ乱数列が生成されてしまいます。</p>\n\n<p>よって<code>srand</code>の引数は省略せず、自前で用意したシード値を設定する必要がありそうです。そしてそのシード値を自前で用意する方法ですが、awkの外部で生成した乱数を利用することとします。たとえばbashの組み込み変数<code>RANDOM</code>で生成した乱数を-vオプションを使って、awk内部に引き渡し、これを<code>srand</code>の引数(=乱数のシード値)としたところ、想定通り動作しました(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"k\">for </span>_ <span class=\"k\">in</span> <span class=\"si\">$(</span><span class=\"nb\">seq </span>5<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">awk</span> <span class=\"nt\">-v</span> <span class=\"nv\">seed</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">RANDOM</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"s1\">'BEGIN{srand(seed); print(rand(), rand(), rand())}'</span> \n<span class=\"k\">done</span>\n<span class=\"c\"># 0.975518 0.212486 0.0285477</span>\n<span class=\"c\"># 0.838674 0.664669 0.070124</span>\n<span class=\"c\"># 0.314944 0.212045 0.00891201</span>\n<span class=\"c\"># 0.725379 0.64815 0.805276</span>\n<span class=\"c\"># 0.109255 0.713515 0.799796</span>\n</pre></div></div>\n\n<p>-vオプションの利用が難しい場合は「外部コマンドで乱数を生成、それを<code>getline</code>で拾って、シード値とする」という方法でも大丈夫そうです(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"k\">for </span>_ <span class=\"k\">in</span> <span class=\"si\">$(</span><span class=\"nb\">seq </span>5<span class=\"si\">)</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">awk</span> <span class=\"s1\">'BEGIN{\n    \"seq 32767 | shuf -n 1\" | getline seed\n    srand(seed); \n    print(rand(), rand(), rand())\n  }'</span>\n<span class=\"k\">done</span>\n<span class=\"c\"># 0.711337 0.206352 0.0366282</span>\n<span class=\"c\"># 0.614835 0.52362 0.556768</span>\n<span class=\"c\"># 0.666671 0.18371 0.66057</span>\n<span class=\"c\"># 0.964642 0.860411 0.500877</span>\n<span class=\"c\"># 0.95293 0.590551 0.826792</span>\n</pre></div></div>\n\n<p>参考 <a href=\"http://www.kt.rim.or.jp/%7Ekbk/gawk-30/gawk_13.html\" rel=\"nofollow noopener\" target=\"_blank\">www.kt.rim.or.jp/~kbk/gawk-30/gawk_13.html</a></p>\n","body":"awk(gawk)には乱数を生成する組み込み関数として`rand`が用意されているのですが、たとえば以下のようなソースコードで検証ができるように、実行のたびに同じような乱数列を生成してしまいます。\n\n```bash\nfor _ in $(seq 5); do\n  awk 'BEGIN{print(rand(), rand(), rand())}'\ndone\n# 0.237788 0.291066 0.845814\n# 0.237788 0.291066 0.845814\n# 0.237788 0.291066 0.845814\n# 0.237788 0.291066 0.845814\n# 0.237788 0.291066 0.845814\n```\n\nawkの仕様なのか、gawkの実装がそうなのか、正直なところよくわからないのですが、乱数生成のシード値の初期値が一定になっているらしく、そのために実行のたびに同じような乱数列が生成されてしまうようです。したがって実行のたびに異なった乱数列を生成したいという場合は`srand`を使って、シード値を変更すればよい――と思って書いたのが以下のコードになります。\n\n```bash\nfor _ in $(seq 5); do\n  awk 'BEGIN{srand(); print(rand(), rand(), rand())}'\ndone\n# 0.589234 0.904348 0.441211\n# 0.589234 0.904348 0.441211\n# 0.589234 0.904348 0.441211\n# 0.50575 0.499608 0.730847\n# 0.50575 0.499608 0.730847\n```\n\n結果から述べると、想定通りに動作しませんでした。確かに`srand`がシード値を書き換えてはくれているようですが、まだまだ同じような乱数列を生成してしまう。この原因をいろいろ調べたところ、`srand`は引数を省略したとき、実行時の時刻をシード値に設定するのですが、この「時刻」の単位が「秒」。つまり1秒以内に`srand`を呼び出すと、同じシード値が設定されてしまい、結果として同じ乱数列が生成されてしまいます。\n\nよって`srand`の引数は省略せず、自前で用意したシード値を設定する必要がありそうです。そしてそのシード値を自前で用意する方法ですが、awkの外部で生成した乱数を利用することとします。たとえばbashの組み込み変数`RANDOM`で生成した乱数を-vオプションを使って、awk内部に引き渡し、これを`srand`の引数(=乱数のシード値)としたところ、想定通り動作しました(´・ω・｀)\n\n```bash\nfor _ in $(seq 5); do\n  awk -v seed=\"${RANDOM}\" 'BEGIN{srand(seed); print(rand(), rand(), rand())}' \ndone\n# 0.975518 0.212486 0.0285477\n# 0.838674 0.664669 0.070124\n# 0.314944 0.212045 0.00891201\n# 0.725379 0.64815 0.805276\n# 0.109255 0.713515 0.799796\n```\n\n-vオプションの利用が難しい場合は「外部コマンドで乱数を生成、それを`getline`で拾って、シード値とする」という方法でも大丈夫そうです(´・ω・｀)\n\n```bash\nfor _ in $(seq 5); do\n  awk 'BEGIN{\n    \"seq 32767 | shuf -n 1\" | getline seed\n    srand(seed); \n    print(rand(), rand(), rand())\n  }'\ndone\n# 0.711337 0.206352 0.0366282\n# 0.614835 0.52362 0.556768\n# 0.666671 0.18371 0.66057\n# 0.964642 0.860411 0.500877\n# 0.95293 0.590551 0.826792\n```\n\n参考 www.kt.rim.or.jp/~kbk/gawk-30/gawk_13.html\n","coediting":false,"comments_count":0,"created_at":"2018-04-22T19:53:24+09:00","group":null,"id":"f4f3d339d1919240b6ee","likes_count":7,"private":false,"reactions_count":0,"tags":[{"name":"Bash","versions":[]},{"name":"awk","versions":[]}],"title":"AWKのrandが同じ乱数列を生成してしまう","updated_at":"2018-04-22T20:07:05+09:00","url":"https://qiita.com/neko_the_shadow/items/f4f3d339d1919240b6ee","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}