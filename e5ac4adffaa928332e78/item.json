{"rendered_body":"<p><a href=\"https://www.oreilly.co.jp/books/9784873117522/\" rel=\"nofollow noopener\" target=\"_blank\">『Go言語によるWebアプリケーション開発』(Mat Ryer著、鵜飼文敏監訳、牧野聡訳; O'Reilly Japan)</a>の「第5章　分散システムと柔軟なデータの処理」ではNSQというメッセージキューソフトウェアを利用して、Twitterのツイートを分析します。同書内ではNSQの構築をローカルマシンに直接インストールしているのですが、Dockerを利用して構築することも可能です。本記事では、Dockerを用いたNSQの構築手順について、簡単にまとめておきます。</p>\n\n<h1>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n\n<p>動作確認を行った環境は次の通りです。</p>\n\n<ul>\n<li>Windows 10 Home</li>\n<li>Docker ToolBox</li>\n</ul>\n\n<p>また環境変数<code>DOCKER_HOST</code>は次の通りに設定されています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>DOCKER_HOST=tcp://192.168.99.100:2376\n</pre></div></div>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<p>まずはNSQのイメージを取得します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>docker pull nsqio/nsq\n</pre></div></div>\n\n<p>次に<code>nsqlookupd</code>を起動します。ここではコンテナ名を<code>go-webapp-nsqlookupd</code>としています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>docker run -d                 ^\n  --name go-webapp-nsqlookupd ^\n  -p 4160:4160 -p 4161:4161   ^\n  nsqio/nsq /nsqlookupd\n</pre></div></div>\n\n<p>最後に<code>nsqd</code>を起動させれば完了です(コンテナ名は<code>go-webapp-nsqd</code>)。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>docker run -d                               ^\n  --name go-webapp-nsqd                     ^\n  -p 4150:4150 -p 4151:4151                 ^\n  nsqio/nsq /nsqd                           ^\n  --broadcast-address=192.168.99.100        ^\n  --lookupd-tcp-address=192.168.99.100:4160\n</pre></div></div>\n\n<p>わかりづらいのは<code>nsqlookupd</code>と<code>nsqd</code>で別のコンテナを起動する必要があるということ。また<code>--broadcast-address</code>や<code>--lookupd-tcp-address</code>に指定する値もわかりづらいのですが、おおよそ上記の通りに設定すればOKです。</p>\n\n<h1>\n<span id=\"おまけ\" class=\"fragment\"></span><a href=\"#%E3%81%8A%E3%81%BE%E3%81%91\"><i class=\"fa fa-link\"></i></a>おまけ</h1>\n\n<p>同書では<code>nsq_tail</code>を利用しているのですが、Dockerを利用している場合は<code>nsq_tail</code>用にコンテナを作成します。たとえば<code>votes</code>というトピックを対象にする場合、以下のコマンドを実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>docker run --rm nsqio/nsq /nsq_tail          ^\n  --lookupd-http-address=192.168.99.100:4161 ^\n  -topic votes\n</pre></div></div>\n\n<h1>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h1>\n\n<ul>\n<li><a href=\"https://nsq.io/deployment/docker.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://nsq.io/deployment/docker.html</a></li>\n<li><a href=\"https://github.com/nekoTheShadow/go-webapp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/nekoTheShadow/go-webapp</a></li>\n</ul>\n","body":"[『Go言語によるWebアプリケーション開発』(Mat Ryer著、鵜飼文敏監訳、牧野聡訳; O'Reilly Japan)](https://www.oreilly.co.jp/books/9784873117522/)の「第5章　分散システムと柔軟なデータの処理」ではNSQというメッセージキューソフトウェアを利用して、Twitterのツイートを分析します。同書内ではNSQの構築をローカルマシンに直接インストールしているのですが、Dockerを利用して構築することも可能です。本記事では、Dockerを用いたNSQの構築手順について、簡単にまとめておきます。\n\n# 前提\n\n動作確認を行った環境は次の通りです。\n\n- Windows 10 Home\n- Docker ToolBox\n\nまた環境変数`DOCKER_HOST`は次の通りに設定されています。\n\n```\nDOCKER_HOST=tcp://192.168.99.100:2376\n```\n\n# 手順\n\nまずはNSQのイメージを取得します。\n\n```\ndocker pull nsqio/nsq\n```\n\n次に`nsqlookupd`を起動します。ここではコンテナ名を`go-webapp-nsqlookupd`としています。\n\n```\ndocker run -d                 ^\n  --name go-webapp-nsqlookupd ^\n  -p 4160:4160 -p 4161:4161   ^\n  nsqio/nsq /nsqlookupd\n```\n\n最後に`nsqd`を起動させれば完了です(コンテナ名は`go-webapp-nsqd`)。\n\n```\ndocker run -d                               ^\n  --name go-webapp-nsqd                     ^\n  -p 4150:4150 -p 4151:4151                 ^\n  nsqio/nsq /nsqd                           ^\n  --broadcast-address=192.168.99.100        ^\n  --lookupd-tcp-address=192.168.99.100:4160\n```\n\nわかりづらいのは`nsqlookupd`と`nsqd`で別のコンテナを起動する必要があるということ。また`--broadcast-address`や`--lookupd-tcp-address`に指定する値もわかりづらいのですが、おおよそ上記の通りに設定すればOKです。\n\n# おまけ\n\n同書では`nsq_tail`を利用しているのですが、Dockerを利用している場合は`nsq_tail`用にコンテナを作成します。たとえば`votes`というトピックを対象にする場合、以下のコマンドを実行します。\n\n```\ndocker run --rm nsqio/nsq /nsq_tail          ^\n  --lookupd-http-address=192.168.99.100:4161 ^\n  -topic votes\n```\n\n# 参考\n\n- https://nsq.io/deployment/docker.html\n- https://github.com/nekoTheShadow/go-webapp\n","coediting":false,"comments_count":0,"created_at":"2020-03-22T16:57:21+09:00","group":null,"id":"e5ac4adffaa928332e78","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Docker","versions":[]},{"name":"nsq","versions":[]}],"title":"NSQ環境をDockerで構築する(『Go言語によるWebアプリケーション開発』第5章)","updated_at":"2020-03-22T16:57:21+09:00","url":"https://qiita.com/neko_the_shadow/items/e5ac4adffaa928332e78","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":179,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}