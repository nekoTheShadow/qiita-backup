{"rendered_body":"<p>Go言語の<code>flag</code>パッケージを利用して、コマンドラインツールを作成していると、オプションの値をSliceで受け取りたい場合があります。たとえば「同じオプションを複数回指定し、その値をすべてスライスに詰めたい」という場合、どのように実装すればよいでしょうか?</p>\n\n<p><strong>答えだけ先に述べておくと、<a href=\"https://golang.org/pkg/flag/#Value\" rel=\"nofollow noopener\" target=\"_blank\"><code>flag.Value</code>インターフェース</a>を実装し、パース時には<a href=\"https://golang.org/pkg/flag/#Var\" rel=\"nofollow noopener\" target=\"_blank\"><code>flag.Var</code></a>を呼び出します。</strong></p>\n\n<p>今回は一例を示すにあたって、<code>div</code>コマンドを作成してみます。<code>div</code>コマンドは標準入力から数値が与えられると、<code>-d</code>オプションで与えられた数値で割り切れるかどうかを確認し、割り切れる場合は標準入力の値をそのまま標準出力に出力するというものです。ここでは<code>-d</code>オプションは複数回指定でき、複数回指定した場合は、1つでも割り切ることができればOKということにします。</p>\n\n<p>動作イメージは次の通りです。ここでは1から15までの数値のうち、3または5で割り切れるものを出力しています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ seq 15 | ./div -d 3 -d 5\n3\n5\n6\n9\n10\n12\n15\n</pre></div></div>\n\n<p><code>div</code>コマンドの実装例は次の通りになります。</p>\n\n<div class=\"code-frame\" data-lang=\"go\"><div class=\"highlight\"><pre><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"p\">(</span>\n    <span class=\"s\">\"bufio\"</span>\n    <span class=\"s\">\"flag\"</span>\n    <span class=\"s\">\"fmt\"</span>\n    <span class=\"s\">\"os\"</span>\n    <span class=\"s\">\"strconv\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">type</span> <span class=\"n\">Divisors</span> <span class=\"p\">[]</span><span class=\"kt\">int</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">ds</span> <span class=\"o\">*</span><span class=\"n\">Divisors</span><span class=\"p\">)</span> <span class=\"n\">String</span><span class=\"p\">()</span> <span class=\"kt\">string</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Sprintf</span><span class=\"p\">(</span><span class=\"s\">\"%v\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"n\">ds</span> <span class=\"o\">*</span><span class=\"n\">Divisors</span><span class=\"p\">)</span> <span class=\"n\">Set</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"kt\">string</span><span class=\"p\">)</span> <span class=\"kt\">error</span> <span class=\"p\">{</span>\n    <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">strconv</span><span class=\"o\">.</span><span class=\"n\">Atoi</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">err</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">*</span><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"nb\">append</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"no\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"n\">divisors</span> <span class=\"n\">Divisors</span>\n    <span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">divisors</span><span class=\"p\">,</span> <span class=\"s\">\"d\"</span><span class=\"p\">,</span> <span class=\"s\">\"除数を指定してください\"</span><span class=\"p\">)</span>\n    <span class=\"n\">flag</span><span class=\"o\">.</span><span class=\"n\">Parse</span><span class=\"p\">()</span>\n\n    <span class=\"n\">stdin</span> <span class=\"o\">:=</span> <span class=\"n\">bufio</span><span class=\"o\">.</span><span class=\"n\">NewScanner</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Stdin</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">Scan</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"c\">// 標準入力から1行読み込み、整数に変換。</span>\n        <span class=\"c\">// 変換できない場合は理由を標準エラー出力に出力し、その行はスキップ</span>\n        <span class=\"n\">line</span> <span class=\"o\">:=</span> <span class=\"n\">stdin</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">()</span>\n        <span class=\"n\">dividend</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">strconv</span><span class=\"o\">.</span><span class=\"n\">Atoi</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Fprintln</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Stderr</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n            <span class=\"k\">continue</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c\">// 標準入力から読み込んだ整数が、dオプションから取得した整数で割り切れるかどうかを検査。</span>\n        <span class=\"c\">// 割り切れた場合は標準入力から読み込んだ値を標準出力に出力する。</span>\n        <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">divisor</span> <span class=\"o\">:=</span> <span class=\"k\">range</span> <span class=\"n\">divisors</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"n\">dividend</span><span class=\"o\">%</span><span class=\"n\">divisor</span> <span class=\"o\">==</span> <span class=\"m\">0</span> <span class=\"p\">{</span>\n                <span class=\"n\">fmt</span><span class=\"o\">.</span><span class=\"n\">Fprintln</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Stdout</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n                <span class=\"k\">break</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>ここでは<code>Divisors</code>型(実体は<code>int</code>スライス)を作成、<code>flag.Value</code>インターフェースの関数<code>String()</code>と<code>Set()</code>をそれぞれ実装しています。パース時に<code>flag.Var</code>関数を呼び出すと、<code>Divisors</code>型(実体は<code>int</code>スライス)に<code>-d</code>オプションの値が格納されることが分かります。</p>\n","body":"Go言語の`flag`パッケージを利用して、コマンドラインツールを作成していると、オプションの値をSliceで受け取りたい場合があります。たとえば「同じオプションを複数回指定し、その値をすべてスライスに詰めたい」という場合、どのように実装すればよいでしょうか?\n\n__答えだけ先に述べておくと、[`flag.Value`インターフェース](https://golang.org/pkg/flag/#Value)を実装し、パース時には[`flag.Var`](https://golang.org/pkg/flag/#Var)を呼び出します。__\n\n今回は一例を示すにあたって、`div`コマンドを作成してみます。`div`コマンドは標準入力から数値が与えられると、`-d`オプションで与えられた数値で割り切れるかどうかを確認し、割り切れる場合は標準入力の値をそのまま標準出力に出力するというものです。ここでは`-d`オプションは複数回指定でき、複数回指定した場合は、1つでも割り切ることができればOKということにします。\n\n動作イメージは次の通りです。ここでは1から15までの数値のうち、3または5で割り切れるものを出力しています。\n\n```\n$ seq 15 | ./div -d 3 -d 5\n3\n5\n6\n9\n10\n12\n15\n```\n\n`div`コマンドの実装例は次の通りになります。\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"flag\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\ntype Divisors []int\n\nfunc (ds *Divisors) String() string {\n\treturn fmt.Sprintf(\"%v\", *ds)\n}\n\nfunc (ds *Divisors) Set(s string) error {\n\td, err := strconv.Atoi(s)\n\tif err != nil {\n\t\treturn err\n\t}\n\t*ds = append(*ds, d)\n\treturn nil\n}\n\nfunc main() {\n\tvar divisors Divisors\n\tflag.Var(&divisors, \"d\", \"除数を指定してください\")\n\tflag.Parse()\n\n\tstdin := bufio.NewScanner(os.Stdin)\n\tfor stdin.Scan() {\n\t\t// 標準入力から1行読み込み、整数に変換。\n\t\t// 変換できない場合は理由を標準エラー出力に出力し、その行はスキップ\n\t\tline := stdin.Text()\n\t\tdividend, err := strconv.Atoi(line)\n\t\tif err != nil {\n\t\t\tfmt.Fprintln(os.Stderr, err)\n\t\t\tcontinue\n\t\t}\n\n\t\t// 標準入力から読み込んだ整数が、dオプションから取得した整数で割り切れるかどうかを検査。\n\t\t// 割り切れた場合は標準入力から読み込んだ値を標準出力に出力する。\n\t\tfor _, divisor := range divisors {\n\t\t\tif dividend%divisor == 0 {\n\t\t\t\tfmt.Fprintln(os.Stdout, line)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nここでは`Divisors`型(実体は`int`スライス)を作成、`flag.Value`インターフェースの関数`String()`と`Set()`をそれぞれ実装しています。パース時に`flag.Var`関数を呼び出すと、`Divisors`型(実体は`int`スライス)に`-d`オプションの値が格納されることが分かります。\n","coediting":false,"comments_count":0,"created_at":"2020-02-10T00:17:42+09:00","group":null,"id":"49fdc992d2d3c5af03d2","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Go","versions":[]}],"title":"flagパッケージを利用しているときに、オプションの値をスライスで受け取りたい / 同じオプションを複数回指定し、その値をすべてスライスに詰めたい","updated_at":"2020-02-10T00:17:42+09:00","url":"https://qiita.com/neko_the_shadow/items/49fdc992d2d3c5af03d2","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":33,"github_login_name":null,"id":"neko_the_shadow","items_count":169,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}