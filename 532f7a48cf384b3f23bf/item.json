{"rendered_body":"<p>もとねた: <a href=\"https://qiita.com/tbpgr/items/0567699ba083158804ac\" id=\"reference-1f1a00a6c115e2c7d864\">ずんだの菱形アルファベット問題 Ruby編</a></p>\n\n<p>Python3で、まずは「ふつう」に回答してみました。もとねたでは実行時引数を読み込んでいましたが、以下の解答では標準入力の1行目をnとしています。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"k\">def</span> <span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s\">'invalid'</span>\n\n    <span class=\"n\">mid</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">'_'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">alphabet</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"s\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"p\">):</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">mid</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">mid</span> <span class=\"o\">+</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">mid</span> <span class=\"o\">-</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">alphabet</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<p>次はPython3の「ふつう」ではない解答、つまり1行野郎で解いたものが以下になります。これも「ふつう」の解答と同様に標準入力の1行目をnとします。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><code><span class=\"k\">print</span><span class=\"p\">((</span><span class=\"k\">lambda</span> <span class=\"n\">n</span> <span class=\"p\">:</span> <span class=\"s\">'invalid'</span> <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">ch</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"k\">else</span> <span class=\"s\">'_'</span> <span class=\"k\">for</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">ch</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">),</span> <span class=\"s\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"p\">)))(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())))</span>\n</code></pre></div></div>\n\n<p>たとえばPython3のREPLなどをつかって、上記の1行野郎を実行してみると、想定通りの結果が得られることがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ python3\nPython 3.6.5 (default, Apr  1 2018, 05:46:30)\n[GCC 7.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; print((lambda n : 'invalid' if n % 2 == 0 else '\\n'.join(''.join(ch if y in (abs(n // 2 - x), (n - 1) - abs(n // 2 - x)) else '_' for y in range(n)) for x, ch in zip(range(n), 'abcdefghijklmnopqrstuvwxyz')))(int(input())))\n5\n__a__\n_b_b_\nc___c\n_d_d_\n__e__\n&gt;&gt;&gt; print((lambda n : 'invalid' if n % 2 == 0 else '\\n'.join(''.join(ch if y in (abs(n // 2 - x), (n - 1) - abs(n // 2 - x)) else '_' for y in range(n)) for x, ch in zip(range(n), 'abcdefghijklmnopqrstuvwxyz')))(int(input())))\n2\ninvalid\n</code></pre></div></div>\n\n<hr>\n\n<p>Python3だけではさみしいのでSQLでも解答してみました。以下がその解答になります。<br>\n入力はバインド変数<code>:N</code>として1から25までの整数を与えます。動作確認にはPostgreSQL 10.5を利用していますが、言語依存の機能はさほど利用していないので、多少の読み替えなどはあったとしても、基本的にはほかのDBMSでも動く--はず(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">WITH</span> \n<span class=\"k\">RECURSIVE</span> <span class=\"n\">alphabets</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n    <span class=\"k\">SELECT</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">NULL</span><span class=\"p\">,</span> <span class=\"s1\">'abcdefghijklmnopqrstuvwxyz'</span>\n  <span class=\"k\">UNION</span> <span class=\"k\">ALL</span>\n    <span class=\"k\">SELECT</span>\n      <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"k\">SUBSTRING</span><span class=\"p\">(</span><span class=\"n\">list</span> <span class=\"k\">FROM</span> <span class=\"mi\">1</span> <span class=\"k\">FOR</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n      <span class=\"k\">SUBSTRING</span><span class=\"p\">(</span><span class=\"n\">list</span> <span class=\"k\">FROM</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"k\">FROM</span> <span class=\"n\">alphabets</span>\n    <span class=\"k\">WHERE</span> <span class=\"k\">LENGTH</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span>\n<span class=\"p\">),</span>\n<span class=\"k\">rows</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"k\">row</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n  <span class=\"k\">SELECT</span>\n    <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">,</span> \n    <span class=\"n\">STRING_AGG</span> <span class=\"p\">(</span>\n      <span class=\"k\">CASE</span> <span class=\"k\">WHEN</span> <span class=\"n\">a2</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"k\">IN</span> <span class=\"p\">(</span><span class=\"k\">ABS</span><span class=\"p\">(:</span><span class=\"n\">N</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"k\">ABS</span><span class=\"p\">(:</span><span class=\"n\">N</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"k\">ABS</span><span class=\"p\">(:</span><span class=\"n\">N</span> <span class=\"o\">/</span> <span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">x</span><span class=\"p\">)))</span> <span class=\"k\">THEN</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">alphabet</span> <span class=\"k\">ELSE</span> <span class=\"s1\">'_'</span> <span class=\"k\">END</span><span class=\"p\">,</span> \n      <span class=\"s1\">''</span> \n      <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">a2</span><span class=\"p\">.</span><span class=\"n\">x</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">alphabets</span> <span class=\"n\">a1</span> <span class=\"k\">CROSS</span> <span class=\"k\">JOIN</span> <span class=\"n\">alphabets</span> <span class=\"n\">a2</span>\n  <span class=\"k\">WHERE</span> <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"k\">AND</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"p\">:</span><span class=\"n\">N</span>\n  <span class=\"k\">AND</span>   <span class=\"mi\">0</span> <span class=\"o\">&lt;=</span> <span class=\"n\">a2</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"k\">AND</span> <span class=\"n\">a2</span><span class=\"p\">.</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"p\">:</span><span class=\"n\">N</span>\n  <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">a1</span><span class=\"p\">.</span><span class=\"n\">x</span>\n<span class=\"p\">)</span>\n<span class=\"k\">SELECT</span>\n  <span class=\"k\">CASE</span> <span class=\"k\">WHEN</span> <span class=\"p\">:</span><span class=\"n\">N</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span> <span class=\"k\">THEN</span> <span class=\"s1\">'invalid'</span> <span class=\"k\">ELSE</span> <span class=\"n\">STRING_AGG</span><span class=\"p\">(</span><span class=\"k\">row</span><span class=\"p\">,</span> <span class=\"n\">chr</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"k\">ORDER</span> <span class=\"k\">BY</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">END</span> <span class=\"k\">AS</span> <span class=\"n\">answer</span>\n<span class=\"k\">FROM</span> <span class=\"k\">rows</span>\n</code></pre></div></div>\n\n<p>このSQLをファイル<code>zunda.sql</code>に保存し、たとえば以下のようにして実行します。<code>psql</code>コマンドでは<code>-v</code>オプションを使って、バインド変数に値を設定することができるので、これを利用しています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ psql -d sandbox -U postgres -v N=24 -f zunda.sql\n answer\n---------\n invalid\n(1 row)\n\n$ psql -d sandbox -U postgres -v N=25 -f zunda.sql\n          answer\n---------------------------\n ____________a____________+\n ___________b_b___________+\n __________c___c__________+\n _________d_____d_________+\n ________e_______e________+\n _______f_________f_______+\n ______g___________g______+\n _____h_____________h_____+\n ____i_______________i____+\n ___j_________________j___+\n __k___________________k__+\n _l_____________________l_+\n m_______________________m+\n _n_____________________n_+\n __o___________________o__+\n ___p_________________p___+\n ____q_______________q____+\n _____r_____________r_____+\n ______s___________s______+\n _______t_________t_______+\n ________u_______u________+\n _________v_____v_________+\n __________w___w__________+\n ___________x_x___________+\n ____________y____________\n(1 row)\n</code></pre></div></div>\n","body":"もとねた: [ずんだの菱形アルファベット問題 Ruby編](https://qiita.com/tbpgr/items/0567699ba083158804ac)\n\nPython3で、まずは「ふつう」に回答してみました。もとねたでは実行時引数を読み込んでいましたが、以下の解答では標準入力の1行目をnとしています。\n\n```python\ndef draw(n):\n    if n % 2 == 0:\n        return 'invalid'\n    \n    mid = n // 2\n    matrix = [['_'] * n for _ in range(n)]\n    for x, alphabet in zip(range(n), 'abcdefghijklmnopqrstuvwxyz'):\n        y = abs(mid - x) - mid\n        matrix[x][mid + y] = matrix[x][mid - y] = alphabet\n    \n    return '\\n'.join(''.join(row) for row in matrix)\n\nif __name__ == '__main__':\n    n = int(input())\n    print(draw(n))\n```\n\n次はPython3の「ふつう」ではない解答、つまり1行野郎で解いたものが以下になります。これも「ふつう」の解答と同様に標準入力の1行目をnとします。\n\n```python\nprint((lambda n : 'invalid' if n % 2 == 0 else '\\n'.join(''.join(ch if y in (abs(n // 2 - x), (n - 1) - abs(n // 2 - x)) else '_' for y in range(n)) for x, ch in zip(range(n), 'abcdefghijklmnopqrstuvwxyz')))(int(input())))\n```\n\nたとえばPython3のREPLなどをつかって、上記の1行野郎を実行してみると、想定通りの結果が得られることがわかります。\n\n```\n$ python3\nPython 3.6.5 (default, Apr  1 2018, 05:46:30)\n[GCC 7.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> print((lambda n : 'invalid' if n % 2 == 0 else '\\n'.join(''.join(ch if y in (abs(n // 2 - x), (n - 1) - abs(n // 2 - x)) else '_' for y in range(n)) for x, ch in zip(range(n), 'abcdefghijklmnopqrstuvwxyz')))(int(input())))\n5\n__a__\n_b_b_\nc___c\n_d_d_\n__e__\n>>> print((lambda n : 'invalid' if n % 2 == 0 else '\\n'.join(''.join(ch if y in (abs(n // 2 - x), (n - 1) - abs(n // 2 - x)) else '_' for y in range(n)) for x, ch in zip(range(n), 'abcdefghijklmnopqrstuvwxyz')))(int(input())))\n2\ninvalid\n```\n\n***\n\nPython3だけではさみしいのでSQLでも解答してみました。以下がその解答になります。\n入力はバインド変数`:N`として1から25までの整数を与えます。動作確認にはPostgreSQL 10.5を利用していますが、言語依存の機能はさほど利用していないので、多少の読み替えなどはあったとしても、基本的にはほかのDBMSでも動く--はず(´・ω・｀)\n\n```sql\nWITH \nRECURSIVE alphabets(x, alphabet, list) AS (\n    SELECT -1, NULL, 'abcdefghijklmnopqrstuvwxyz'\n  UNION ALL\n    SELECT\n      x + 1,\n      SUBSTRING(list FROM 1 FOR 1),\n      SUBSTRING(list FROM 2)\n    FROM alphabets\n    WHERE LENGTH(list) > 0\n),\nrows(x, row) AS (\n  SELECT\n    a1.x, \n    STRING_AGG (\n      CASE WHEN a2.x IN (ABS(:N / 2 - a1.x), ABS(:N - 1 - ABS(:N / 2 - a1.x))) THEN a1.alphabet ELSE '_' END, \n      '' \n      ORDER BY a2.x\n    )\n  FROM alphabets a1 CROSS JOIN alphabets a2\n  WHERE 0 <= a1.x AND a1.x < :N\n  AND   0 <= a2.x AND a2.x < :N\n  GROUP BY a1.x\n)\nSELECT\n  CASE WHEN :N % 2 = 0 THEN 'invalid' ELSE STRING_AGG(row, chr(10) ORDER BY x) END AS answer\nFROM rows\n```\n\nこのSQLをファイル`zunda.sql`に保存し、たとえば以下のようにして実行します。`psql`コマンドでは`-v`オプションを使って、バインド変数に値を設定することができるので、これを利用しています。\n\n```\n$ psql -d sandbox -U postgres -v N=24 -f zunda.sql\n answer\n---------\n invalid\n(1 row)\n\n$ psql -d sandbox -U postgres -v N=25 -f zunda.sql\n          answer\n---------------------------\n ____________a____________+\n ___________b_b___________+\n __________c___c__________+\n _________d_____d_________+\n ________e_______e________+\n _______f_________f_______+\n ______g___________g______+\n _____h_____________h_____+\n ____i_______________i____+\n ___j_________________j___+\n __k___________________k__+\n _l_____________________l_+\n m_______________________m+\n _n_____________________n_+\n __o___________________o__+\n ___p_________________p___+\n ____q_______________q____+\n _____r_____________r_____+\n ______s___________s______+\n _______t_________t_______+\n ________u_______u________+\n _________v_____v_________+\n __________w___w__________+\n ___________x_x___________+\n ____________y____________\n(1 row)\n```\n","coediting":false,"comments_count":1,"created_at":"2018-11-06T23:40:38+09:00","group":null,"id":"532f7a48cf384b3f23bf","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"SQL","versions":[]},{"name":"Python3","versions":[]}],"title":"ずんだの菱形アルファベット問題 Python3 & SQL編","updated_at":"2018-11-06T23:40:38+09:00","url":"https://qiita.com/neko_the_shadow/items/532f7a48cf384b3f23bf","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":199,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}