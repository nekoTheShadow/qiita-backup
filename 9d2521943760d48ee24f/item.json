{"rendered_body":"<p>jspのカスタムタグを作成することがあったので、そのメモ――というよりサンプルです。ご査収ください(´・ω・｀)</p>\n\n<p>まずは要件定義から! サンプルということで簡単ですが、次のようにまとめてみました。</p>\n\n<ul>\n<li>データベースの検索結果をプルダウンとして表示する\n\n<ul>\n<li>ただしサンプルなので、データベースはモックとして実装する。</li>\n</ul>\n</li>\n<li>タグ名は<code>sample:select</code>。必須属性として<code>group</code>を持ち、これをキーにしてデータベースを検索する。</li>\n</ul>\n\n<h1>\n<span id=\"事前準備-dbアクセス層とservletを作成する\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99-db%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%B1%A4%E3%81%A8servlet%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>事前準備: DBアクセス層とServletを作成する。</h1>\n\n<p>DBの検索結果を表示するカスタムタグを作りたいということで、DBへのアクセスとその検索結果を示すクラスを作成します。またjspを表示するためのServletも必要となるので、これも作成します。以下がそのサンプルコードになりますが、<strong>package宣言、import宣言、GetterおよびSetterは冗長なため省略しています。</strong>ただしパッケージ構成については最初に示す、画像をもとに判断してもらえると幸いです(´・ω・｀)</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/174ab4d85a834bc72d350d3e82b1459466c77683/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353835392f65376634353733612d633035362d633039332d353764352d6566633365343936656136352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2Fe7f4573a-c056-c093-57d5-efc3e496ea65.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=3bc620d60e82701a07420d1e7bab5254\" alt=\"image\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105859/e7f4573a-c056-c093-57d5-efc3e496ea65.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2Fe7f4573a-c056-c093-57d5-efc3e496ea65.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=42ed12de705db08c419d1bd0fba74cf5 1x\" loading=\"lazy\"></a></p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">DB.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cm\">/**\n * データベースへのアクセス・クラス。ただしサンプルのためモック実装とする。\n */</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">DB</span> <span class=\"kd\">implements</span> <span class=\"nc\">Serializable</span> <span class=\"o\">{</span>    \n    <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Row</span><span class=\"o\">&gt;</span> <span class=\"n\">rows</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n     * コンストラクタ。インスタンスを生成するとともに、モックDBへの初期データ投入を行う。\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">DB</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group1\"</span><span class=\"o\">,</span> <span class=\"s\">\"A\"</span><span class=\"o\">,</span> <span class=\"s\">\"AAA\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group1\"</span><span class=\"o\">,</span> <span class=\"s\">\"B\"</span><span class=\"o\">,</span> <span class=\"s\">\"BBB\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group1\"</span><span class=\"o\">,</span> <span class=\"s\">\"C\"</span><span class=\"o\">,</span> <span class=\"s\">\"CCC\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group1\"</span><span class=\"o\">,</span> <span class=\"s\">\"D\"</span><span class=\"o\">,</span> <span class=\"s\">\"DDD\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group1\"</span><span class=\"o\">,</span> <span class=\"s\">\"E\"</span><span class=\"o\">,</span> <span class=\"s\">\"EEE\"</span><span class=\"o\">));</span>\n\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group2\"</span><span class=\"o\">,</span> <span class=\"s\">\"a\"</span><span class=\"o\">,</span> <span class=\"s\">\"あああ\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group2\"</span><span class=\"o\">,</span> <span class=\"s\">\"b\"</span><span class=\"o\">,</span> <span class=\"s\">\"いいい\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group2\"</span><span class=\"o\">,</span> <span class=\"s\">\"c\"</span><span class=\"o\">,</span> <span class=\"s\">\"ううう\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group2\"</span><span class=\"o\">,</span> <span class=\"s\">\"d\"</span><span class=\"o\">,</span> <span class=\"s\">\"えええ\"</span><span class=\"o\">));</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">rows</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"k\">new</span> <span class=\"nc\">Row</span><span class=\"o\">(</span><span class=\"s\">\"group2\"</span><span class=\"o\">,</span> <span class=\"s\">\"e\"</span><span class=\"o\">,</span> <span class=\"s\">\"おおお\"</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"cm\">/**\n     * groupをキーにDBを検索する。\n     * @param group groupカラムの値\n     * @return  検索結果\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Row</span><span class=\"o\">&gt;</span> <span class=\"nf\">select</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">group</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n                <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">-&gt;</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"na\">getGroup</span><span class=\"o\">().</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">group</span><span class=\"o\">))</span>\n                <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Row.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cm\">/**\n * com.sample.db.DBクラスが示すデータベースの行をしめすBeanクラス。\n */</span>\n<span class=\"kd\">final</span> <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Row</span> <span class=\"kd\">implements</span> <span class=\"nc\">Serializable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">group</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Row</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">group</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">group</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">SampleServlet.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cm\">/**\n * sample.jspを表示するためのサーブレット。\n */</span>\n<span class=\"nd\">@WebServlet</span><span class=\"o\">(</span><span class=\"s\">\"/sample\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">SampleServlet</span> <span class=\"kd\">extends</span> <span class=\"nc\">HttpServlet</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">protected</span> <span class=\"kt\">void</span> <span class=\"nf\">doGet</span><span class=\"o\">(</span><span class=\"nc\">HttpServletRequest</span> <span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"nc\">HttpServletResponse</span> <span class=\"n\">response</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">ServletException</span><span class=\"o\">,</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"nc\">RequestDispatcher</span> <span class=\"n\">dispatcher</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"na\">getRequestDispatcher</span><span class=\"o\">(</span><span class=\"s\">\"/WEB-INF/sample.jsp\"</span><span class=\"o\">);</span>\n        <span class=\"n\">dispatcher</span><span class=\"o\">.</span><span class=\"na\">forward</span><span class=\"o\">(</span><span class=\"n\">request</span><span class=\"o\">,</span> <span class=\"n\">response</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"タグハンドラを実装する\" class=\"fragment\"></span><a href=\"#%E3%82%BF%E3%82%B0%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>タグハンドラを実装する。</h1>\n\n<p>前提条件が整ったところで、カスタムタグに対応するJavaクラスであるタグハンドラを実装します。タグハンドラはインターフェイスである<code>javax.servlet.jsp.tagext.Tag</code>を実装することにより実現し、そのサンプルコードは以下の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Select.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Select</span> <span class=\"kd\">implements</span> <span class=\"nc\">Tag</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">Tag</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">PageContext</span> <span class=\"n\">pageContext</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">group</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">doStartTag</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">JspException</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nc\">Tag</span><span class=\"o\">.</span><span class=\"na\">SKIP_BODY</span><span class=\"o\">;</span> <span class=\"c1\">// このタグはBody要素を持たない。</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">doEndTag</span><span class=\"o\">()</span> <span class=\"kd\">throws</span> <span class=\"nc\">JspException</span> <span class=\"o\">{</span>\n        <span class=\"c1\">// groupをもとにDBを検索する。</span>\n        <span class=\"no\">DB</span> <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"no\">DB</span><span class=\"o\">();</span>\n        <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Row</span><span class=\"o\">&gt;</span> <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"na\">select</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">group</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// DBへの検索結果をもとにselectタグを動的に生成する。</span>\n        <span class=\"nc\">String</span> <span class=\"n\">select</span> <span class=\"o\">=</span> <span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">row</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"nc\">String</span> <span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"na\">getId</span><span class=\"o\">();</span>\n            <span class=\"nc\">String</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"na\">getName</span><span class=\"o\">();</span>\n\n            <span class=\"k\">return</span> <span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">format</span><span class=\"o\">(</span><span class=\"s\">\"&lt;option value=\\\"%s\\\"&gt;%s&lt;/option&gt;\"</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">name</span><span class=\"o\">);</span>\n        <span class=\"o\">}).</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,</span> <span class=\"s\">\"&lt;select&gt;\"</span><span class=\"o\">,</span> <span class=\"s\">\"&lt;/select&gt;\"</span><span class=\"o\">));</span>\n\n        <span class=\"c1\">// 生成したselectタグを動的に生成する。</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"nc\">JspWriter</span> <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">pageContext</span><span class=\"o\">.</span><span class=\"na\">getOut</span><span class=\"o\">();</span>\n            <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"na\">print</span><span class=\"o\">(</span><span class=\"n\">select</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">JspException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n       <span class=\"k\">return</span> <span class=\"nc\">Tag</span><span class=\"o\">.</span><span class=\"na\">EVAL_PAGE</span><span class=\"o\">;</span> \n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">release</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">Tag</span> <span class=\"nf\">getParent</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">parent</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setParent</span><span class=\"o\">(</span><span class=\"nc\">Tag</span> <span class=\"n\">parent</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">parent</span> <span class=\"o\">=</span> <span class=\"n\">parent</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setPageContext</span><span class=\"o\">(</span><span class=\"nc\">PageContext</span> <span class=\"n\">pageContext</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">pageContext</span> <span class=\"o\">=</span> <span class=\"n\">pageContext</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getGroup</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">group</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setGroup</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">group</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">group</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>なおここでの「はまりポイント」としては次の二つがありました。</p>\n\n<ul>\n<li>属性に対応するフィールドならびにGetterおよびSetterを実装する必要がある。\n\n<ul>\n<li>上記のサンプルでは<code>private String group;</code> <code>getGroup</code> <code>setGroup</code>がそれぞれ存在しないとうまくいかない。</li>\n</ul>\n</li>\n<li>\n<code>JSPWriter</code>は明示的に<code>close</code>しない。</li>\n</ul>\n\n<h1>\n<span id=\"tldファイルを準備する\" class=\"fragment\"></span><a href=\"#tld%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%BA%96%E5%82%99%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>tldファイルを準備する。</h1>\n\n<p>Javaの世界の住人であるタグハンドラが用意できたところで、タグハンドラとjspの世界の住人であるタグを結びつける必要があります。これを設定するのがtldファイルであり、そのサンプルを以下に示します。なお拡張子はtldですが、実態としてはxml形式です。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">sample.tld</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n\n<span class=\"nt\">&lt;taglib</span> \n    <span class=\"na\">xmlns=</span><span class=\"s\">\"http://java.sun.com/xml/ns/j2ee\"</span>\n    <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_0.xsd\"</span>\n    <span class=\"na\">version=</span><span class=\"s\">\"2.0\"</span><span class=\"nt\">&gt;</span>\n\n  <span class=\"nt\">&lt;tlib-version&gt;</span>1.0<span class=\"nt\">&lt;/tlib-version&gt;</span>\n  <span class=\"nt\">&lt;short-name&gt;</span>sample<span class=\"nt\">&lt;/short-name&gt;</span>\n\n  <span class=\"nt\">&lt;tag&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>select<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;tag-class&gt;</span>com.sample.tag.Select<span class=\"nt\">&lt;/tag-class&gt;</span>\n    <span class=\"nt\">&lt;body-content&gt;</span>empty<span class=\"nt\">&lt;/body-content&gt;</span>\n    <span class=\"nt\">&lt;attribute&gt;</span>\n        <span class=\"nt\">&lt;name&gt;</span>group<span class=\"nt\">&lt;/name&gt;</span>\n        <span class=\"nt\">&lt;required&gt;</span>true<span class=\"nt\">&lt;/required&gt;</span>\n    <span class=\"nt\">&lt;/attribute&gt;</span>\n  <span class=\"nt\">&lt;/tag&gt;</span>\n<span class=\"nt\">&lt;/taglib&gt;</span>\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"jspファイルを作成してデプロイする\" class=\"fragment\"></span><a href=\"#jsp%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%81%A6%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>jspファイルを作成してデプロイする。</h1>\n\n<p>あとは自作したタグを利用したjspファイルを作成し、サーバにアプリをデプロイします。</p>\n\n<div class=\"code-frame\" data-lang=\"jsp\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;%@page </span><span class=\"na\">contentType=</span><span class=\"s\">\"text/html\"</span><span class=\"na\"> pageEncoding=</span><span class=\"s\">\"UTF-8\"</span><span class=\"nt\">%&gt;</span>\n<span class=\"nt\">&lt;%@taglib </span><span class=\"na\">uri=</span><span class=\"s\">\"sample.tld\"</span><span class=\"na\"> prefix=</span><span class=\"s\">\"sample\"</span> <span class=\"nt\">%&gt;</span>\n\n<span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"Content-Type\"</span> <span class=\"na\">content=</span><span class=\"s\">\"text/html; charset=UTF-8\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;title&gt;</span>JSP Sample<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body&gt;</span>\n        <span class=\"nt\">&lt;h1&gt;</span>JSP Sample<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;p&gt;&lt;sample:select </span><span class=\"na\">group=</span><span class=\"s\">\"group1\"</span> <span class=\"nt\">/&gt;&lt;/p&gt;</span>\n        <span class=\"nt\">&lt;p&gt;&lt;sample:select </span><span class=\"na\">group=</span><span class=\"s\">\"group2\"</span> <span class=\"nt\">/&gt;&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<p>最後に結果確認としてWebブラウザなどで<code>/jsp/sample</code>にアクセスすると、次のようなソースコードにより表現されるWebページが表示されるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"html\"><div class=\"highlight\"><pre><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;meta</span> <span class=\"na\">http-equiv=</span><span class=\"s\">\"Content-Type\"</span> <span class=\"na\">content=</span><span class=\"s\">\"text/html; charset=UTF-8\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;title&gt;</span>JSP Sample<span class=\"nt\">&lt;/title&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body&gt;</span>\n        <span class=\"nt\">&lt;h1&gt;</span>JSP Sample<span class=\"nt\">&lt;/h1&gt;</span>\n        <span class=\"nt\">&lt;p&gt;</span>\n            <span class=\"nt\">&lt;select&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"A\"</span><span class=\"nt\">&gt;</span>AAA<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"B\"</span><span class=\"nt\">&gt;</span>BBB<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"C\"</span><span class=\"nt\">&gt;</span>CCC<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"D\"</span><span class=\"nt\">&gt;</span>DDD<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"E\"</span><span class=\"nt\">&gt;</span>EEE<span class=\"nt\">&lt;/option&gt;</span>\n            <span class=\"nt\">&lt;/select&gt;</span>\n        <span class=\"nt\">&lt;/p&gt;</span>\n        <span class=\"nt\">&lt;p&gt;</span>\n            <span class=\"nt\">&lt;select&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"a\"</span><span class=\"nt\">&gt;</span>あああ<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"b\"</span><span class=\"nt\">&gt;</span>いいい<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"c\"</span><span class=\"nt\">&gt;</span>ううう<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"d\"</span><span class=\"nt\">&gt;</span>えええ<span class=\"nt\">&lt;/option&gt;</span>\n                <span class=\"nt\">&lt;option</span> <span class=\"na\">value=</span><span class=\"s\">\"e\"</span><span class=\"nt\">&gt;</span>おおお<span class=\"nt\">&lt;/option&gt;</span>\n            <span class=\"nt\">&lt;/select&gt;</span>\n        <span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<p>おわり(｀・ω・´)ｼｬｷｰﾝ</p>\n","body":"\njspのカスタムタグを作成することがあったので、そのメモ――というよりサンプルです。ご査収ください(´・ω・｀)\n\nまずは要件定義から! サンプルということで簡単ですが、次のようにまとめてみました。\n\n- データベースの検索結果をプルダウンとして表示する\n    - ただしサンプルなので、データベースはモックとして実装する。\n- タグ名は`sample:select`。必須属性として`group`を持ち、これをキーにしてデータベースを検索する。\n\n# 事前準備: DBアクセス層とServletを作成する。\n\nDBの検索結果を表示するカスタムタグを作りたいということで、DBへのアクセスとその検索結果を示すクラスを作成します。またjspを表示するためのServletも必要となるので、これも作成します。以下がそのサンプルコードになりますが、__package宣言、import宣言、GetterおよびSetterは冗長なため省略しています。__ただしパッケージ構成については最初に示す、画像をもとに判断してもらえると幸いです(´・ω・｀)\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/105859/e7f4573a-c056-c093-57d5-efc3e496ea65.png)\n\n```java:DB.java\n/**\n * データベースへのアクセス・クラス。ただしサンプルのためモック実装とする。\n */\npublic class DB implements Serializable {    \n    private List<Row> rows;\n    \n    /**\n     * コンストラクタ。インスタンスを生成するとともに、モックDBへの初期データ投入を行う。\n     */\n    public DB() {\n        this.rows = new ArrayList<>();\n        \n        this.rows.add(new Row(\"group1\", \"A\", \"AAA\"));\n        this.rows.add(new Row(\"group1\", \"B\", \"BBB\"));\n        this.rows.add(new Row(\"group1\", \"C\", \"CCC\"));\n        this.rows.add(new Row(\"group1\", \"D\", \"DDD\"));\n        this.rows.add(new Row(\"group1\", \"E\", \"EEE\"));\n        \n        this.rows.add(new Row(\"group2\", \"a\", \"あああ\"));\n        this.rows.add(new Row(\"group2\", \"b\", \"いいい\"));\n        this.rows.add(new Row(\"group2\", \"c\", \"ううう\"));\n        this.rows.add(new Row(\"group2\", \"d\", \"えええ\"));\n        this.rows.add(new Row(\"group2\", \"e\", \"おおお\"));\n    }\n    \n    /**\n     * groupをキーにDBを検索する。\n     * @param group groupカラムの値\n     * @return  検索結果\n     */\n    public List<Row> select(String group) {\n        return rows.stream()\n                .filter(row -> row.getGroup().equals(group))\n                .collect(Collectors.toList());\n    }\n}\n```\n\n```java:Row.java\n/**\n * com.sample.db.DBクラスが示すデータベースの行をしめすBeanクラス。\n */\nfinal public class Row implements Serializable {\n    private String group;\n    private String id;\n    private String name;\n\n    public Row(String group, String id, String name) {\n        this.group = group;\n        this.id = id;\n        this.name = name;\n    }\n}\n```\n```java:SampleServlet.java\n/**\n * sample.jspを表示するためのサーブレット。\n */\n@WebServlet(\"/sample\")\npublic class SampleServlet extends HttpServlet {\n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        RequestDispatcher dispatcher = request.getRequestDispatcher(\"/WEB-INF/sample.jsp\");\n        dispatcher.forward(request, response);\n    }\n}\n```\n\n# タグハンドラを実装する。\n\n前提条件が整ったところで、カスタムタグに対応するJavaクラスであるタグハンドラを実装します。タグハンドラはインターフェイスである`javax.servlet.jsp.tagext.Tag`を実装することにより実現し、そのサンプルコードは以下の通りです。\n\n```java:Select.java\npublic class Select implements Tag {\n    \n    private Tag parent;\n    private PageContext pageContext;\n    private String group;\n    \n    @Override\n    public int doStartTag() throws JspException {\n        return Tag.SKIP_BODY; // このタグはBody要素を持たない。\n    }\n    \n    @Override\n    public int doEndTag() throws JspException {\n        // groupをもとにDBを検索する。\n        DB db = new DB();\n        List<Row> rows = db.select(this.group);\n        \n        // DBへの検索結果をもとにselectタグを動的に生成する。\n        String select = rows.stream().map(row -> {\n            String id = row.getId();\n            String name = row.getName();\n            \n            return String.format(\"<option value=\\\"%s\\\">%s</option>\", id, name);\n        }).collect(Collectors.joining(\"\", \"<select>\", \"</select>\"));\n        \n        // 生成したselectタグを動的に生成する。\n        try {\n            JspWriter out = this.pageContext.getOut();\n            out.print(select);\n        } catch (IOException e) {\n            throw new JspException(e);\n        }\n        \n       return Tag.EVAL_PAGE; \n    }\n    \n    @Override\n    public void release() {\n    }\n    \n    @Override\n    public Tag getParent() {\n        return this.parent;\n    }\n    \n    @Override\n    public void setParent(Tag parent) {\n        this.parent = parent;\n    }\n   \n    @Override\n    public void setPageContext(PageContext pageContext) {\n        this.pageContext = pageContext;\n    }\n\n    public String getGroup() {\n        return group;\n    }\n\n    public void setGroup(String group) {\n        this.group = group;\n    }\n}\n```\n\nなおここでの「はまりポイント」としては次の二つがありました。\n\n- 属性に対応するフィールドならびにGetterおよびSetterを実装する必要がある。\n    - 上記のサンプルでは`private String group;` `getGroup` `setGroup`がそれぞれ存在しないとうまくいかない。\n- `JSPWriter`は明示的に`close`しない。\n\n# tldファイルを準備する。\n\nJavaの世界の住人であるタグハンドラが用意できたところで、タグハンドラとjspの世界の住人であるタグを結びつける必要があります。これを設定するのがtldファイルであり、そのサンプルを以下に示します。なお拡張子はtldですが、実態としてはxml形式です。\n\n```xml:sample.tld\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<taglib \n    xmlns=\"http://java.sun.com/xml/ns/j2ee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_0.xsd\"\n    version=\"2.0\">\n\n  <tlib-version>1.0</tlib-version>\n  <short-name>sample</short-name>\n\n  <tag>\n    <name>select</name>\n    <tag-class>com.sample.tag.Select</tag-class>\n    <body-content>empty</body-content>\n    <attribute>\n        <name>group</name>\n        <required>true</required>\n    </attribute>\n  </tag>\n</taglib>\n```\n\n# jspファイルを作成してデプロイする。\n\nあとは自作したタグを利用したjspファイルを作成し、サーバにアプリをデプロイします。\n\n```jsp\n<%@page contentType=\"text/html\" pageEncoding=\"UTF-8\"%>\n<%@taglib uri=\"sample.tld\" prefix=\"sample\" %>\n\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <title>JSP Sample</title>\n    </head>\n    <body>\n        <h1>JSP Sample</h1>\n        <p><sample:select group=\"group1\" /></p>\n        <p><sample:select group=\"group2\" /></p>\n    </body>\n</html>\n```\n\n最後に結果確認としてWebブラウザなどで`/jsp/sample`にアクセスすると、次のようなソースコードにより表現されるWebページが表示されるはずです。\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n        <title>JSP Sample</title>\n    </head>\n    <body>\n        <h1>JSP Sample</h1>\n        <p>\n            <select>\n                <option value=\"A\">AAA</option>\n                <option value=\"B\">BBB</option>\n                <option value=\"C\">CCC</option>\n                <option value=\"D\">DDD</option>\n                <option value=\"E\">EEE</option>\n            </select>\n        </p>\n        <p>\n            <select>\n                <option value=\"a\">あああ</option>\n                <option value=\"b\">いいい</option>\n                <option value=\"c\">ううう</option>\n                <option value=\"d\">えええ</option>\n                <option value=\"e\">おおお</option>\n            </select>\n        </p>\n    </body>\n</html>\n```\n\nおわり(｀・ω・´)ｼｬｷｰﾝ\n","coediting":false,"comments_count":1,"created_at":"2017-05-07T13:25:07+09:00","group":null,"id":"9d2521943760d48ee24f","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"JSP","versions":[]}],"title":"JSPのカスタムタグを作成するサンプル","updated_at":"2017-05-07T13:25:07+09:00","url":"https://qiita.com/neko_the_shadow/items/9d2521943760d48ee24f","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":199,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}