<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Qiita Backup</title><link>https://nekotheshadow.github.io/qiita-backup/tags/java/</link><description>Recent content in Java on Qiita Backup</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 17 Aug 2023 22:38:40 +0900</lastBuildDate><atom:link href="https://nekotheshadow.github.io/qiita-backup/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>ソースコード上のクラスとメソッドを一覧化したい &amp; メソッドが呼び出しているメソッドを一覧化したい (Java Parser)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/32ba63800c6885d13dc7/</link><pubDate>Thu, 17 Aug 2023 22:38:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/32ba63800c6885d13dc7/</guid><description>お仕事の話ですが、次のような要求をJava Parserを用いて実現したので、メモとして残しておきます。 javaファイルに定義されているクラス</description></item><item><title>外部エンティティを含むxmlファイルを読み込みたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4325f57737c1f65eef62/</link><pubDate>Sun, 04 Jun 2023 00:33:26 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4325f57737c1f65eef62/</guid><description>結論 外部エンティティを含むxmlファイルを読み込む際、FileNotFoundExceptionが発生する場合はsystemIdにXMLファ</description></item><item><title>Javaで安全に一時ファイルを作成したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6cdf2376b5ad711d8eff/</link><pubDate>Wed, 10 May 2023 21:37:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6cdf2376b5ad711d8eff/</guid><description>はじめに ここ数日、コンビニ交付のシステムトラブルが世間をにぎわせています。 https://www3.nhk.or.jp/news/html/20230502/k10014056301000.html この記事にある川崎市のシステムを開発したベンダーからプレスリリー</description></item><item><title>メモリ消費量を抑えてxlsxファイルを読み込みたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/614b6fa0752d97ee0908/</link><pubDate>Mon, 02 Jan 2023 17:43:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/614b6fa0752d97ee0908/</guid><description>Apache POIを利用してxlsxファイルを読み込む方法として、インターネット上ではUser APIがよく紹介されています (HSSFWorkbookと</description></item><item><title>OUTPUT句の結果をJavaアプリケーション上で受け取りたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/52b80b2d54ba0690f68c/</link><pubDate>Mon, 18 Jul 2022 21:19:43 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/52b80b2d54ba0690f68c/</guid><description>SQLServerには削除したり更新したりしたデータを返すOUTPUT句というものがあります。OUTPUT句の結果をJavaアプリケーション</description></item><item><title>Doma2でMergeを利用する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6014faca49622832cec7/</link><pubDate>Fri, 06 May 2022 22:37:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6014faca49622832cec7/</guid><description>Doma2でMergeを利用することがあったので、メモとして残しておきます。 といってもそれほど難しいことはなく、まずはDaoインタフェースを</description></item><item><title>SQLServerの2100個問題のひとつの解決策として、テーブル値パラメーターを利用する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/00a119c8aa499792b6f3/</link><pubDate>Sat, 05 Feb 2022 14:59:57 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/00a119c8aa499792b6f3/</guid><description>useridを主キーとして、ユーザの情報を格納する、以下のようなテーブルがあるとします。 CREATE TABLE users ( userid INT NOT NULL PRIMARY KEY, username NVARCHAR(100) NOT NULL ); 複数のuseridがあ</description></item><item><title>Apache POIを使って列の幅の自動調整を行う</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2dcf0c8275317135733b/</link><pubDate>Tue, 23 Nov 2021 14:36:03 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2dcf0c8275317135733b/</guid><description>Excelの列の幅の自動調整に相当することをApache POIで実現したい場合、Sheet.autoSizeColumnを利用すると良いです</description></item><item><title>Apache POIを使ってセルにリンクを設定する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5ea378e90f618902fc18/</link><pubDate>Tue, 23 Nov 2021 14:34:27 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5ea378e90f618902fc18/</guid><description>Apache POIを使ってセルにリンクを設定する場合のサンプルを以下に示します。 Workbook workbook = ...; Cell cell = ...; // セルにハイパーリンクを設定する Hyperlink hyperlink = workbook.getCreationHelper().createHyperlink(HyperlinkType.DOCUMENT); hyperlink.setAddress(&amp;#34;destination!A1&amp;#34;); cell.setHyperlink(hyperlink); // セルに値</description></item><item><title>Apache POIを利用している際にA1形式でセルを取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/f3c9686fd9103f40b512/</link><pubDate>Sun, 31 Oct 2021 20:54:52 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/f3c9686fd9103f40b512/</guid><description>Excelではセルの位置を示すにあたって、A1形式を利用することが一般的だと思います。Apache POIを利用している際にA1形式でセルを取</description></item><item><title>Apache POIを使って、シートをソートしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b20f34c0a3cba56e14b9/</link><pubDate>Sun, 31 Oct 2021 20:33:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b20f34c0a3cba56e14b9/</guid><description>Excelにはシートをソートする機能は標準で用意されていません。通常はVBAを利用するのですが、VBAにはソート関数がなく、これを自前を用意</description></item><item><title>XSSF(xlsx)を扱う3種類の方法とメモリ消費量について</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ee737e9fb98dfb275b4/</link><pubDate>Sun, 03 Oct 2021 19:04:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ee737e9fb98dfb275b4/</guid><description>注意: 基本的にはこのあたりのドキュメントを読めばよい話ですが、自分用に簡単にまとめておきますね(´・ω・`) https://poi.apache.org/components/spreadsheet/ http://poi.apache.org/components/spreadsheet/how-to.html#xssf_sax_api JavaでExcelを操作す</description></item><item><title>Javaで経過日数を計算したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1c71f9949d17d932aaca/</link><pubDate>Sun, 01 Aug 2021 22:25:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1c71f9949d17d932aaca/</guid><description>Javaで経過日数を計算したい場合、もっともシンプルなのはLocalDateとChronoUnitを利用するものです。 public static long diff(LocalDate localDate1, LocalDate localDate2) { return ChronoUnit.DAYS.between(localDate1, localDate2);</description></item><item><title>文字列の出現回数を数えたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8c7da159e059f37f6ae2/</link><pubDate>Sun, 01 Aug 2021 21:45:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8c7da159e059f37f6ae2/</guid><description>特定の文字列の出現回数を数えたい場合、たとえばPythonだと $ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; &amp;#34;AABABAAAB&amp;#34;.count(&amp;#34;AB&amp;#34;) 3 というように、非常に簡単に書</description></item><item><title>正規表現にマッチした文字列すべてを取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1e1f39d77db97a04edff/</link><pubDate>Tue, 06 Jul 2021 22:44:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1e1f39d77db97a04edff/</guid><description>必要になるたびググって、そのたびに忘れている気がするので、自分用にメモしておきたいと思います。 正規表現にマッチした文字列すべてを取得したい場</description></item><item><title>10進数からN進数に変換する / N進数から10進数に変換する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d2852f086b2f4ad1042/</link><pubDate>Sun, 27 Jun 2021 16:52:11 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d2852f086b2f4ad1042/</guid><description>必要になるたびにググっている気がするので、ここらでまとめておきたいと思います。 まずN進数から10進数に変換する場合はInteger.pars</description></item><item><title>RowやCellをイテレータで処理する場合は未定義の行やセルに気を付ける</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8982cc5102421952a999/</link><pubDate>Sat, 22 May 2021 18:15:55 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8982cc5102421952a999/</guid><description>発生した問題 Apache POIを利用するシステム開発プロジェクトでは「指定したシートを読み込み、2次元配列に変換する」というようなAPIを作成すること</description></item><item><title>表示形式が設定された状態の値を取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5664d767816002218a23/</link><pubDate>Sat, 22 May 2021 17:27:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5664d767816002218a23/</guid><description>Excelにはセルの表示形式という機能があって、セルに同じデータを入力していても、セルの表示形式を変更することによって、任意の形式で表示する</description></item><item><title>関数を評価する前もしくは評価した後のセルの値が欲しい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/92c1d73c157a724d18bd/</link><pubDate>Sun, 16 May 2021 17:30:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/92c1d73c157a724d18bd/</guid><description>関数を評価した後の値が欲しい Apache POIでセルの値を取得する際、「セルに関数が含まれている場合は関数を評価した後の値が欲しい」とします。書き方は</description></item><item><title>Doma2で前方一致検索をしたい場合は@prefixを活用する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/63fe88b609e25beab3fb/</link><pubDate>Sun, 11 Apr 2021 13:55:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/63fe88b609e25beab3fb/</guid><description>自分がかかわっているシステム開発プロジェクトで、他のチームがこのことでえらく盛り上がっていたので、自分なりに調べた結果を残しておきたいと思い</description></item><item><title>Javaでファイルやディレクトリのタイムスタンプを変更したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/56f4fc6d5adec83fd342/</link><pubDate>Sat, 13 Feb 2021 11:41:16 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/56f4fc6d5adec83fd342/</guid><description>Javaでファイルやディレクトリのタイムスタンプを変更したい場合Files.setLastModifiedTimeを利用すると便利です。たと</description></item><item><title>Files.listやFiles.walkやFiles.findの戻り値であるStream&lt;Path>はクローズしないと、Too many open files が発生する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e2b37aef9f97c6978d20/</link><pubDate>Sun, 31 Jan 2021 17:55:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e2b37aef9f97c6978d20/</guid><description>Files.listやFiles.walkやFiles.findの戻り値であるStream&amp;lt;Path&amp;gt;はDirectoryStr</description></item><item><title>InputStreamをStringに変換したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7101490db65ecd657c47/</link><pubDate>Mon, 18 Jan 2021 20:36:00 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7101490db65ecd657c47/</guid><description>必要になるたびにぐぐるのに疲れたので自分用のメモとしておいておきますね(´・ω・｀) InputStreamをすべて読み込んでStringに変</description></item><item><title>プリミティブ型のソートでは最悪計算時間に注意する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a36d0e54e4d1636ed7a0/</link><pubDate>Sat, 05 Dec 2020 13:32:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a36d0e54e4d1636ed7a0/</guid><description>Java11にはさまざまなソートAPIが用意されていますが、ソートアルゴリズムとして、プリミティブ型のソートにはDual Pivot Quick Sortが、参照</description></item><item><title>UtilLoggingJdbcLoggerのログ出力設定を変更したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d2189340f26c25b1eed/</link><pubDate>Sat, 07 Nov 2020 17:49:08 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d2189340f26c25b1eed/</guid><description>1. java.util.logging.config.fileを利用する Doma2ではログ出力にJDBCLoggerインターフェースを利用し、</description></item><item><title>指定した文字列が、対象の文字コードにおいてサポートされているかを調べたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/f53ba312bad7b6dc2151/</link><pubDate>Sun, 11 Oct 2020 17:25:51 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/f53ba312bad7b6dc2151/</guid><description>指定した文字列が、対象の文字コードにおいてサポートされているかどうかを調べたい場合、CharsetEncoder.canEncode を利用す</description></item><item><title>対象の文字コードにない文字を書き込む際の挙動がFiles.writeとFiles.writeStringで異なる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/da4a77fe38b13b9be541/</link><pubDate>Sat, 03 Oct 2020 18:08:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/da4a77fe38b13b9be541/</guid><description>𩸽という漢字はユニコードのサロゲートペアの代表例としてプログラマにはよく知られていますが、この漢字はShift_JISには収録されていません</description></item><item><title>SXSSFWorkbookを利用する際の個人的な注意点 (行単位のアクセス単位は避けたほうが無難 / 既存のxlsxファイルで書き込み済みの行にはアクセスできない)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/3a70dc7b8236e93221e7/</link><pubDate>Sun, 30 Aug 2020 12:44:54 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/3a70dc7b8236e93221e7/</guid><description>概要 Apache POIでXSSFWorkbookを利用する場合、頭をもたげてくるのはメモリ問題。XSSFWorkbookは読み込んだデータや書き込んだ</description></item><item><title>[MyBatis] 1対多の関係にあるテーブルに対する照会クエリをネストされたBeanにマッピングしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/148fff2fec32bfa94097/</link><pubDate>Fri, 31 Jul 2020 20:55:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/148fff2fec32bfa94097/</guid><description>問題 JIRAやRedmineのようなバグトラッキングシステムを例とします。このシステムでは、トピックごとにプロジェクトを作成します。チケット</description></item><item><title>Db2を利用したJavaアプリケーションでERRORCODE=-4471が発生する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6f4497af7be702c01f4b/</link><pubDate>Sun, 31 May 2020 23:21:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6f4497af7be702c01f4b/</guid><description>環境 本記事を書くにあたって利用した主なソフトウェアのバージョンは次の通りです。 javac 11.0.4 openjdk version &amp;ldquo;11.0.4&amp;rdquo; 2019-07-16 IBM DB2 Developer-C Edition 11.5 (Docker/wsl2) IBM Data Server Driver for JDBC and SQLJ 4.26.14 事象 以下のコードはE</description></item><item><title>public static final Stringとして宣言された文字列定数が埋め込まれる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/55c5d1a53462b6d7918e/</link><pubDate>Sun, 12 Apr 2020 20:41:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/55c5d1a53462b6d7918e/</guid><description>事象 文字列定数(public static final String)ばかりが定義されたクラスConst.javaと、その定数を利用するMain.javaがあるとし</description></item><item><title>JDBCを利用する場合、NLSパラメータはJavaのロケールに影響される。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/baca14a933ddc9d3d562/</link><pubDate>Fri, 17 Jan 2020 01:06:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/baca14a933ddc9d3d562/</guid><description>実行環境 本記事を書くにあたって、利用した主なソフトウェアのバージョンは次の通りです。なおOracle Databaseの構築にあたってはDoc</description></item><item><title>Javaのスレッドの数や状態を確認するコマンド</title><link>https://nekotheshadow.github.io/qiita-backup/blog/59370e3daf88727c58db/</link><pubDate>Thu, 26 Dec 2019 00:50:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/59370e3daf88727c58db/</guid><description>Javaアプリケーションサーバの保守運用をしていると、現在起動しているスレッドの数や状況を知りたいということがあります。一般的なJavaアプ</description></item><item><title>executeBatchの戻り値の内容が11gと12cで異なる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6680ef630c7261b59fb1/</link><pubDate>Tue, 10 Dec 2019 22:10:13 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6680ef630c7261b59fb1/</guid><description>実行環境 本記事を書くにあたって、利用した主なソフトウェアのバージョンは次の通りです。なおOracle Databaseの構築にあたってはDoc</description></item><item><title>手元にあるjarファイルがどのバージョンのjavaで利用できるのかを調べたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/062cba5bf9e6baedd401/</link><pubDate>Wed, 27 Nov 2019 21:30:47 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/062cba5bf9e6baedd401/</guid><description>手元にあるjarファイルがどのバージョンのjavaで利用できるのかを調べるにはどうすればよいでしょうか? 実をいうと、jarファイルそのものは</description></item><item><title>n == 0がNullPointerExceptionをスローする。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d47cb03ac74e74bedd8/</link><pubDate>Mon, 11 Nov 2019 12:37:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d47cb03ac74e74bedd8/</guid><description>問題 突然ですが、次のコードはNullPointerExceptionになる可能性があります。どのような場合でしょうか? boolean iszero = n == 0; 答え 答えは</description></item><item><title>Javaでgzファイルを解凍するサンプル</title><link>https://nekotheshadow.github.io/qiita-backup/blog/dd4ce3f71388771c2bb7/</link><pubDate>Thu, 07 Nov 2019 23:30:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/dd4ce3f71388771c2bb7/</guid><description>サーバ上のgzの中身を確認する必要があるにも関わらず、手元のへっぽこWindows7 PCには7zipのようなgzに対応したソフトウェアがイン</description></item><item><title>-cpオプションにプロパティファイルのパスを指定したにも関わらず、クラスパスとして認識されない</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b0427409961299fb83f2/</link><pubDate>Sun, 06 Oct 2019 00:49:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b0427409961299fb83f2/</guid><description>環境 この記事は以下の環境で、稼働確認を実施しました。 C:\&amp;gt;java -version openjdk version &amp;#34;11.0.3&amp;#34; 2019-04-16 OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.3+7) OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.3+7, mixed mode) 事象 以下のMain.javaはクラスパス上に存</description></item><item><title>メイン・クラスが存在するにもかかわらず「エラー: メイン・クラスXXXが見つからなかったかロードできませんでした」が発生する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bfdb47c6f8934489dc42/</link><pubDate>Wed, 02 Oct 2019 22:14:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bfdb47c6f8934489dc42/</guid><description>事象 まず以下のようなChildクラスが存在するとします。 public class Child extends Parent { public static void main(String[] args) { System.out.println(&amp;#34;This class is `Child`&amp;#34;); } } これをchild.jarに格納し、Java8で実</description></item><item><title>Javaからバッチファイルを実行する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/697ad4d37de85ab0a6c5/</link><pubDate>Mon, 30 Sep 2019 00:11:38 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/697ad4d37de85ab0a6c5/</guid><description>注意: この記事は次の環境で確認を行いました。 Microsoft Windows 10 Pro Edition OpenJDK 11 Eclipse 2019-09 (Pleiades All in One) C:\sampleというフォルダにhelloworld.batが設置さ</description></item><item><title>PathMatcher::matchesでIllegalArgumentExceptionが発生する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bf53b5432363838e7c26/</link><pubDate>Sun, 15 Sep 2019 01:23:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bf53b5432363838e7c26/</guid><description>事象 いきなり個人的な事情で申し訳ないのですが、一連のファイルやディレクトリに対して、globを使ってフィルタリングしたいという場合、File</description></item><item><title>Pathを利用した状況で相対パスを求めたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2d77c0c310ffbede20f0/</link><pubDate>Sun, 05 May 2019 09:37:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2d77c0c310ffbede20f0/</guid><description>さほど頻度は高くないと思いますが、とあるパスを起点として、別のパスの相対パスを求めたいということがあります。Java7以降では、ファイル操作</description></item><item><title>JULを利用して、MyBatisが発行したSQLの実行ログを記録する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/96a4ab0c61f7b02d5545/</link><pubDate>Sun, 14 Apr 2019 15:31:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/96a4ab0c61f7b02d5545/</guid><description>はじめに 「java.util.logging(以降はJULと表記)を利用して、MyBatisが発行したSQLの実行ログを記録する」という、意</description></item><item><title>javacの警告が100個までしか出力されない。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/75ea8e714d07f2e101a1/</link><pubDate>Mon, 08 Apr 2019 22:25:44 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/75ea8e714d07f2e101a1/</guid><description>この記事は以下の環境で動作確認を行いました。ただし、ほかのバージョンやほかのベンダーでも通用する内容だとは思います(´・ω・｀) C:\jdk&amp;gt;java -version openjdk version &amp;#34;12&amp;#34; 2019-03-19</description></item><item><title>シクシク素数列 Advent Calendar 2018 Java編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/39eb449bf5794e43e235/</link><pubDate>Tue, 27 Nov 2018 21:10:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/39eb449bf5794e43e235/</guid><description>この記事は「シクシク素数列 Advent Calendar 2018」2日目になります。 詳細はアドベントカレンダーの該当ページを見ていただくとして、ざっくり問題内容をまと</description></item><item><title>WatchServiceで特定のファイルを監視したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7365c2d1f7338bfca191/</link><pubDate>Fri, 19 Oct 2018 00:07:58 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7365c2d1f7338bfca191/</guid><description>たとえばdir\file.txtが変更されたことをWatchServiceで検出したい場合、次のようなコードを書きたくなりますが、これは実行</description></item><item><title>ずんだの1桁足し算問題 Java11編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6320f9550c72fcd783eb/</link><pubDate>Sun, 07 Oct 2018 22:35:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6320f9550c72fcd783eb/</guid><description>tbpgrさんの「ずんだの1桁足し算問題 Ruby編」を2018年9月にリリースされたJava11で実装しました。 import java.util.stream.IntStream; public class Main { public static void main(String[] args) { IntStream.range(1, 10)</description></item><item><title>ずんだの縦読み問題 Java 12 Early-Access 版</title><link>https://nekotheshadow.github.io/qiita-backup/blog/67e96e613b7f06ddc5fc/</link><pubDate>Fri, 28 Sep 2018 00:39:09 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/67e96e613b7f06ddc5fc/</guid><description>元ネタ: ずんだの縦読み問題 ずんだの縦読み問題 php編 他言語ではヒアドキュメントなどと呼ばれる機能がJavaでは長らくサポートされておらず、ソ</description></item><item><title>Javaでrm -rfを実装する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e49851c1a044818ed2b6/</link><pubDate>Thu, 06 Sep 2018 22:47:59 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e49851c1a044818ed2b6/</guid><description>ディレクトリを再帰的に削除する処理、要するにrm -rfと同等の処理をJavaで実装する機会があったので、メモを残しておきます(´・ω・｀) 今</description></item><item><title>Javaでzipファイルを解凍する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6e0504a3304e375b39b0/</link><pubDate>Fri, 24 Aug 2018 23:38:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6e0504a3304e375b39b0/</guid><description>Javaでzipファイルを解凍する機会があったため、そのときの技術メモになります(´・ω・｀) まずは次の手順でzipに格納する3つのファイル</description></item><item><title>JavaでファイルのMD5チェックサムを求めて、その結果を16進数表記の文字列として取得したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/dac1e22115542751df85/</link><pubDate>Wed, 01 Aug 2018 21:47:03 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/dac1e22115542751df85/</guid><description>掲題の通り「JavaでファイルのMD5チェックサムを求めて、その結果を16進数表記の文字列として取得したい」という機会があり、四苦八苦して実</description></item><item><title>JPA(Hibernate)の利用時にmainメソッドの最終行まで行きついても、Javaアプリケーションが終了しない。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/16255e7f36a6b355121d/</link><pubDate>Mon, 23 Jul 2018 22:45:20 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/16255e7f36a6b355121d/</guid><description>前提として、Hibernateのversionは5.3.3。pom.xmlのdependenciesは次のようになります。 &amp;lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.3.3.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--</description></item><item><title>StreamでGroup By処理を行いたい(group-by-count, group-by-sum, group-by-max)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b759028d3609a11072e0/</link><pubDate>Thu, 12 Jul 2018 21:24:10 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b759028d3609a11072e0/</guid><description>たとえば、ユーザとそのユーザが支払った金額が以下のような形で与えられるとします。 public class Payment { public static void main(String[] args) { var payments = List.of( new Payment(&amp;#34;A&amp;#34;, 10), new Payment(&amp;#34;B&amp;#34;, 20), new Payment(&amp;#34;B&amp;#34;, 30), new Payment(&amp;#34;C&amp;#34;, 40), new Payment(&amp;#34;C&amp;#34;, 50), new</description></item><item><title>zipファイルの中身とその圧縮前のサイズの一覧を取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/992378f37f977331581a/</link><pubDate>Wed, 20 Jun 2018 23:23:51 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/992378f37f977331581a/</guid><description>zipファイルの中身とその圧縮前のサイズの一覧を取得する&amp;ndash;という、この世界でどれだけ需要があるかわからない処理を実装する機会があ</description></item><item><title>Javaで標準入力を読み込む</title><link>https://nekotheshadow.github.io/qiita-backup/blog/781253880295a9541456/</link><pubDate>Sat, 26 May 2018 10:30:45 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/781253880295a9541456/</guid><description>この記事は「ベストプラクティスを自らしめす」というよりは、「ベストプラクティスがよくわからんので、とりあえずQiitaに書いておけば、詳しい</description></item><item><title>文字列の繰り返しをシンプルに書きたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/78ad73e86f45e4994a89/</link><pubDate>Sun, 13 May 2018 21:40:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/78ad73e86f45e4994a89/</guid><description>def repeat(str, n): return str * n 文字列の内容をn回だけ繰り返した新しい文字列を生成したいという場合、Pythonでは上の例のように書くことができます。つまり*</description></item><item><title>log4j#FileAppenderでログファイルの生成/オープンをフックしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/32de8d967330c46ee393/</link><pubDate>Sun, 11 Feb 2018 15:12:01 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/32de8d967330c46ee393/</guid><description>需要あるのかしらん(´・ω・｀) FileAppenderにおいてログファイルが生成あるいはopenされるタイミングをフックしたい場合、Fil</description></item><item><title>CellTypeを問わず、Cellの値を透過的に取得したい(Apache POI)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2b41b05fb0440ca8410e/</link><pubDate>Sun, 09 Jul 2017 23:55:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2b41b05fb0440ca8410e/</guid><description>Excel大好き日本企業にシステムを納めるJava大好きSIerとして働いている以上、避けては通れないのがApache POI。POIはExc</description></item><item><title>enumを利用したSingleton実装のサンプルコード</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1879e8a8e6aec0e86845/</link><pubDate>Mon, 05 Jun 2017 00:26:34 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1879e8a8e6aec0e86845/</guid><description>Javaプログラミングの古典のひとつ『Effective Java』ではSingleton実現にあたってenumを利用することが推奨されていま</description></item><item><title>Integer#parseIntを利用せずに文字列がintに変換できるかどうかを検査する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5c5940b24d83edb78d16/</link><pubDate>Mon, 15 May 2017 23:34:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5c5940b24d83edb78d16/</guid><description>「入力された文字列がint型に変換されるかどうかをチェックしたい」という場合、次のように判定しているソースコードを見かけることがあります。 try</description></item><item><title>リフレクションを利用してmainメソッドを呼び出したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bbca2c6387cf25de251e/</link><pubDate>Sun, 14 May 2017 21:12:48 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bbca2c6387cf25de251e/</guid><description>たとえばコマンドラインツールを開発していると、mainメソッドをテストしたりデバッグしたりしたいということがあります。そのような場合リフレク</description></item><item><title>JSPのカスタムタグを作成するサンプル</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9d2521943760d48ee24f/</link><pubDate>Sun, 07 May 2017 13:25:07 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9d2521943760d48ee24f/</guid><description>jspのカスタムタグを作成することがあったので、そのメモ――というよりサンプルです。ご査収ください(´・ω・｀) まずは要件定義から! サンプル</description></item><item><title>[リフレクション]メソッドがstaticかどうかを判定するにはModifier#isStaticを利用する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/47858d63e322693630fc/</link><pubDate>Tue, 02 May 2017 00:38:59 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/47858d63e322693630fc/</guid><description>Javaプログラミングにおいて、少しばかり複雑なことをしようとすると、必ず頭をもたげてくるのがリフレクション。リフレクションを利用し、とある</description></item><item><title>staticフィールドを@Autowiredの対象にしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/d61917e8bcf8088a895f/</link><pubDate>Thu, 13 Apr 2017 23:10:41 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/d61917e8bcf8088a895f/</guid><description>とりわけユーティリティクラスの設計に際して、staticフィールドを@Autowiredの対象にしたい場面があります。この場合は対象のsta</description></item><item><title>プレミアムフライデーを求めるメソッドを作った</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ebf94a8a6d9282e7207/</link><pubDate>Sun, 26 Feb 2017 22:08:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ebf94a8a6d9282e7207/</guid><description>2017年2月24日金曜日から始まったプレミアムフライデー。賛否両論激しいシステムですが、何がともあれ休みが増えることはよいことですね。みな</description></item><item><title>パッケージ配下のクラス一覧を再帰的に探索したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c46b7811f56f22e6588a/</link><pubDate>Sun, 26 Feb 2017 01:33:56 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c46b7811f56f22e6588a/</guid><description>しがないSIerのシステムエンジニアとして日銭を稼ぐ毎日を送っているのですが、「作成したJavaクラスをパッケージ名を付与して一覧化する」と</description></item><item><title>とあるクラスのスーパークラスとインターフェイスを再帰的に取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/eb28da0f3514bc8373d3/</link><pubDate>Sat, 25 Feb 2017 23:22:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/eb28da0f3514bc8373d3/</guid><description>プログラム設計書を書く――というかソースコードからプログラム設計書を起こす機会があったのですが、その設計書が「作成したJavaクラスに親クラ</description></item><item><title>特定のディレクトリの下にあるファイルを再帰的に探索したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0bcee7643144dccb137d/</link><pubDate>Wed, 28 Dec 2016 23:55:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0bcee7643144dccb137d/</guid><description>とあるディレクトリの下にあるファイルを再帰的に探索する必要が最近ありました。Javaの標準apiにそのような機能が用意されていると思いきや、</description></item><item><title>エクセルをダウンロードするサーブレットのサンプル。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7f3d32be19aae3517a1c/</link><pubDate>Sun, 25 Dec 2016 22:36:13 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7f3d32be19aae3517a1c/</guid><description>エクセルがダウンロードできるサーブレットを作成する機会があり、なかなかにはまったので、そのサンプルを残しておきたいと思います。なおJavaか</description></item><item><title>Servletの中で@Autowiredを利用したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c82a90459e11a940cc5f/</link><pubDate>Tue, 20 Dec 2016 23:33:28 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c82a90459e11a940cc5f/</guid><description>Webアプリケーション構築にあたっては原則として「単一言語/単一フレームワーク」であるべきだとは思いますが、現実としてそれが許されない場合も</description></item><item><title>MyBatis-Springでプログラム的にトランザクション管理をする</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2770036dae7436ca18a4/</link><pubDate>Sat, 08 Oct 2016 23:30:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2770036dae7436ca18a4/</guid><description>残業続きでとても眠いので、ごく簡単に済ませたいと思います。誤字脱字は許してね(´・ω・`) やりたいことはタイトルの通り。MyBatis-Sp</description></item><item><title>@RequestBodyと@Validの両方を利用時に"The request sent by the client was syntactically incorrect"が出る</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c35dc31d9f4b3c453fb1/</link><pubDate>Sat, 10 Sep 2016 23:39:03 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c35dc31d9f4b3c453fb1/</guid><description>残業続きで眠いです……。誤字脱字は勘弁してね(´・ω・`) クライアントからPOSTされたJSONを受け取って、JSONを返すようなコントロー</description></item></channel></rss>