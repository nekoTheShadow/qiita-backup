<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Qiita Backup</title><link>https://nekotheshadow.github.io/qiita-backup/tags/go/</link><description>Recent content in Go on Qiita Backup</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 24 Apr 2023 23:44:15 +0900</lastBuildDate><atom:link href="https://nekotheshadow.github.io/qiita-backup/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go言語でgzipファイルを解凍したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/899a4f5a9642c1154176/</link><pubDate>Mon, 24 Apr 2023 23:44:15 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/899a4f5a9642c1154176/</guid><description>Go言語では標準ライブラリだけで、gzipファイルを解凍することができます。 以下は./access.log.gzファイルを解凍し、./acc</description></item><item><title>log.Fatalはメッセージ出力後に終了ステータス1としてプログラムを終了しようとする</title><link>https://nekotheshadow.github.io/qiita-backup/blog/70642e57723d42b8514c/</link><pubDate>Sun, 15 Nov 2020 21:08:20 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/70642e57723d42b8514c/</guid><description>結論: APIを利用する場合はきちんとドキュメントを読みましょう(´・ω・`) go言語のlog.Fatal、log.Fatalfおよびlog.</description></item><item><title>goreleaserをGithub Actionsで利用するまでのQuick Start</title><link>https://nekotheshadow.github.io/qiita-backup/blog/52a1e7320c29275d5580/</link><pubDate>Thu, 10 Sep 2020 23:40:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/52a1e7320c29275d5580/</guid><description>goreleaserは、Goプロジェクトをビルドして、各OS向けの実行可能バイナリやDocker Imageを作成し、GithubのRelea</description></item><item><title>Open状態のファイルに対して、Linuxだとos.Renameに成功するが、Windowsだとエラーになる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2bef3358d82cbcea0512/</link><pubDate>Sun, 01 Mar 2020 15:25:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2bef3358d82cbcea0512/</guid><description>環境情報 この記事は以下の環境で稼働確認を実施しました。 Windows Microsoft Windows [Version 10.0.19041.84] go version go1.13.5 windows/amd64 Linux Ubuntu 18.04 LTS (Bionic Beaver) go version go1.13.8 linux/amd64 事象 Open状態のファイルに対して、os.Ren</description></item><item><title>flagパッケージを利用しているときに、オプションの値をスライスで受け取りたい / 同じオプションを複数回指定し、その値をすべてスライスに詰めたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/49fdc992d2d3c5af03d2/</link><pubDate>Mon, 10 Feb 2020 00:17:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/49fdc992d2d3c5af03d2/</guid><description>Go言語のflagパッケージを利用して、コマンドラインツールを作成していると、オプションの値をSliceで受け取りたい場合があります。たとえ</description></item><item><title>Pythonのbisect_leftとbisect_rightをGo言語でも使いたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6a722857995e35b06fa1/</link><pubDate>Sun, 09 Feb 2020 23:24:11 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6a722857995e35b06fa1/</guid><description>Python3にはbisectというモジュールがあり、この中にはbisect_left、bisect_rightという関数が用意されています</description></item><item><title>time.Time型のSliceを昇順ソートしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9dc6e479e76918e6f8a8/</link><pubDate>Wed, 08 Jan 2020 21:20:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9dc6e479e76918e6f8a8/</guid><description>time.Time型のSliceを昇順ソートするにはどのようにすればよいでしょうか? まずGoのバージョンが1.8以降の場合はsort.Sli</description></item></channel></rss>