<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ruby on Qiita Backup</title><link>https://nekotheshadow.github.io/qiita-backup/tags/ruby/</link><description>Recent content in Ruby on Qiita Backup</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Thu, 17 Sep 2020 18:47:53 +0900</lastBuildDate><atom:link href="https://nekotheshadow.github.io/qiita-backup/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>RMagickを導入して、既存の既存の画像ファイルを別のフォーマットに変換する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a38c9a055590b2c61497/</link><pubDate>Thu, 17 Sep 2020 18:47:53 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a38c9a055590b2c61497/</guid><description>問題 すでにRMagickが導入されている環境において、既存の画像ファイルを別のフォーマットに変換したい場合は、どのようにすれば良いでしょうか</description></item><item><title>Rubyを利用して、インターネット上のファイルをダウンロードし、ローカルに保存したい (注意点あり)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/747372d3cc62802550da/</link><pubDate>Thu, 17 Sep 2020 13:18:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/747372d3cc62802550da/</guid><description>課題 Rubyを利用して、インターネット上のファイルをダウンロードし、ローカルに保存したい場合はどのようにすればよいでしょうか? 解決策 まずはテ</description></item><item><title>rbenv install 2.7.1が「no acceptable C compiler found in $PATH」「cannot load such file」により失敗する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/39e4048a4c19343d0b97/</link><pubDate>Sun, 05 Jul 2020 17:19:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/39e4048a4c19343d0b97/</guid><description>環境 rbenv 1.1.2-30-gc879cb0 ruby-build 20200520-12-g69ccbf4 Ubuntu 20.04 LTS (Focal Fossa) [Windows Subsystem for Linux 2; WSL2] 前提 rbenvおよびruby-buildの導入が完了し、rbenv-doctor scriptによる検証がO</description></item><item><title>標準出力がコンソールか別のコマンドかによって、バッファリングやフラッシュの規則が異なる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ada1a17a509e1e0314f/</link><pubDate>Sun, 05 Jul 2020 17:01:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ada1a17a509e1e0314f/</guid><description>環境 ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux] Ubuntu 20.04 LTS (Focal Fossa) [Windows Subsystem for Linux 2; WSL2] 事象 Rubyで標準出力を利用する場合、標準出力の先がコンソールか別のコマンドかによって、バッファリング</description></item><item><title>Solargraphをインストールしたにもかかわらず、拡張機能「Ruby Solargraph」が「gem install solargraph」エラーになる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/87bb06cb73b01177a851/</link><pubDate>Sat, 29 Jun 2019 23:10:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/87bb06cb73b01177a851/</guid><description>Solargraphをgem installしているにもかかわらず、vscodeの拡張機能であるRuby Solargraph が以下のようなエラーを表示することが</description></item><item><title>TECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽しく学ぼう！」掲載のアルゴリズム問題を解きました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6c39cbade45d5b38fbb5/</link><pubDate>Sun, 15 Jul 2018 21:48:00 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6c39cbade45d5b38fbb5/</guid><description>タイトルが長い(´・ω・｀) ただこう書くほかない(´・ω・｀) 掲題の通りTECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽し</description></item><item><title>CodeIQ「『タワー・ビルディング』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1d3946ae8934296f5a56/</link><pubDate>Thu, 04 Jan 2018 21:59:15 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1d3946ae8934296f5a56/</guid><description>CodeIQ「『タワー・ビルディング』問題」の公開期間が終了したということで、提出回答(Ruby)を共有したいと思います(´・ω・｀) 詳しい</description></item><item><title>AWKで素数列挙(エラトステネスのふるい・疑似素数による試し割り)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0f1ac17986f1122b1b13/</link><pubDate>Thu, 23 Nov 2017 20:12:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0f1ac17986f1122b1b13/</guid><description>需要あるのかしら(´・ω・｀) まずはエラトステネスのふるい。 BEGIN { upper_bound = 100 for (i = 2; i &amp;lt;= upper_bound; i++) is_prime[i] = 1; for (i = 2; i &amp;lt;= sqrt(upper_bound); i++) { if (!is_prime[i]) continue; for (j = i * 2; j &amp;lt;= upper_bound; j += i)</description></item><item><title>ファイル読み込みの際に文字コード関係の例外が発生する場合(File#openの引数にはString#encodeのオプションが利用できる)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b81289697d00efc5f12a/</link><pubDate>Fri, 11 Aug 2017 01:38:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b81289697d00efc5f12a/</guid><description>File.open(&amp;#34;sample.rb&amp;#34;, &amp;#34;r&amp;#34;, :encoding =&amp;gt; Encoding::CP932) do |file| file.each_line do |line| do_something(line) end end ファイル読み込み処理を行うと、頻繁に出くわすのがエンコード関係の例外。Encoding::InvalidByteS</description></item><item><title>「配列の要素のうち、条件に一致する最初の要素の位置」をワンライナーで求めたい(Python3)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/76e517efbb510f735782/</link><pubDate>Tue, 07 Mar 2017 01:13:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/76e517efbb510f735782/</guid><description>numbers = [3, 5, 4, 2, 1] numbers.index{|val| val % 2 == 0} #=&amp;gt; 2 配列の要素を先頭から見ていき、条件に一致する最初の要素の位置がほしいということがよくあります。例として整数が格</description></item><item><title>CodeIQ「『キャリー・オーバー』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/dd98aa7669e8aadc4cbf/</link><pubDate>Tue, 24 Jan 2017 23:27:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/dd98aa7669e8aadc4cbf/</guid><description>CodeIQ「『キャリー・オーバー』問題」の掲載期間が終わったということで、自分の提出コードを公開します。なおほかの方の解答はTogette</description></item><item><title>SQLでFizzBuzzを書いた</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b1a946baadaeee92c7ca/</link><pubDate>Thu, 05 Jan 2017 23:47:34 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b1a946baadaeee92c7ca/</guid><description>使い古されたねたではありますが、プログラミングクイズとしてもっとも有名な問題のひとつである「FizzBuzz」をSQLで解いてみました。動作</description></item><item><title>クリスマスツリーのアスキーアートを生成するRubyスクリプトを書いた</title><link>https://nekotheshadow.github.io/qiita-backup/blog/428f6209bedd5ef23503/</link><pubDate>Sat, 24 Dec 2016 23:07:57 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/428f6209bedd5ef23503/</guid><description>一人暮らしのワンルームアパートでYouTubeを見ながら、コンビニ弁当をつつくという、日本でもっとも文化的なクリスマスイブの過ごし方をしてい</description></item><item><title>ループ中にdefaultdictの未定義領域にアクセスすると例外</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2d9ab4d77d0d56e5a9a7/</link><pubDate>Tue, 13 Dec 2016 00:10:54 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2d9ab4d77d0d56e5a9a7/</guid><description>突然ですが次のコードは例外をスローします。なぜでしょうか? import collections ht = collections.defaultdict(int) ht[0] = ht[1] = 1 x = 2 for ky in ht: if ht[ky + 1] == 0: do_something() #=&amp;gt; RuntimeError: dictionary changed size during iteration Python3ではル</description></item><item><title>gsubでマッチした部分を置き換え文字の生成に利用したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4693cf0ec0847d2130d6/</link><pubDate>Sat, 19 Nov 2016 01:49:43 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4693cf0ec0847d2130d6/</guid><description>gsub(pattern, replace)はpatternにマッチする部分をすべてreplaceに置き換えてくれる便利メソッドです。patternとして正規表現、r</description></item><item><title>reduce/injectで処理を中断するにはbreakを使う(+三項演算子の話)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/73edfc6c3a3083a67156/</link><pubDate>Sun, 25 Sep 2016 20:25:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/73edfc6c3a3083a67156/</guid><description>注意: Rubyのバージョンは2.3.0です。それ以前のバージョンあるいはそれ以後のバージョンでは挙動が変化している可能性があります。 redu</description></item><item><title>String#slice!(nth)はIntegerではなく、Stringを返す。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0ac786baf985f53faa90/</link><pubDate>Mon, 19 Sep 2016 11:07:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0ac786baf985f53faa90/</guid><description>注意: この記事は2016/09/19現在のものです。またRubyのversionは2.3.0です。 String#slice!は文字列を破壊的</description></item><item><title>CodeIQ「『プライム・ホッパー』問題」に挑戦しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/48dc34145361829e22d4/</link><pubDate>Sat, 06 Aug 2016 00:28:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/48dc34145361829e22d4/</guid><description>CodeIQ「『プライム・ホッパー』問題」の掲載期間が終わったということで、自分の提出コードを公開します(´・ω・`) require &amp;#34;prime&amp;#34; # 問題のF(p, q)</description></item><item><title>CodeIQ「『アフター・ドット』問題」に参加しました</title><link>https://nekotheshadow.github.io/qiita-backup/blog/27513e31e5ab43484a74/</link><pubDate>Thu, 07 Jul 2016 23:13:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/27513e31e5ab43484a74/</guid><description>CodeIQ「『アフター・ドット』問題」の掲載期限が終了したということで、提出コードを公開したいと思います。なお詳しい内容については、広大な</description></item><item><title>CodeIQ「『ディビジョン・ナイン』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a2aa22bc25c8a3e51da4/</link><pubDate>Thu, 07 Apr 2016 20:47:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a2aa22bc25c8a3e51da4/</guid><description>どうでもいいですが、この4月から社会人になりました。毎日5時半に起床、夢の国に向かう電車に揺られて職場まで通っております。研修にもかかわらず</description></item><item><title>CodeIQ「『ロング・ロング・ストリング』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9af5b0ddbcc29b5f3206/</link><pubDate>Thu, 10 Mar 2016 23:57:27 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9af5b0ddbcc29b5f3206/</guid><description>CodeIQ「『ロング・ロング・ストリング』問題」の掲載期間が終了したということで、自分が提出したコードを公開したいと思います。なお他の方の</description></item><item><title>CodeIQ「『プラス・マイナス・ゼロ』問題」に挑戦しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/704fd870ccba05e2ae94/</link><pubDate>Thu, 18 Feb 2016 13:05:16 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/704fd870ccba05e2ae94/</guid><description>CodeIQ「『プラス・マイナス・ゼロ』問題」の掲載期間が終了したということで、わたしが提出したRubyコードを公開したいと思います。 @n = gets.to_i</description></item><item><title>CodeIQ「『ルート・パワー』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5f44222639f44d55310a/</link><pubDate>Thu, 24 Dec 2015 11:25:07 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5f44222639f44d55310a/</guid><description>「『ルート・パワー』問題」とは CodeIQ「『ルート・パワー』問題」の掲載期間が終わり、提出コードを公開してよいとのことなので、その流れに乗</description></item><item><title>CodeIQ「マヨイドーロ問題」に参加しました</title><link>https://nekotheshadow.github.io/qiita-backup/blog/cf0a9d3e949335916b74/</link><pubDate>Thu, 17 Dec 2015 18:11:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/cf0a9d3e949335916b74/</guid><description>「マヨイドーロ問題」とは タイトルの通りですが、CodeIQ「マヨイドーロ問題」の解答期限が過ぎたということで、提出コードを公開してみたいと思</description></item><item><title>RubyのPrimeライブラリを利用する際に注意したいこと</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6567ac7b4d1dc56095d2/</link><pubDate>Wed, 16 Dec 2015 22:59:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6567ac7b4d1dc56095d2/</guid><description>_以下の内容はRuby2.2.3/Windows10で検証したものです。したがって違うバージョンやOSではまったく違う挙動を示す可能性があり</description></item></channel></rss>