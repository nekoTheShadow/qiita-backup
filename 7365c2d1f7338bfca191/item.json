{"rendered_body":"<p>たとえば<code>dir\\file.txt</code>が変更されたことを<code>WatchService</code>で検出したい場合、次のようなコードを書きたくなりますが、これは実行時例外(<code>NotDirectoryException</code>)が発生します。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"dir\"</span><span class=\"o\">,</span> <span class=\"s\">\"file.txt\"</span><span class=\"o\">);</span>\n<span class=\"kt\">var</span> <span class=\"n\">watcher</span> <span class=\"o\">=</span> <span class=\"nc\">FileSystems</span><span class=\"o\">.</span><span class=\"na\">getDefault</span><span class=\"o\">().</span><span class=\"na\">newWatchService</span><span class=\"o\">();</span>\n<span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"n\">watcher</span><span class=\"o\">,</span> <span class=\"nc\">StandardWatchEventKinds</span><span class=\"o\">.</span><span class=\"na\">ENTRY_MODIFY</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p><a href=\"https://docs.oracle.com/javase/jp/8/docs/api/java/nio/file/Path.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-\" rel=\"nofollow noopener\" target=\"_blank\"><code>Path::register</code>のJavaDoc</a>にもある通り、<code>WatchService</code>の登録対象はディレクトリです。あるいは<code>WatchService</code>は登録したディレクトリの配下にあるファイルやディレクトリに発生したイベントを監視している、と言い換えてもいいでしょう。よって特定のファイルのイベントだけを検出したい場合は、たとえば次のような工夫が必要になります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"dir\"</span><span class=\"o\">,</span> <span class=\"s\">\"file.txt\"</span><span class=\"o\">);</span>\n<span class=\"kt\">var</span> <span class=\"n\">directory</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">getParent</span><span class=\"o\">();</span>\n<span class=\"kt\">var</span> <span class=\"n\">watcher</span> <span class=\"o\">=</span> <span class=\"nc\">FileSystems</span><span class=\"o\">.</span><span class=\"na\">getDefault</span><span class=\"o\">().</span><span class=\"na\">newWatchService</span><span class=\"o\">();</span>\n<span class=\"n\">directory</span><span class=\"o\">.</span><span class=\"na\">register</span><span class=\"o\">(</span><span class=\"n\">watcher</span><span class=\"o\">,</span> <span class=\"nc\">StandardWatchEventKinds</span><span class=\"o\">.</span><span class=\"na\">ENTRY_MODIFY</span><span class=\"o\">);</span>\n\n<span class=\"c1\">// 割り込みなどで中断するまで、file.txtを監視し続ける。</span>\n<span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"kc\">true</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"kt\">var</span> <span class=\"n\">watchKey</span> <span class=\"o\">=</span> <span class=\"n\">watcher</span><span class=\"o\">.</span><span class=\"na\">take</span><span class=\"o\">();</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">var</span> <span class=\"n\">event</span> <span class=\"o\">:</span> <span class=\"n\">watchKey</span><span class=\"o\">.</span><span class=\"na\">pollEvents</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">modified</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"nc\">Path</span><span class=\"o\">)</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"na\">context</span><span class=\"o\">();</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">modified</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"na\">getFileName</span><span class=\"o\">()))</span> <span class=\"o\">{</span>\n            <span class=\"c1\">// Do Something</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><code>WatchEvent::context</code>でイベントが発生したエントリの情報を取得できます。<code>WatchEvent::context</code>の戻り値は<code>Object</code>ですが、実態としては<code>Path</code>オブジェクトが返ってくるので、上記の例ではキャストして、変数<code>modified</code>としています。</p>\n\n<p>また<code>modified</code>に格納された<code>Path</code>オブジェクトは、<code>WatchService</code>に登録されたディレクトリからの相対パスになっています。要するに<code>var modified = Paths.get(\"file.txt\");</code>となっているため、<code>equals</code>などで比較する場合は注意する必要があります。</p>\n","body":"たとえば`dir\\file.txt`が変更されたことを`WatchService`で検出したい場合、次のようなコードを書きたくなりますが、これは実行時例外(`NotDirectoryException`)が発生します。\n\n```java\nvar file = Paths.get(\"dir\", \"file.txt\");\nvar watcher = FileSystems.getDefault().newWatchService();\nfile.register(watcher, StandardWatchEventKinds.ENTRY_MODIFY);\n```\n\n[`Path::register`のJavaDoc](https://docs.oracle.com/javase/jp/8/docs/api/java/nio/file/Path.html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-)にもある通り、`WatchService`の登録対象はディレクトリです。あるいは`WatchService`は登録したディレクトリの配下にあるファイルやディレクトリに発生したイベントを監視している、と言い換えてもいいでしょう。よって特定のファイルのイベントだけを検出したい場合は、たとえば次のような工夫が必要になります。\n\n```java\nvar file = Paths.get(\"dir\", \"file.txt\");\nvar directory = file.getParent();\nvar watcher = FileSystems.getDefault().newWatchService();\ndirectory.register(watcher, StandardWatchEventKinds.ENTRY_MODIFY);\n\n// 割り込みなどで中断するまで、file.txtを監視し続ける。\nwhile (true) {\n    var watchKey = watcher.take();\n    for (var event : watchKey.pollEvents()) {\n        var modified = (Path) event.context();\n        if (modified.equals(file.getFileName())) {\n            // Do Something\n        }\n    }\n}\n```\n\n`WatchEvent::context`でイベントが発生したエントリの情報を取得できます。`WatchEvent::context`の戻り値は`Object`ですが、実態としては`Path`オブジェクトが返ってくるので、上記の例ではキャストして、変数`modified`としています。\n\nまた`modified`に格納された`Path`オブジェクトは、`WatchService`に登録されたディレクトリからの相対パスになっています。要するに`var modified = Paths.get(\"file.txt\");`となっているため、`equals`などで比較する場合は注意する必要があります。\n","coediting":false,"comments_count":0,"created_at":"2018-10-19T00:07:58+09:00","group":null,"id":"7365c2d1f7338bfca191","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"WatchServiceで特定のファイルを監視したい","updated_at":"2018-10-19T00:07:58+09:00","url":"https://qiita.com/neko_the_shadow/items/7365c2d1f7338bfca191","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":199,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}