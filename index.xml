<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Qiita Backup</title><link>https://nekotheshadow.github.io/qiita-backup/</link><description>Recent content on Qiita Backup</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 24 Apr 2023 23:44:15 +0900</lastBuildDate><atom:link href="https://nekotheshadow.github.io/qiita-backup/index.xml" rel="self" type="application/rss+xml"/><item><title>Go言語でgzipファイルを解凍したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/899a4f5a9642c1154176/</link><pubDate>Mon, 24 Apr 2023 23:44:15 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/899a4f5a9642c1154176/</guid><description>Go言語では標準ライブラリだけで、gzipファイルを解凍することができます。 以下は./access.log.gzファイルを解凍し、./acc</description></item><item><title>SSMSでクエリ結果をファイルに保存したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7a9fce64ff8ce6a9879f/</link><pubDate>Sat, 25 Mar 2023 23:09:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7a9fce64ff8ce6a9879f/</guid><description>SSMSでクエリ結果をファイルに保存したい場合、以下の手順で設定を行います。 ① ツール &amp;gt; オプション を選択する。 ② クエリ結果 &amp;gt; SQL Server &amp;gt; 全般 を選択し</description></item><item><title>SSMSを利用してデッドロックを調査したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b353e435287607df893e/</link><pubDate>Sun, 22 Jan 2023 21:11:59 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b353e435287607df893e/</guid><description>デッドロックを調査するにあたって、SSMSを利用することがあったので、手順を自分用にまとめておきたいと思います。 ① オブジェクトエクスプローラ</description></item><item><title>メモリ消費量を抑えてxlsxファイルを読み込みたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/614b6fa0752d97ee0908/</link><pubDate>Mon, 02 Jan 2023 17:43:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/614b6fa0752d97ee0908/</guid><description>Apache POIを利用してxlsxファイルを読み込む方法として、インターネット上ではUser APIがよく紹介されています (HSSFWorkbookと</description></item><item><title>AUTO COMMITがOFFの状態で、SSMSを利用したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/499f49efea36fb042f7a/</link><pubDate>Sun, 27 Nov 2022 22:21:51 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/499f49efea36fb042f7a/</guid><description>AUTO COMMITがOFFの状態で、SSMSを利用したい場合は、以下の手順で設定します。 ① ツール(T) &amp;gt; オプション(O) を選択する。 ② クエリ実行</description></item><item><title>SQLServerでは文字列比較の際、空白に注意する必要がある (+ おまけつき)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5e894c51c6a33b3b78d5/</link><pubDate>Sat, 05 Nov 2022 18:07:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5e894c51c6a33b3b78d5/</guid><description>「詳しくは下のドキュメントを読んでね!!!以上!!!!」という内容ですが、お仕事ではまった内容なので、個人的にメモしておきます。 https://support.microsoft.com/en-us/topic/inf-how-sql-server-compares-strings-with-trailing-spaces-b62b1a2d-27d3-4260-216d-a605719003b0 このドキュ</description></item><item><title>SQLServerでテーブルごとの統計情報の最終更新日時を取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/158fb05a9ab80523ed88/</link><pubDate>Sat, 29 Oct 2022 21:24:31 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/158fb05a9ab80523ed88/</guid><description>SQLServerでテーブルごとの統計情報の最終更新日時を取得したい場合、sys.statsテーブルとSTATS_DATE関数を活用します。</description></item><item><title>サクラエディタで空行をすべて削除したい場合の正規表現</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1d0b2ee3fb983b254e80/</link><pubDate>Sat, 22 Oct 2022 23:16:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1d0b2ee3fb983b254e80/</guid><description>いつも作業のたびにやりかたをググっている気がするので、自分用にメモを残しておきます(´・ω・`) TL; DR サクラエディタを利用して、テキストファイ</description></item><item><title>セルの表示形式をyyyy-mm-dd hh:mm:ss.SSSにしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bc9f9e29c935e0ef768b/</link><pubDate>Sat, 24 Sep 2022 21:16:28 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bc9f9e29c935e0ef768b/</guid><description>通算10000回以上はググっている(大げさ)ので、自分用のメモとして残しておきます。 Excelで時刻を扱う際、yyyy-mm-dd hh:mm</description></item><item><title>Dockerを使ってMariaDBを雑に起動する方法</title><link>https://nekotheshadow.github.io/qiita-backup/blog/3748662ce52b4c2376e1/</link><pubDate>Sun, 11 Sep 2022 22:20:19 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/3748662ce52b4c2376e1/</guid><description>以前、以下のような記事を書きました。 https://qiita.com/neko_the_shadow/items/c12d5968bf9c5b2b6d1e Dockerを利用したDBMSの起動方法をまとめた記事なのですが、ここでMariaDBの起動方法が漏れ</description></item><item><title>OUTPUT句の結果をJavaアプリケーション上で受け取りたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/52b80b2d54ba0690f68c/</link><pubDate>Mon, 18 Jul 2022 21:19:43 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/52b80b2d54ba0690f68c/</guid><description>SQLServerには削除したり更新したりしたデータを返すOUTPUT句というものがあります。OUTPUT句の結果をJavaアプリケーション</description></item><item><title>Doma2でMergeを利用する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6014faca49622832cec7/</link><pubDate>Fri, 06 May 2022 22:37:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6014faca49622832cec7/</guid><description>Doma2でMergeを利用することがあったので、メモとして残しておきます。 といってもそれほど難しいことはなく、まずはDaoインタフェースを</description></item><item><title>SQLServerの2100個問題のひとつの解決策として、テーブル値パラメーターを利用する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/00a119c8aa499792b6f3/</link><pubDate>Sat, 05 Feb 2022 14:59:57 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/00a119c8aa499792b6f3/</guid><description>useridを主キーとして、ユーザの情報を格納する、以下のようなテーブルがあるとします。 CREATE TABLE users ( userid INT NOT NULL PRIMARY KEY, username NVARCHAR(100) NOT NULL ); 複数のuseridがあ</description></item><item><title>ファイルツリーを走査する際に特定のディレクトリの配下は無視したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/04807fc32d9b89cf47cd/</link><pubDate>Mon, 17 Jan 2022 00:47:38 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/04807fc32d9b89cf47cd/</guid><description>python3でファイルツリーをトラバースしたい場合、標準ライブラリとしてはos.walkが用意されているのですが、このAPIは指定したディ</description></item><item><title>「点字メーカープログラム」をSQLで回答したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e9325e13d236a40b0121/</link><pubDate>Sun, 26 Dec 2021 01:37:44 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e9325e13d236a40b0121/</guid><description>はじめに ある日、Qiitaをながめていたところ、こんな面白そうなアドベントカレンダーを発見。 https://qiita.com/advent-calendar/2021/ruby-challenge ぜひ参加してみたかったのですが、時すでに遅しで</description></item><item><title>Apache POIを使って列の幅の自動調整を行う</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2dcf0c8275317135733b/</link><pubDate>Tue, 23 Nov 2021 14:36:03 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2dcf0c8275317135733b/</guid><description>Excelの列の幅の自動調整に相当することをApache POIで実現したい場合、Sheet.autoSizeColumnを利用すると良いです</description></item><item><title>Apache POIを使ってセルにリンクを設定する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5ea378e90f618902fc18/</link><pubDate>Tue, 23 Nov 2021 14:34:27 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5ea378e90f618902fc18/</guid><description>Apache POIを使ってセルにリンクを設定する場合のサンプルを以下に示します。 Workbook workbook = ...; Cell cell = ...; // セルにハイパーリンクを設定する Hyperlink hyperlink = workbook.getCreationHelper().createHyperlink(HyperlinkType.DOCUMENT); hyperlink.setAddress(&amp;#34;destination!A1&amp;#34;); cell.setHyperlink(hyperlink); // セルに値</description></item><item><title>Apache POIを利用している際にA1形式でセルを取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/f3c9686fd9103f40b512/</link><pubDate>Sun, 31 Oct 2021 20:54:52 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/f3c9686fd9103f40b512/</guid><description>Excelではセルの位置を示すにあたって、A1形式を利用することが一般的だと思います。Apache POIを利用している際にA1形式でセルを取</description></item><item><title>Apache POIを使って、シートをソートしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b20f34c0a3cba56e14b9/</link><pubDate>Sun, 31 Oct 2021 20:33:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b20f34c0a3cba56e14b9/</guid><description>Excelにはシートをソートする機能は標準で用意されていません。通常はVBAを利用するのですが、VBAにはソート関数がなく、これを自前を用意</description></item><item><title>XSSF(xlsx)を扱う3種類の方法とメモリ消費量について</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ee737e9fb98dfb275b4/</link><pubDate>Sun, 03 Oct 2021 19:04:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ee737e9fb98dfb275b4/</guid><description>注意: 基本的にはこのあたりのドキュメントを読めばよい話ですが、自分用に簡単にまとめておきますね(´・ω・`) https://poi.apache.org/components/spreadsheet/ http://poi.apache.org/components/spreadsheet/how-to.html#xssf_sax_api JavaでExcelを操作す</description></item><item><title>CREATE TABLEを利用せずに一時テーブルを作成したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/cff203fc474cf1a29905/</link><pubDate>Mon, 06 Sep 2021 20:41:07 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/cff203fc474cf1a29905/</guid><description>SQLServerには一時テーブルという機能があるのですが、既存のテーブルをもとにして一時テーブルを作成したい場合、INTOを利用します。 た</description></item><item><title>Javaで経過日数を計算したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1c71f9949d17d932aaca/</link><pubDate>Sun, 01 Aug 2021 22:25:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1c71f9949d17d932aaca/</guid><description>Javaで経過日数を計算したい場合、もっともシンプルなのはLocalDateとChronoUnitを利用するものです。 public static long diff(LocalDate localDate1, LocalDate localDate2) { return ChronoUnit.DAYS.between(localDate1, localDate2);</description></item><item><title>文字列の出現回数を数えたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8c7da159e059f37f6ae2/</link><pubDate>Sun, 01 Aug 2021 21:45:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8c7da159e059f37f6ae2/</guid><description>特定の文字列の出現回数を数えたい場合、たとえばPythonだと $ python3 Python 3.8.5 (default, Jul 28 2020, 12:59:40) [GCC 9.3.0] on linux Type &amp;#34;help&amp;#34;, &amp;#34;copyright&amp;#34;, &amp;#34;credits&amp;#34; or &amp;#34;license&amp;#34; for more information. &amp;gt;&amp;gt;&amp;gt; &amp;#34;AABABAAAB&amp;#34;.count(&amp;#34;AB&amp;#34;) 3 というように、非常に簡単に書</description></item><item><title>正規表現にマッチした文字列すべてを取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1e1f39d77db97a04edff/</link><pubDate>Tue, 06 Jul 2021 22:44:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1e1f39d77db97a04edff/</guid><description>必要になるたびググって、そのたびに忘れている気がするので、自分用にメモしておきたいと思います。 正規表現にマッチした文字列すべてを取得したい場</description></item><item><title>10進数からN進数に変換する / N進数から10進数に変換する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d2852f086b2f4ad1042/</link><pubDate>Sun, 27 Jun 2021 16:52:11 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d2852f086b2f4ad1042/</guid><description>必要になるたびにググっている気がするので、ここらでまとめておきたいと思います。 まずN進数から10進数に変換する場合はInteger.pars</description></item><item><title>RowやCellをイテレータで処理する場合は未定義の行やセルに気を付ける</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8982cc5102421952a999/</link><pubDate>Sat, 22 May 2021 18:15:55 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8982cc5102421952a999/</guid><description>発生した問題 Apache POIを利用するシステム開発プロジェクトでは「指定したシートを読み込み、2次元配列に変換する」というようなAPIを作成すること</description></item><item><title>表示形式が設定された状態の値を取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5664d767816002218a23/</link><pubDate>Sat, 22 May 2021 17:27:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5664d767816002218a23/</guid><description>Excelにはセルの表示形式という機能があって、セルに同じデータを入力していても、セルの表示形式を変更することによって、任意の形式で表示する</description></item><item><title>関数を評価する前もしくは評価した後のセルの値が欲しい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/92c1d73c157a724d18bd/</link><pubDate>Sun, 16 May 2021 17:30:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/92c1d73c157a724d18bd/</guid><description>関数を評価した後の値が欲しい Apache POIでセルの値を取得する際、「セルに関数が含まれている場合は関数を評価した後の値が欲しい」とします。書き方は</description></item><item><title>相関サブクエリや共通表式を使って、他のテーブルをもとにUPDATEする</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a3c3eff96bf4db3adba7/</link><pubDate>Sun, 11 Apr 2021 14:47:24 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a3c3eff96bf4db3adba7/</guid><description>前提 商品在庫を管理するシステム構築にあたり、まず在庫数を商品ごとに格納しているinventoryテーブルがあるとします。 goods pieces 夏タイヤ 10 冬タイ</description></item><item><title>Doma2で前方一致検索をしたい場合は@prefixを活用する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/63fe88b609e25beab3fb/</link><pubDate>Sun, 11 Apr 2021 13:55:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/63fe88b609e25beab3fb/</guid><description>自分がかかわっているシステム開発プロジェクトで、他のチームがこのことでえらく盛り上がっていたので、自分なりに調べた結果を残しておきたいと思い</description></item><item><title>いろんなDBをDockerで雑に起動する私的ワンライナー集</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c12d5968bf9c5b2b6d1e/</link><pubDate>Wed, 31 Mar 2021 22:12:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c12d5968bf9c5b2b6d1e/</guid><description>この記事の目的 「DBMSで何かしら確認したり作業したいが、サーバは構築するのは面倒」ということがよくあって、そういう場合によく使うDB起動ワ</description></item><item><title>文字列結合を使うと、インデックスがうまく使われない場合がある</title><link>https://nekotheshadow.github.io/qiita-backup/blog/fce34213f47365861849/</link><pubDate>Sat, 27 Mar 2021 12:41:17 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/fce34213f47365861849/</guid><description>仕事のコードレビュー中、レビュイーから質問されたことをメモにしておきます(´・ω・｀) 前提 以下のような複合主キーを持つテーブルがあるとします</description></item><item><title>SQL Server 2019では行値式が利用できない</title><link>https://nekotheshadow.github.io/qiita-backup/blog/439704e504ce818e73c9/</link><pubDate>Wed, 03 Mar 2021 22:36:15 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/439704e504ce818e73c9/</guid><description>SQL Server 2019では行値式(row value constructor)が利用できないようです。 具体的には以下のようなSQLがSyntax Errorになりま</description></item><item><title>2つのテーブルのデータがすべて一致しているかを確認したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c3a14cf1889f505d6a3d/</link><pubDate>Tue, 02 Mar 2021 13:38:20 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c3a14cf1889f505d6a3d/</guid><description>テーブルXとテーブルYのデータがすべて一致しているかを確認したい場合、どのようにすればよいでしょうか? 集合Xと集合Yが等しいことを確認したい</description></item><item><title>INSERT SELECTでWITHを利用したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4653401d8cbc44b55192/</link><pubDate>Tue, 02 Mar 2021 10:51:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4653401d8cbc44b55192/</guid><description>TL;DR MySQL8で、INSERT SELECTでWITHを利用したい場合、以下のように書けばよいです。 INSERT INTO a ( WITH c AS ( SELECT * FROM b ) SELECT * FROM c ); WITH RECURSIVE (</description></item><item><title>Javaでファイルやディレクトリのタイムスタンプを変更したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/56f4fc6d5adec83fd342/</link><pubDate>Sat, 13 Feb 2021 11:41:16 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/56f4fc6d5adec83fd342/</guid><description>Javaでファイルやディレクトリのタイムスタンプを変更したい場合Files.setLastModifiedTimeを利用すると便利です。たと</description></item><item><title>条件に合うデータの数を数えたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/12e1ce61e9b11af87c11/</link><pubDate>Fri, 12 Feb 2021 23:12:02 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/12e1ce61e9b11af87c11/</guid><description>この記事では条件に合うデータの数を数える方法を紹介します。 例: とあるIT企業の従業員の名前(name)とその従業員が所属している部署(dep</description></item><item><title>open(0)とすると標準入力に対応するファイルオブジェクトが取得できる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/521d1361820c42547741/</link><pubDate>Sun, 07 Feb 2021 13:34:16 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/521d1361820c42547741/</guid><description>Python3で標準入力から入力を読む方法はいくつかありますが、組み込み関数のopenを使って、open(0)とすると標準入力に対応するファ</description></item><item><title>Files.listやFiles.walkやFiles.findの戻り値であるStream&lt;Path>はクローズしないと、Too many open files が発生する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e2b37aef9f97c6978d20/</link><pubDate>Sun, 31 Jan 2021 17:55:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e2b37aef9f97c6978d20/</guid><description>Files.listやFiles.walkやFiles.findの戻り値であるStream&amp;lt;Path&amp;gt;はDirectoryStr</description></item><item><title>InputStreamをStringに変換したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7101490db65ecd657c47/</link><pubDate>Mon, 18 Jan 2021 20:36:00 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7101490db65ecd657c47/</guid><description>必要になるたびにぐぐるのに疲れたので自分用のメモとしておいておきますね(´・ω・｀) InputStreamをすべて読み込んでStringに変</description></item><item><title>プリミティブ型のソートでは最悪計算時間に注意する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a36d0e54e4d1636ed7a0/</link><pubDate>Sat, 05 Dec 2020 13:32:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a36d0e54e4d1636ed7a0/</guid><description>Java11にはさまざまなソートAPIが用意されていますが、ソートアルゴリズムとして、プリミティブ型のソートにはDual Pivot Quick Sortが、参照</description></item><item><title>log.Fatalはメッセージ出力後に終了ステータス1としてプログラムを終了しようとする</title><link>https://nekotheshadow.github.io/qiita-backup/blog/70642e57723d42b8514c/</link><pubDate>Sun, 15 Nov 2020 21:08:20 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/70642e57723d42b8514c/</guid><description>結論: APIを利用する場合はきちんとドキュメントを読みましょう(´・ω・`) go言語のlog.Fatal、log.Fatalfおよびlog.</description></item><item><title>UtilLoggingJdbcLoggerのログ出力設定を変更したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d2189340f26c25b1eed/</link><pubDate>Sat, 07 Nov 2020 17:49:08 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d2189340f26c25b1eed/</guid><description>1. java.util.logging.config.fileを利用する Doma2ではログ出力にJDBCLoggerインターフェースを利用し、</description></item><item><title>指定した文字列が、対象の文字コードにおいてサポートされているかを調べたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/f53ba312bad7b6dc2151/</link><pubDate>Sun, 11 Oct 2020 17:25:51 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/f53ba312bad7b6dc2151/</guid><description>指定した文字列が、対象の文字コードにおいてサポートされているかどうかを調べたい場合、CharsetEncoder.canEncode を利用す</description></item><item><title>対象の文字コードにない文字を書き込む際の挙動がFiles.writeとFiles.writeStringで異なる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/da4a77fe38b13b9be541/</link><pubDate>Sat, 03 Oct 2020 18:08:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/da4a77fe38b13b9be541/</guid><description>𩸽という漢字はユニコードのサロゲートペアの代表例としてプログラマにはよく知られていますが、この漢字はShift_JISには収録されていません</description></item><item><title>特殊変数$1, $2, $3 ... で巨大な整数を使おうとすると、警告が表示される</title><link>https://nekotheshadow.github.io/qiita-backup/blog/fa7d7b6f2f9d09098f30/</link><pubDate>Sat, 26 Sep 2020 16:31:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/fa7d7b6f2f9d09098f30/</guid><description>Rubyには、$1, $2, $3 ...という特殊変数があり、$nには最後に成功したパターンマッチで n 番目の括弧にマッチした値が代入されます。 &amp;#34;abc&amp;#34; =~ /(.)(.)(.)/ p</description></item><item><title>RMagickを導入して、既存の既存の画像ファイルを別のフォーマットに変換する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a38c9a055590b2c61497/</link><pubDate>Thu, 17 Sep 2020 18:47:53 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a38c9a055590b2c61497/</guid><description>問題 すでにRMagickが導入されている環境において、既存の画像ファイルを別のフォーマットに変換したい場合は、どのようにすれば良いでしょうか</description></item><item><title>Rubyを利用して、インターネット上のファイルをダウンロードし、ローカルに保存したい (注意点あり)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/747372d3cc62802550da/</link><pubDate>Thu, 17 Sep 2020 13:18:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/747372d3cc62802550da/</guid><description>課題 Rubyを利用して、インターネット上のファイルをダウンロードし、ローカルに保存したい場合はどのようにすればよいでしょうか? 解決策 まずはテ</description></item><item><title>build-push-actionを使って、GitHub Container Registryにイメージをpushしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/56fdf5123559d5147449/</link><pubDate>Sun, 13 Sep 2020 17:16:53 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/56fdf5123559d5147449/</guid><description>Dockerイメージをレジストリに登録する作業を自動化したい場合、build-push-actionというワークフローを利用することが多いと</description></item><item><title>WSL2からWindows Explorerを開きたい (Macのopenコマンドと同様のことをWSL2でも実現したい)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/fed0568d6c5e58926838/</link><pubDate>Thu, 10 Sep 2020 23:55:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/fed0568d6c5e58926838/</guid><description>問題 Macのターミナルにはopenというコマンドがあって、たとえばopen .とするとカレントディレクトリがFinderで表示します。同じこと</description></item><item><title>goreleaserをGithub Actionsで利用するまでのQuick Start</title><link>https://nekotheshadow.github.io/qiita-backup/blog/52a1e7320c29275d5580/</link><pubDate>Thu, 10 Sep 2020 23:40:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/52a1e7320c29275d5580/</guid><description>goreleaserは、Goプロジェクトをビルドして、各OS向けの実行可能バイナリやDocker Imageを作成し、GithubのRelea</description></item><item><title>SXSSFWorkbookを利用する際の個人的な注意点 (行単位のアクセス単位は避けたほうが無難 / 既存のxlsxファイルで書き込み済みの行にはアクセスできない)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/3a70dc7b8236e93221e7/</link><pubDate>Sun, 30 Aug 2020 12:44:54 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/3a70dc7b8236e93221e7/</guid><description>概要 Apache POIでXSSFWorkbookを利用する場合、頭をもたげてくるのはメモリ問題。XSSFWorkbookは読み込んだデータや書き込んだ</description></item><item><title>WSL2/UbuntuのIPアドレスを取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/25b797cb436078b9e832/</link><pubDate>Wed, 12 Aug 2020 16:55:55 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/25b797cb436078b9e832/</guid><description>WSL2では、インストールしたUbuntuが仮想マシンとして稼働し、ホストとは別のIPアドレスを有します。そのため、ホスト(Windows)</description></item><item><title>[MyBatis] 1対多の関係にあるテーブルに対する照会クエリをネストされたBeanにマッピングしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/148fff2fec32bfa94097/</link><pubDate>Fri, 31 Jul 2020 20:55:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/148fff2fec32bfa94097/</guid><description>問題 JIRAやRedmineのようなバグトラッキングシステムを例とします。このシステムでは、トピックごとにプロジェクトを作成します。チケット</description></item><item><title>parcel buildのビルド結果をgithub pagesで公開すると、jsファイルの読み込みが404で失敗する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2f3a6d8ef547cdf45592/</link><pubDate>Thu, 30 Jul 2020 00:36:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2f3a6d8ef547cdf45592/</guid><description>事象 index.html、main.js、word.jsの3つのファイルから構成されるフロントエンドアプリケーションがあるとします。 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div</description></item><item><title>rbenv install 2.7.1が「no acceptable C compiler found in $PATH」「cannot load such file」により失敗する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/39e4048a4c19343d0b97/</link><pubDate>Sun, 05 Jul 2020 17:19:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/39e4048a4c19343d0b97/</guid><description>環境 rbenv 1.1.2-30-gc879cb0 ruby-build 20200520-12-g69ccbf4 Ubuntu 20.04 LTS (Focal Fossa) [Windows Subsystem for Linux 2; WSL2] 前提 rbenvおよびruby-buildの導入が完了し、rbenv-doctor scriptによる検証がO</description></item><item><title>標準出力がコンソールか別のコマンドかによって、バッファリングやフラッシュの規則が異なる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ada1a17a509e1e0314f/</link><pubDate>Sun, 05 Jul 2020 17:01:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ada1a17a509e1e0314f/</guid><description>環境 ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux] Ubuntu 20.04 LTS (Focal Fossa) [Windows Subsystem for Linux 2; WSL2] 事象 Rubyで標準出力を利用する場合、標準出力の先がコンソールか別のコマンドかによって、バッファリング</description></item><item><title>WSL2 Dockerのイメージ・コンテナの格納先を変更したい (WSL2のvhdxファイルを移動させたい)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/ae87b2480345152bc3cb/</link><pubDate>Sun, 21 Jun 2020 02:24:47 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/ae87b2480345152bc3cb/</guid><description>Docker Desktop backend WSL2 をインストールすると、docker-desktopとdocker-desktop-dataというふたつのディストリビューションが作成</description></item><item><title>Db2を利用したJavaアプリケーションでERRORCODE=-4471が発生する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6f4497af7be702c01f4b/</link><pubDate>Sun, 31 May 2020 23:21:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6f4497af7be702c01f4b/</guid><description>環境 本記事を書くにあたって利用した主なソフトウェアのバージョンは次の通りです。 javac 11.0.4 openjdk version &amp;ldquo;11.0.4&amp;rdquo; 2019-07-16 IBM DB2 Developer-C Edition 11.5 (Docker/wsl2) IBM Data Server Driver for JDBC and SQLJ 4.26.14 事象 以下のコードはE</description></item><item><title>public static final Stringとして宣言された文字列定数が埋め込まれる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/55c5d1a53462b6d7918e/</link><pubDate>Sun, 12 Apr 2020 20:41:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/55c5d1a53462b6d7918e/</guid><description>事象 文字列定数(public static final String)ばかりが定義されたクラスConst.javaと、その定数を利用するMain.javaがあるとし</description></item><item><title>Docker Toolbox 環境で npm install が reason: getaddrinfo EAI_AGAIN registry.npmjs.org により失敗する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bf3ac2a7d2a01a76ca46/</link><pubDate>Sun, 12 Apr 2020 19:26:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bf3ac2a7d2a01a76ca46/</guid><description>事象 Docker Toolbox 環境において、npm installが以下の理由により失敗する場合があります。 npm ERR! code EAI_AGAIN npm ERR! errno EAI_AGAIN npm ERR! request to https://registry.npmjs.org/vue-router failed, reason: getaddrinfo EAI_AGAIN registry.npmjs.org 原因 わたしの環境だと</description></item><item><title>NSQ環境をDockerで構築する(『Go言語によるWebアプリケーション開発』第5章)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e5ac4adffaa928332e78/</link><pubDate>Sun, 22 Mar 2020 16:57:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e5ac4adffaa928332e78/</guid><description>『Go言語によるWebアプリケーション開発』(Mat Ryer著、鵜飼文敏監訳、牧野聡訳; O&amp;rsquo;Reilly Japan)の「第5章 分散システムと柔軟なデータの</description></item><item><title>Open状態のファイルに対して、Linuxだとos.Renameに成功するが、Windowsだとエラーになる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2bef3358d82cbcea0512/</link><pubDate>Sun, 01 Mar 2020 15:25:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2bef3358d82cbcea0512/</guid><description>環境情報 この記事は以下の環境で稼働確認を実施しました。 Windows Microsoft Windows [Version 10.0.19041.84] go version go1.13.5 windows/amd64 Linux Ubuntu 18.04 LTS (Bionic Beaver) go version go1.13.8 linux/amd64 事象 Open状態のファイルに対して、os.Ren</description></item><item><title>flagパッケージを利用しているときに、オプションの値をスライスで受け取りたい / 同じオプションを複数回指定し、その値をすべてスライスに詰めたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/49fdc992d2d3c5af03d2/</link><pubDate>Mon, 10 Feb 2020 00:17:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/49fdc992d2d3c5af03d2/</guid><description>Go言語のflagパッケージを利用して、コマンドラインツールを作成していると、オプションの値をSliceで受け取りたい場合があります。たとえ</description></item><item><title>Pythonのbisect_leftとbisect_rightをGo言語でも使いたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6a722857995e35b06fa1/</link><pubDate>Sun, 09 Feb 2020 23:24:11 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6a722857995e35b06fa1/</guid><description>Python3にはbisectというモジュールがあり、この中にはbisect_left、bisect_rightという関数が用意されています</description></item><item><title>JDBCを利用する場合、NLSパラメータはJavaのロケールに影響される。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/baca14a933ddc9d3d562/</link><pubDate>Fri, 17 Jan 2020 01:06:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/baca14a933ddc9d3d562/</guid><description>実行環境 本記事を書くにあたって、利用した主なソフトウェアのバージョンは次の通りです。なおOracle Databaseの構築にあたってはDoc</description></item><item><title>time.Time型のSliceを昇順ソートしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9dc6e479e76918e6f8a8/</link><pubDate>Wed, 08 Jan 2020 21:20:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9dc6e479e76918e6f8a8/</guid><description>time.Time型のSliceを昇順ソートするにはどのようにすればよいでしょうか? まずGoのバージョンが1.8以降の場合はsort.Sli</description></item><item><title>Javaのスレッドの数や状態を確認するコマンド</title><link>https://nekotheshadow.github.io/qiita-backup/blog/59370e3daf88727c58db/</link><pubDate>Thu, 26 Dec 2019 00:50:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/59370e3daf88727c58db/</guid><description>Javaアプリケーションサーバの保守運用をしていると、現在起動しているスレッドの数や状況を知りたいということがあります。一般的なJavaアプ</description></item><item><title>executeBatchの戻り値の内容が11gと12cで異なる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6680ef630c7261b59fb1/</link><pubDate>Tue, 10 Dec 2019 22:10:13 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6680ef630c7261b59fb1/</guid><description>実行環境 本記事を書くにあたって、利用した主なソフトウェアのバージョンは次の通りです。なおOracle Databaseの構築にあたってはDoc</description></item><item><title>gmusicapiの認証サンプル</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2ab0e7137bf703ff0d21/</link><pubDate>Sun, 01 Dec 2019 23:25:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2ab0e7137bf703ff0d21/</guid><description>完全に自分用の技術メモ(´・ω・｀) gmusicapiはPythonからGoogle Play Musicを操作するGoogle非公認のライブラリです</description></item><item><title>Pleiadesの PyDevでpipがうまく動かない</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0ce215380845e08db044/</link><pubDate>Sun, 01 Dec 2019 12:16:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0ce215380845e08db044/</guid><description>Python3開発ではEclipse 2019-09 (Pleiades All in One Eclipse) に初期導入されているPyDevをよく利用しています。PyDevではpipによるライブラリの管</description></item><item><title>とあるパブリック・リポジトリに設定されたGitHub Actionsから別のパブリック・リポジトリにgit pushしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b352064165aa20a05a33/</link><pubDate>Sun, 01 Dec 2019 09:37:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b352064165aa20a05a33/</guid><description>GitHub Actions、もといGitHub自体、初心者ということもあって、時間をかなり溶かしたので、メモとして残しておきます(´・ω・｀) とあるパ</description></item><item><title>手元にあるjarファイルがどのバージョンのjavaで利用できるのかを調べたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/062cba5bf9e6baedd401/</link><pubDate>Wed, 27 Nov 2019 21:30:47 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/062cba5bf9e6baedd401/</guid><description>手元にあるjarファイルがどのバージョンのjavaで利用できるのかを調べるにはどうすればよいでしょうか? 実をいうと、jarファイルそのものは</description></item><item><title>n == 0がNullPointerExceptionをスローする。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d47cb03ac74e74bedd8/</link><pubDate>Mon, 11 Nov 2019 12:37:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d47cb03ac74e74bedd8/</guid><description>問題 突然ですが、次のコードはNullPointerExceptionになる可能性があります。どのような場合でしょうか? boolean iszero = n == 0; 答え 答えは</description></item><item><title>Outlookのタスク機能からタスク一覧をエクスポートするVBA</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9c7c45be2a57e75336b9/</link><pubDate>Fri, 08 Nov 2019 21:44:38 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9c7c45be2a57e75336b9/</guid><description>タスクやTODOの管理にOutlookのタスク機能をよく利用しています。基本的には自分専用なのですが、ごくまれに人に見せる機会があります。こ</description></item><item><title>Javaでgzファイルを解凍するサンプル</title><link>https://nekotheshadow.github.io/qiita-backup/blog/dd4ce3f71388771c2bb7/</link><pubDate>Thu, 07 Nov 2019 23:30:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/dd4ce3f71388771c2bb7/</guid><description>サーバ上のgzの中身を確認する必要があるにも関わらず、手元のへっぽこWindows7 PCには7zipのようなgzに対応したソフトウェアがイン</description></item><item><title>-cpオプションにプロパティファイルのパスを指定したにも関わらず、クラスパスとして認識されない</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b0427409961299fb83f2/</link><pubDate>Sun, 06 Oct 2019 00:49:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b0427409961299fb83f2/</guid><description>環境 この記事は以下の環境で、稼働確認を実施しました。 C:\&amp;gt;java -version openjdk version &amp;#34;11.0.3&amp;#34; 2019-04-16 OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.3+7) OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.3+7, mixed mode) 事象 以下のMain.javaはクラスパス上に存</description></item><item><title>メイン・クラスが存在するにもかかわらず「エラー: メイン・クラスXXXが見つからなかったかロードできませんでした」が発生する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bfdb47c6f8934489dc42/</link><pubDate>Wed, 02 Oct 2019 22:14:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bfdb47c6f8934489dc42/</guid><description>事象 まず以下のようなChildクラスが存在するとします。 public class Child extends Parent { public static void main(String[] args) { System.out.println(&amp;#34;This class is `Child`&amp;#34;); } } これをchild.jarに格納し、Java8で実</description></item><item><title>Javaからバッチファイルを実行する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/697ad4d37de85ab0a6c5/</link><pubDate>Mon, 30 Sep 2019 00:11:38 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/697ad4d37de85ab0a6c5/</guid><description>注意: この記事は次の環境で確認を行いました。 Microsoft Windows 10 Pro Edition OpenJDK 11 Eclipse 2019-09 (Pleiades All in One) C:\sampleというフォルダにhelloworld.batが設置さ</description></item><item><title>PathMatcher::matchesでIllegalArgumentExceptionが発生する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bf53b5432363838e7c26/</link><pubDate>Sun, 15 Sep 2019 01:23:42 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bf53b5432363838e7c26/</guid><description>事象 いきなり個人的な事情で申し訳ないのですが、一連のファイルやディレクトリに対して、globを使ってフィルタリングしたいという場合、File</description></item><item><title>.projectが存在するにも関わらず「プロジェクト記述ファイル (.project) がありません」によりプロジェクトが開けない</title><link>https://nekotheshadow.github.io/qiita-backup/blog/51fd51a47ffb6d969f34/</link><pubDate>Wed, 28 Aug 2019 00:31:31 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/51fd51a47ffb6d969f34/</guid><description>注意 本記事は以下の環境で、稼働確認を行いました。 Windows 10 Home Pleiades All in One Eclipse (リリース 2019-06) ただしWindowsやEclipseの異なるEditionやVe</description></item><item><title>Solargraphをインストールしたにもかかわらず、拡張機能「Ruby Solargraph」が「gem install solargraph」エラーになる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/87bb06cb73b01177a851/</link><pubDate>Sat, 29 Jun 2019 23:10:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/87bb06cb73b01177a851/</guid><description>Solargraphをgem installしているにもかかわらず、vscodeの拡張機能であるRuby Solargraph が以下のようなエラーを表示することが</description></item><item><title>「glassfish.lib.grizzly-npn-bootstrap-1.6.jarが見つからなかったかロードできませんでした」が原因でPayara Serverが起動しない</title><link>https://nekotheshadow.github.io/qiita-backup/blog/35b469c1bb9efe11524e/</link><pubDate>Sun, 05 May 2019 10:46:09 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/35b469c1bb9efe11524e/</guid><description>[注意1] この記事の内容は以下の環境で動作確認を行っています。 C:\payara5\bin&amp;gt;asadmin.bat version Version string could not be obtained from Server [localhost:4848]. (Turn debugging on e.g. by setting AS_DEBUG=true in your environment, to see the details.) Using locally retrieved version string from version class. Version = Payara Server 5.191 #badassfish</description></item><item><title>Pathを利用した状況で相対パスを求めたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2d77c0c310ffbede20f0/</link><pubDate>Sun, 05 May 2019 09:37:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2d77c0c310ffbede20f0/</guid><description>さほど頻度は高くないと思いますが、とあるパスを起点として、別のパスの相対パスを求めたいということがあります。Java7以降では、ファイル操作</description></item><item><title>AtCoder Beginner Contest 124 の参戦記録</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8320829ac908ce963319/</link><pubDate>Sun, 14 Apr 2019 18:00:46 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8320829ac908ce963319/</guid><description>AtCoder Beginner Contest 124に参戦したので、提出時にどのようなことを考えていたのかと実際の提出コードをまとめておきたいと思います。利用した言語はPython</description></item><item><title>JULを利用して、MyBatisが発行したSQLの実行ログを記録する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/96a4ab0c61f7b02d5545/</link><pubDate>Sun, 14 Apr 2019 15:31:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/96a4ab0c61f7b02d5545/</guid><description>はじめに 「java.util.logging(以降はJULと表記)を利用して、MyBatisが発行したSQLの実行ログを記録する」という、意</description></item><item><title>javacの警告が100個までしか出力されない。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/75ea8e714d07f2e101a1/</link><pubDate>Mon, 08 Apr 2019 22:25:44 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/75ea8e714d07f2e101a1/</guid><description>この記事は以下の環境で動作確認を行いました。ただし、ほかのバージョンやほかのベンダーでも通用する内容だとは思います(´・ω・｀) C:\jdk&amp;gt;java -version openjdk version &amp;#34;12&amp;#34; 2019-03-19</description></item><item><title>再帰の最大回数を確認する/設定する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8128a6a46acecf1cba46/</link><pubDate>Tue, 05 Mar 2019 23:20:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8128a6a46acecf1cba46/</guid><description>再帰の最大回数を確認したい場合はsys.getrecursionlimit、設定したい場合はsys.setrecursionlimitをそれ</description></item><item><title>Maven Repositoryで管理されていないjarをプロジェクトで管理して、ビルド時に実行可能jarに格納する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2d5b82c04dc109ebc0ee/</link><pubDate>Mon, 04 Feb 2019 22:35:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2d5b82c04dc109ebc0ee/</guid><description>通算すると10000回ぐらい(おおげさ)調べているので、自分用ですが、まとめておきたいと思います。なお以下の内容はSpring Bootのバー</description></item><item><title>BETWEEN 1 AND NULLとしたときの挙動について</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b9406e69333543358819/</link><pubDate>Mon, 21 Jan 2019 00:53:26 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b9406e69333543358819/</guid><description>元ねた: 「Ruby2.6のInfiniteRangeをActiveRecordで利用した時の挙動を各RDBMSに対して調査した」 上記の記事で</description></item><item><title>Db2でTIMESTAMP⇔文字列変換 &amp; TIMESTAMPの算術計算</title><link>https://nekotheshadow.github.io/qiita-backup/blog/18c2e3e12091eec14828/</link><pubDate>Mon, 31 Dec 2018 23:33:56 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/18c2e3e12091eec14828/</guid><description>通算10000回は調べているので、いい加減にまとめておきます(大げさ)。なお以下のSQLはDb2 on Cloudで稼働確認を行いました。おそらく</description></item><item><title>itertools.groupbyは事前にソートしておく必要がある &amp; n番目の要素を取得する関数がほしい場合はoperator.itemgetterが便利</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8c3ce77899abdf274a3e/</link><pubDate>Tue, 25 Dec 2018 18:09:40 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8c3ce77899abdf274a3e/</guid><description>受信したメールの受信日付、送信元Adress、件名が以下のような形式でリストに格納されているとします。 received_mails = [ (&amp;#34;2018-01-01&amp;#34;, &amp;#34;alice@example.com&amp;#34;, &amp;#34;subject1&amp;#34;), (&amp;#34;2018-02-02&amp;#34;, &amp;#34;bob@example.com&amp;#34; , &amp;#34;subject2&amp;#34;), (&amp;#34;2018-03-03&amp;#34;, &amp;#34;chris@example.com&amp;#34;, &amp;#34;subject3&amp;#34;), (&amp;#34;2018-04-04&amp;#34;, &amp;#34;alice@example.com&amp;#34;, &amp;#34;subject4&amp;#34;), (&amp;#34;2018-05-05&amp;#34;, &amp;#34;bob@example.com&amp;#34; ,</description></item><item><title>ビット演算を利用してべき集合を作成する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0d70793b3b9e76e918a0/</link><pubDate>Mon, 24 Dec 2018 16:17:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0d70793b3b9e76e918a0/</guid><description>参考: 「C#でサイズnの順列をすべて生成したい。」 表題のとおり「ビット演算でべき集合を作成する」ことがあったので、その際のメモになります。な</description></item><item><title>シクシク素数列 Advent Calendar 2018 C#編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/ca927584a6059d681cd3/</link><pubDate>Wed, 12 Dec 2018 23:40:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/ca927584a6059d681cd3/</guid><description>「シクシク素数列 Advent Calendar 2018」の16日目の記事になります。問題詳細は当該アドベントカレンダーのページを参照していただくとして、ごく簡単にまと</description></item><item><title>合成数列の和 Advent Calendar 2018 bash 編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b5bd9930c00325f0e4ca/</link><pubDate>Wed, 05 Dec 2018 14:07:30 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b5bd9930c00325f0e4ca/</guid><description>注意: 「合成数列の和 Advent Calendar 2018」の9日目の記事になります。 詳細な問題内容はアドベントカレンダーの該当記事に譲るとして、ごく簡単にまとめてお</description></item><item><title>シクシク素数列 Advent Calendar 2018 Java編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/39eb449bf5794e43e235/</link><pubDate>Tue, 27 Nov 2018 21:10:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/39eb449bf5794e43e235/</guid><description>この記事は「シクシク素数列 Advent Calendar 2018」2日目になります。 詳細はアドベントカレンダーの該当ページを見ていただくとして、ざっくり問題内容をまと</description></item><item><title>C#でサイズnの順列をすべて生成したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e6a931b8a9193b47fcd3/</link><pubDate>Tue, 20 Nov 2018 23:49:27 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e6a931b8a9193b47fcd3/</guid><description>サイズ$n$の順列をすべて生成する処理をC#で実装する機会があったので、そのメモになります。RubyやPythonだと順列の列挙は標準ライブ</description></item><item><title>ずんだの菱形アルファベット問題 Python3 &amp; SQL編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/532f7a48cf384b3f23bf/</link><pubDate>Tue, 06 Nov 2018 23:40:38 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/532f7a48cf384b3f23bf/</guid><description>もとねた: ずんだの菱形アルファベット問題 Ruby編 Python3で、まずは「ふつう」に回答してみました。もとねたでは実行時引数を読み込んでい</description></item><item><title>ずんだのMARQUEE問題 C#編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/8d7c77587519d357e1dd/</link><pubDate>Sun, 04 Nov 2018 23:40:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/8d7c77587519d357e1dd/</guid><description>もとねた: ずんだのMARQUEE問題 この程度の問題だと、正規表現や文字列置換などを利用して、解くことを考えるのが一般的だと思います。&amp;ldq</description></item><item><title>ずんだのハロウィン問題 bash編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/784bb2d24f3fa01d294a/</link><pubDate>Thu, 01 Nov 2018 00:01:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/784bb2d24f3fa01d294a/</guid><description>もとねた: 「ずんだのハロウィン問題 Ruby編」 1行野郎は男の浪漫&amp;ndash;ということで、保守性や可読性を無視して、上記記事の条件を満たす</description></item><item><title>ずんだの表見出し++問題 SQL 編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/acc773ef71b3312075e7/</link><pubDate>Wed, 24 Oct 2018 01:15:19 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/acc773ef71b3312075e7/</guid><description>注意: 本記事のSQLはPostgreSQLの次のバージョンで動作確認を行っています: psql (PostgreSQL) 10.5 (Ubuntu 10.5-0ubuntu0.18.04) 元ネタ: ずんだの表見出し++問題 Ruby 編 計算資源が</description></item><item><title>WatchServiceで特定のファイルを監視したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7365c2d1f7338bfca191/</link><pubDate>Fri, 19 Oct 2018 00:07:58 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7365c2d1f7338bfca191/</guid><description>たとえばdir\file.txtが変更されたことをWatchServiceで検出したい場合、次のようなコードを書きたくなりますが、これは実行</description></item><item><title>ずんだの1桁足し算問題 Java11編</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6320f9550c72fcd783eb/</link><pubDate>Sun, 07 Oct 2018 22:35:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6320f9550c72fcd783eb/</guid><description>tbpgrさんの「ずんだの1桁足し算問題 Ruby編」を2018年9月にリリースされたJava11で実装しました。 import java.util.stream.IntStream; public class Main { public static void main(String[] args) { IntStream.range(1, 10)</description></item><item><title>ずんだの縦読み問題 Java 12 Early-Access 版</title><link>https://nekotheshadow.github.io/qiita-backup/blog/67e96e613b7f06ddc5fc/</link><pubDate>Fri, 28 Sep 2018 00:39:09 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/67e96e613b7f06ddc5fc/</guid><description>元ネタ: ずんだの縦読み問題 ずんだの縦読み問題 php編 他言語ではヒアドキュメントなどと呼ばれる機能がJavaでは長らくサポートされておらず、ソ</description></item><item><title>Javaでrm -rfを実装する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e49851c1a044818ed2b6/</link><pubDate>Thu, 06 Sep 2018 22:47:59 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e49851c1a044818ed2b6/</guid><description>ディレクトリを再帰的に削除する処理、要するにrm -rfと同等の処理をJavaで実装する機会があったので、メモを残しておきます(´・ω・｀) 今</description></item><item><title>Javaでzipファイルを解凍する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6e0504a3304e375b39b0/</link><pubDate>Fri, 24 Aug 2018 23:38:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6e0504a3304e375b39b0/</guid><description>Javaでzipファイルを解凍する機会があったため、そのときの技術メモになります(´・ω・｀) まずは次の手順でzipに格納する3つのファイル</description></item><item><title>JavaでファイルのMD5チェックサムを求めて、その結果を16進数表記の文字列として取得したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/dac1e22115542751df85/</link><pubDate>Wed, 01 Aug 2018 21:47:03 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/dac1e22115542751df85/</guid><description>掲題の通り「JavaでファイルのMD5チェックサムを求めて、その結果を16進数表記の文字列として取得したい」という機会があり、四苦八苦して実</description></item><item><title>JPA(Hibernate)の利用時にmainメソッドの最終行まで行きついても、Javaアプリケーションが終了しない。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/16255e7f36a6b355121d/</link><pubDate>Mon, 23 Jul 2018 22:45:20 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/16255e7f36a6b355121d/</guid><description>前提として、Hibernateのversionは5.3.3。pom.xmlのdependenciesは次のようになります。 &amp;lt;!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;5.3.3.Final&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--</description></item><item><title>TECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽しく学ぼう！」掲載のアルゴリズム問題を解きました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6c39cbade45d5b38fbb5/</link><pubDate>Sun, 15 Jul 2018 21:48:00 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6c39cbade45d5b38fbb5/</guid><description>タイトルが長い(´・ω・｀) ただこう書くほかない(´・ω・｀) 掲題の通りTECH PLAY「定番のアルゴリズムは退屈？アルゴリズムをもっと楽し</description></item><item><title>StreamでGroup By処理を行いたい(group-by-count, group-by-sum, group-by-max)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b759028d3609a11072e0/</link><pubDate>Thu, 12 Jul 2018 21:24:10 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b759028d3609a11072e0/</guid><description>たとえば、ユーザとそのユーザが支払った金額が以下のような形で与えられるとします。 public class Payment { public static void main(String[] args) { var payments = List.of( new Payment(&amp;#34;A&amp;#34;, 10), new Payment(&amp;#34;B&amp;#34;, 20), new Payment(&amp;#34;B&amp;#34;, 30), new Payment(&amp;#34;C&amp;#34;, 40), new Payment(&amp;#34;C&amp;#34;, 50), new</description></item><item><title>zipファイルの中身とその圧縮前のサイズの一覧を取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/992378f37f977331581a/</link><pubDate>Wed, 20 Jun 2018 23:23:51 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/992378f37f977331581a/</guid><description>zipファイルの中身とその圧縮前のサイズの一覧を取得する&amp;ndash;という、この世界でどれだけ需要があるかわからない処理を実装する機会があ</description></item><item><title>上限を設けずに整数列を生成したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/00574464fb8f6b698deb/</link><pubDate>Sat, 09 Jun 2018 18:41:53 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/00574464fb8f6b698deb/</guid><description>整数の列を生成するにあたって、基本的にはseqコマンドでことたりるのですが、欠点がないわけではありません。とりわけ整数列の生成にあたって上限</description></item><item><title>Javaで標準入力を読み込む</title><link>https://nekotheshadow.github.io/qiita-backup/blog/781253880295a9541456/</link><pubDate>Sat, 26 May 2018 10:30:45 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/781253880295a9541456/</guid><description>この記事は「ベストプラクティスを自らしめす」というよりは、「ベストプラクティスがよくわからんので、とりあえずQiitaに書いておけば、詳しい</description></item><item><title>文字列の繰り返しをシンプルに書きたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/78ad73e86f45e4994a89/</link><pubDate>Sun, 13 May 2018 21:40:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/78ad73e86f45e4994a89/</guid><description>def repeat(str, n): return str * n 文字列の内容をn回だけ繰り返した新しい文字列を生成したいという場合、Pythonでは上の例のように書くことができます。つまり*</description></item><item><title>AWKのrandが同じ乱数列を生成してしまう</title><link>https://nekotheshadow.github.io/qiita-backup/blog/f4f3d339d1919240b6ee/</link><pubDate>Sun, 22 Apr 2018 19:53:24 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/f4f3d339d1919240b6ee/</guid><description>awk(gawk)には乱数を生成する組み込み関数としてrandが用意されているのですが、たとえば以下のようなソースコードで検証ができるように</description></item><item><title>Chromeの場合、submitボタン押下時にボタンをdisabledにすると、フォームデータが送信されない。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1e828a05621aaa3539b1/</link><pubDate>Sun, 01 Apr 2018 23:15:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1e828a05621aaa3539b1/</guid><description>クライアントからデータが多重送信されることを防止するため、submitボタンを押下した瞬間にそのボタン自体を押下不能にすることを考えます。 &amp;lt;form</description></item><item><title>IE11にはファイルをローカルに保存するJavaScriptのAPIが2種類用意されている。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a71d164413cc1dce3060/</link><pubDate>Tue, 13 Mar 2018 22:58:47 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a71d164413cc1dce3060/</guid><description>ダウンロード処理をJavaScriptで実装する場合、言い換えればBlobオブジェクトをローカルストレージに保存する処理をJavaScrip</description></item><item><title>改行を含むcsvをimportしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/884bd00e4440c87d54f1/</link><pubDate>Wed, 07 Mar 2018 00:24:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/884bd00e4440c87d54f1/</guid><description>Db2には外部ファイルを読み込んでバルクインサートする機能としてimportが用意されています。importはいくつかのファイル形式に対応し</description></item><item><title>Python3で整数の最大値や小数の無限大を扱いたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bc4a399b9e4a298d28c6/</link><pubDate>Sun, 04 Mar 2018 23:36:31 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bc4a399b9e4a298d28c6/</guid><description>Python3で整数型の最大値はsys.maxsizeとして定義されています(URL: https://docs.python.jp/3/library/sys.html#sys.maxsize )。たとえばC言語風のforループがサポートされてい</description></item><item><title>trapがどんどん上書きされてしまう</title><link>https://nekotheshadow.github.io/qiita-backup/blog/74af8ad58284e1aa1378/</link><pubDate>Thu, 01 Mar 2018 23:01:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/74af8ad58284e1aa1378/</guid><description>受け取ったシグナルに合わせて、指定した処理を実行してくれるtrap、とても便利ですよね(´・ω・｀) 個人的には「作成した一時ファイルを終了後</description></item><item><title>WebDriverでアクセスしたWebサイトのソースコードを取り出したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/ac70d89bc7797e554967/</link><pubDate>Sun, 25 Feb 2018 22:41:22 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/ac70d89bc7797e554967/</guid><description>WebDriverでアクセスしたWebサイトのソースコード(html)を取り出したいという場合は、webdriverのpage_source</description></item><item><title>CodeIQ「進捗ジエンドマーク」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/52b82ff046aab8e2dc96/</link><pubDate>Sun, 25 Feb 2018 22:17:24 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/52b82ff046aab8e2dc96/</guid><description>CodeIQ「進捗ジエンドマーク」の公開期限が終了したということで、自分の解答をさらしてみたいと思います(´・ω・｀) なおCodeIQはその</description></item><item><title>log4j#FileAppenderでログファイルの生成/オープンをフックしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/32de8d967330c46ee393/</link><pubDate>Sun, 11 Feb 2018 15:12:01 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/32de8d967330c46ee393/</guid><description>需要あるのかしらん(´・ω・｀) FileAppenderにおいてログファイルが生成あるいはopenされるタイミングをフックしたい場合、Fil</description></item><item><title>Selectとforeachでインデックス付きのループを実現したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5cebdeb99e0e029e0905/</link><pubDate>Sat, 10 Feb 2018 15:50:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5cebdeb99e0e029e0905/</guid><description>配列やリストの列挙処理において、列挙される値だけではなく、同時にインデックス/添え字を利用したいということが多々あります。いいかえれば「イン</description></item><item><title>Db2インスタンスの起動と停止に関するメモ</title><link>https://nekotheshadow.github.io/qiita-backup/blog/469cb909a9d0252c7cc1/</link><pubDate>Thu, 01 Feb 2018 00:57:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/469cb909a9d0252c7cc1/</guid><description>Db2関係のプロジェクトのメンバーでも意外に知らない人がいるので、簡単にまとめておきます(´・ω・｀) もっともポピュラーな起動方法(だとわた</description></item><item><title>CodeIQ「進捗ヴェリーグッドマーク」問題に参加しました</title><link>https://nekotheshadow.github.io/qiita-backup/blog/821ea42582de973aad65/</link><pubDate>Thu, 18 Jan 2018 21:40:53 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/821ea42582de973aad65/</guid><description>CodeIQ「進捗ヴェリーグッドマーク」問題の公開が終了したということで、自分の解答を公開したいと思います。なおCodeIQはそのサービスの</description></item><item><title>別々のSystem.Randomインスタンスが同じ乱数列を生成してしまう</title><link>https://nekotheshadow.github.io/qiita-backup/blog/72f0285324100a596979/</link><pubDate>Wed, 17 Jan 2018 23:28:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/72f0285324100a596979/</guid><description>**注意: C#初心者なので、とんちんかんなことをいっているかもしれません。**呼び出すたびに5桁のランダムな整数からなるパスワードを生成する</description></item><item><title>reboot/shutdown後も設定を維持したい場合はulimit -nではなく/etc/security/limits.confを編集する(「Too many open files」「ファイルを開きすぎています」エラー対策)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/841bf59c4f80588baad7/</link><pubDate>Wed, 17 Jan 2018 00:51:45 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/841bf59c4f80588baad7/</guid><description>RHEL7/CentOS7上で開発や運用をしていると「Too many open files」「ファイルを開きすぎています」といったエラーが出ることがあります</description></item><item><title>CodeIQ「進捗いいわけマーク」問題に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1267810314d4eb5b8f68/</link><pubDate>Thu, 11 Jan 2018 23:39:20 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1267810314d4eb5b8f68/</guid><description>「進捗いいわけマーク」問題の公開期限が終了したということで、自分の提出コードを公開したいと思います。利用言語はC#。ここ2-3か月C#の勉強</description></item><item><title>CodeIQ「『タワー・ビルディング』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1d3946ae8934296f5a56/</link><pubDate>Thu, 04 Jan 2018 21:59:15 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1d3946ae8934296f5a56/</guid><description>CodeIQ「『タワー・ビルディング』問題」の公開期間が終了したということで、提出回答(Ruby)を共有したいと思います(´・ω・｀) 詳しい</description></item><item><title>CentOS7.4でDockerをインストール(おまけでDb2 Express-CをDockerで試してみる)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/24c6fa305e2b56f339ea/</link><pubDate>Wed, 03 Jan 2018 18:04:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/24c6fa305e2b56f339ea/</guid><description>注意:本記事は以下の環境により動作確認をしています。 ゲストOS CentOS Linux release 7.4.1708 (Core) ホストOS Windows 10 仮想化ソフト VMware Workstation 14 Player 2018年の正月はC#の勉強をする</description></item><item><title>ゲストのCentOS7からインターネット接続する方法(NAT)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1808d4652c8bd542a8de/</link><pubDate>Sun, 31 Dec 2017 23:57:43 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1808d4652c8bd542a8de/</guid><description>Windows 10 VMware Workstation 14 Player CentOS Linux release 7.4.1708 (Core) という環境のもと、ゲストのCentOSからインターネットに接続するための方法(設定はNAT)をまとめた――というより自</description></item><item><title>CentOS7のインストールの際、同時にGNOME環境を設定する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/38602f87f70585203800/</link><pubDate>Fri, 29 Dec 2017 16:12:56 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/38602f87f70585203800/</guid><description>仮想環境(VMWare)においてCentOSをインストールする方法については、その関連記事がインターネット上で多く見つかりますが、ではこのイ</description></item><item><title>AWKで素数列挙(エラトステネスのふるい・疑似素数による試し割り)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0f1ac17986f1122b1b13/</link><pubDate>Thu, 23 Nov 2017 20:12:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0f1ac17986f1122b1b13/</guid><description>需要あるのかしら(´・ω・｀) まずはエラトステネスのふるい。 BEGIN { upper_bound = 100 for (i = 2; i &amp;lt;= upper_bound; i++) is_prime[i] = 1; for (i = 2; i &amp;lt;= sqrt(upper_bound); i++) { if (!is_prime[i]) continue; for (j = i * 2; j &amp;lt;= upper_bound; j += i)</description></item><item><title>デリミタを指定しつつ、複数の要素を結合したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6a5da10d45912ccf7b15/</link><pubDate>Mon, 20 Nov 2017 23:32:53 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6a5da10d45912ccf7b15/</guid><description>多くの現代的なプログラミング言語ではリストや配列の要素をデリミタを指定しつつ結合するメソッド・関数が用意されています。このような機能のメソッ</description></item><item><title>teraterm風のコピペ方式を「Windows Subsystem for Linux」でも使いたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/d5d116f820bed8fc8f93/</link><pubDate>Tue, 14 Nov 2017 23:49:46 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/d5d116f820bed8fc8f93/</guid><description>teratermのコピペ方式は**「ターミナル上の選択範囲を右クリックするとコピー、同じくターミナル上で右クックするとペースト」**というも</description></item><item><title>ファイルの中間行を行数を指定して抜き出したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/68ef9e7766001a221701/</link><pubDate>Tue, 07 Nov 2017 23:28:02 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/68ef9e7766001a221701/</guid><description>たとえば「このファイルの10行目から20行目までを見たい!」というように、ファイルの中間行を行数を指定して抜き出したいという場合、awkの組</description></item><item><title>LINQでデカルト積を実現したい(Pythonのitertools#productのような機能を実現したい)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a6eb074c19aff769e1f9/</link><pubDate>Mon, 06 Nov 2017 23:07:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a6eb074c19aff769e1f9/</guid><description>Pythonにはitertools#productというデカルト積を簡単に実現できるメソッドが用意されており、個人的には2重ループのネストを</description></item><item><title>リストや配列を生成する際、すべての要素を特定の値で初期化したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/ea0fbad2617b7e263a44/</link><pubDate>Sat, 28 Oct 2017 22:09:57 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/ea0fbad2617b7e263a44/</guid><description>最近はC#に凝っています。LINQとvarが最高すぎて、Javaにはもどれない(´・ω・｀) リストや配列を生成する際、すべての要素を特定の値</description></item><item><title> iconvに関する自分用覚書(基本文法/ 利用できる文字コードを調べたい/変換エラーの文字を無視・置換したい)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/fb12ef59e4c19d06f160/</link><pubDate>Thu, 24 Aug 2017 00:11:26 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/fb12ef59e4c19d06f160/</guid><description>日本社会で働くプログラマ、もとい非英語圏のプログラマにとって避けて通れないものが文字コード。とりわけ日本企業向けの受託開発を主とするSIer</description></item><item><title>grepでバックスラッシュを含む行を検索したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7e7dcae7dde8b8c3bb9f/</link><pubDate>Tue, 15 Aug 2017 22:48:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7e7dcae7dde8b8c3bb9f/</guid><description>grepでバックスラッシュ(\)を検索する機会があったのですが、意外にも「はまった」のでメモとして対応策を残しておきたいと思います。 まず文字</description></item><item><title>ファイル読み込みの際に文字コード関係の例外が発生する場合(File#openの引数にはString#encodeのオプションが利用できる)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b81289697d00efc5f12a/</link><pubDate>Fri, 11 Aug 2017 01:38:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b81289697d00efc5f12a/</guid><description>File.open(&amp;#34;sample.rb&amp;#34;, &amp;#34;r&amp;#34;, :encoding =&amp;gt; Encoding::CP932) do |file| file.each_line do |line| do_something(line) end end ファイル読み込み処理を行うと、頻繁に出くわすのがエンコード関係の例外。Encoding::InvalidByteS</description></item><item><title>実行しているファイルが格納されているディレクトリのパスを取得したい。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/09ff3a423954a2adfe18/</link><pubDate>Tue, 25 Jul 2017 23:10:23 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/09ff3a423954a2adfe18/</guid><description>タイトル通り、実行したファイルが格納されているディレクトリのパスを取得したいという場合、Python3ではどのように書くべきでしょうか? まず</description></item><item><title>「bash -x sample.sh」のデバッグ情報は標準エラー出力に出力されている</title><link>https://nekotheshadow.github.io/qiita-backup/blog/d6e4bb22f146f1101c65/</link><pubDate>Wed, 19 Jul 2017 22:27:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/d6e4bb22f146f1101c65/</guid><description>シェルスクリプト内で実行されたコマンドとその結果をすべて出力してくれるのがbashの-xオプション。「わざわざロギングをコーディングするほど</description></item><item><title>CellTypeを問わず、Cellの値を透過的に取得したい(Apache POI)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2b41b05fb0440ca8410e/</link><pubDate>Sun, 09 Jul 2017 23:55:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2b41b05fb0440ca8410e/</guid><description>Excel大好き日本企業にシステムを納めるJava大好きSIerとして働いている以上、避けては通れないのがApache POI。POIはExc</description></item><item><title>ペースト実行時にそのペーストされた値を取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c05a266075c08b73bddb/</link><pubDate>Mon, 19 Jun 2017 23:30:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c05a266075c08b73bddb/</guid><description>実をいうとJavaScriptは苦手なのですが、しかしそうはいっていられないのがシステムエンジニア稼業。苦手不得意未経験関係なく、どんな無茶</description></item><item><title>enumを利用したSingleton実装のサンプルコード</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1879e8a8e6aec0e86845/</link><pubDate>Mon, 05 Jun 2017 00:26:34 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1879e8a8e6aec0e86845/</guid><description>Javaプログラミングの古典のひとつ『Effective Java』ではSingleton実現にあたってenumを利用することが推奨されていま</description></item><item><title>Integer#parseIntを利用せずに文字列がintに変換できるかどうかを検査する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5c5940b24d83edb78d16/</link><pubDate>Mon, 15 May 2017 23:34:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5c5940b24d83edb78d16/</guid><description>「入力された文字列がint型に変換されるかどうかをチェックしたい」という場合、次のように判定しているソースコードを見かけることがあります。 try</description></item><item><title>リフレクションを利用してmainメソッドを呼び出したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/bbca2c6387cf25de251e/</link><pubDate>Sun, 14 May 2017 21:12:48 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/bbca2c6387cf25de251e/</guid><description>たとえばコマンドラインツールを開発していると、mainメソッドをテストしたりデバッグしたりしたいということがあります。そのような場合リフレク</description></item><item><title>| while read のwhileループ脱出にはbreakではなくexitを利用する(+それに関連するTips)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/39d35d09dd58c26002bb/</link><pubDate>Sat, 13 May 2017 23:22:32 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/39d35d09dd58c26002bb/</guid><description>| while readはbashプログラミングにおいてもっとも使われるイディオムのひとつですが、**このwhileループを脱出する際はbreakではな</description></item><item><title>JSPのカスタムタグを作成するサンプル</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9d2521943760d48ee24f/</link><pubDate>Sun, 07 May 2017 13:25:07 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9d2521943760d48ee24f/</guid><description>jspのカスタムタグを作成することがあったので、そのメモ――というよりサンプルです。ご査収ください(´・ω・｀) まずは要件定義から! サンプル</description></item><item><title>[リフレクション]メソッドがstaticかどうかを判定するにはModifier#isStaticを利用する。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/47858d63e322693630fc/</link><pubDate>Tue, 02 May 2017 00:38:59 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/47858d63e322693630fc/</guid><description>Javaプログラミングにおいて、少しばかり複雑なことをしようとすると、必ず頭をもたげてくるのがリフレクション。リフレクションを利用し、とある</description></item><item><title>[DB2] Loadコマンドに関する自分用メモ(基本文法・進捗状況・Pending)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6e6ac5b258793981fa38/</link><pubDate>Sun, 23 Apr 2017 17:20:30 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6e6ac5b258793981fa38/</guid><description>仕事中に調べたメモを簡単にまとめなおしたものです。そのため時間をかけて調べてまとめあげたという質のものではありません。**要するに自分用のメ</description></item><item><title>staticフィールドを@Autowiredの対象にしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/d61917e8bcf8088a895f/</link><pubDate>Thu, 13 Apr 2017 23:10:41 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/d61917e8bcf8088a895f/</guid><description>とりわけユーティリティクラスの設計に際して、staticフィールドを@Autowiredの対象にしたい場面があります。この場合は対象のsta</description></item><item><title>「配列の要素のうち、条件に一致する最初の要素の位置」をワンライナーで求めたい(Python3)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/76e517efbb510f735782/</link><pubDate>Tue, 07 Mar 2017 01:13:06 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/76e517efbb510f735782/</guid><description>numbers = [3, 5, 4, 2, 1] numbers.index{|val| val % 2 == 0} #=&amp;gt; 2 配列の要素を先頭から見ていき、条件に一致する最初の要素の位置がほしいということがよくあります。例として整数が格</description></item><item><title>プレミアムフライデーを求めるメソッドを作った</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ebf94a8a6d9282e7207/</link><pubDate>Sun, 26 Feb 2017 22:08:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ebf94a8a6d9282e7207/</guid><description>2017年2月24日金曜日から始まったプレミアムフライデー。賛否両論激しいシステムですが、何がともあれ休みが増えることはよいことですね。みな</description></item><item><title>パッケージ配下のクラス一覧を再帰的に探索したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c46b7811f56f22e6588a/</link><pubDate>Sun, 26 Feb 2017 01:33:56 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c46b7811f56f22e6588a/</guid><description>しがないSIerのシステムエンジニアとして日銭を稼ぐ毎日を送っているのですが、「作成したJavaクラスをパッケージ名を付与して一覧化する」と</description></item><item><title>とあるクラスのスーパークラスとインターフェイスを再帰的に取得したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/eb28da0f3514bc8373d3/</link><pubDate>Sat, 25 Feb 2017 23:22:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/eb28da0f3514bc8373d3/</guid><description>プログラム設計書を書く――というかソースコードからプログラム設計書を起こす機会があったのですが、その設計書が「作成したJavaクラスに親クラ</description></item><item><title>CodeIQ「スーパー素数」問題に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/e0e24bc7afdfa965f6aa/</link><pubDate>Fri, 10 Feb 2017 01:07:02 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/e0e24bc7afdfa965f6aa/</guid><description>CodeIQ「スーパー素数」問題の公開期間が終了したということで、自分の答案を公開したいと思います。 利用した言語はBash――なのですが、実</description></item><item><title>ストアドファンクションを利用してcheck制約でサブクエリを発行する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/35dcb9285d70f35f60e4/</link><pubDate>Tue, 31 Jan 2017 01:02:54 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/35dcb9285d70f35f60e4/</guid><description>データの挿入や更新を行う際蓄積されたデータとの比較をしたい、あるいはデータの整合性を確保するためにほかのデータとの関係性を見たいということが</description></item><item><title>CodeIQ「『キャリー・オーバー』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/dd98aa7669e8aadc4cbf/</link><pubDate>Tue, 24 Jan 2017 23:27:21 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/dd98aa7669e8aadc4cbf/</guid><description>CodeIQ「『キャリー・オーバー』問題」の掲載期間が終わったということで、自分の提出コードを公開します。なおほかの方の解答はTogette</description></item><item><title>SQLでフィボナッチ数列を書いた</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5b905ba702d9830f72c0/</link><pubDate>Thu, 19 Jan 2017 00:40:36 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5b905ba702d9830f72c0/</guid><description>以下のクエリはPostgreSQLで動作確認を行っています。 postgres=# select version(); version ------------------------------------------------------------- PostgreSQL 9.6.1, compiled by Visual C++ build 1800, 64-bit (1 行) 再帰呼び出しの課題としてよく利用されるのがフィ</description></item><item><title>木構造の親または子を再帰的に取得する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/d401e0c23892b0d53c2a/</link><pubDate>Tue, 10 Jan 2017 23:37:05 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/d401e0c23892b0d53c2a/</guid><description>注意: 以下のクエリはPostgreSQLにより動作確認を行っています。 postgres=# select version(); version ------------------------------------------------------------- PostgreSQL 9.6.1, compiled by Visual C++ build 1800, 64-bit (1 行) 上のような木構造のデータを次のように</description></item><item><title>SQLで素数列挙を行う</title><link>https://nekotheshadow.github.io/qiita-backup/blog/18348d38eb3f350a9d2e/</link><pubDate>Sun, 08 Jan 2017 00:01:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/18348d38eb3f350a9d2e/</guid><description>注意: 以下のクエリはPostgresSQLで動作確認を行っています。 postgres=# select version(); version ------------------------------------------------------------- PostgreSQL 9.6.1, compiled by Visual C++ build 1800, 64-bit (1 行) いつものように仕事をさぼっていたときの</description></item><item><title>SQLでFizzBuzzを書いた</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b1a946baadaeee92c7ca/</link><pubDate>Thu, 05 Jan 2017 23:47:34 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b1a946baadaeee92c7ca/</guid><description>使い古されたねたではありますが、プログラミングクイズとしてもっとも有名な問題のひとつである「FizzBuzz」をSQLで解いてみました。動作</description></item><item><title>特定のディレクトリの下にあるファイルを再帰的に探索したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0bcee7643144dccb137d/</link><pubDate>Wed, 28 Dec 2016 23:55:50 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0bcee7643144dccb137d/</guid><description>とあるディレクトリの下にあるファイルを再帰的に探索する必要が最近ありました。Javaの標準apiにそのような機能が用意されていると思いきや、</description></item><item><title>エクセルをダウンロードするサーブレットのサンプル。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7f3d32be19aae3517a1c/</link><pubDate>Sun, 25 Dec 2016 22:36:13 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7f3d32be19aae3517a1c/</guid><description>エクセルがダウンロードできるサーブレットを作成する機会があり、なかなかにはまったので、そのサンプルを残しておきたいと思います。なおJavaか</description></item><item><title>クリスマスツリーのアスキーアートを生成するRubyスクリプトを書いた</title><link>https://nekotheshadow.github.io/qiita-backup/blog/428f6209bedd5ef23503/</link><pubDate>Sat, 24 Dec 2016 23:07:57 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/428f6209bedd5ef23503/</guid><description>一人暮らしのワンルームアパートでYouTubeを見ながら、コンビニ弁当をつつくという、日本でもっとも文化的なクリスマスイブの過ごし方をしてい</description></item><item><title>CodeIQ　「『スパイラル・ウォーク』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0adf3d3e9da58f0e6bb3/</link><pubDate>Fri, 23 Dec 2016 01:53:05 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0adf3d3e9da58f0e6bb3/</guid><description>CodeIQ 「『スパイラル・ウォーク』問題」の掲載期間が終わったということで、自分の提出コードを公開したいと思います。詳しい問題内容と解説は後日Cod</description></item><item><title>主キーの有無によりinsertとupdateを切り替えるにはmergeを活用する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4d37fc32870b9fd93f6c/</link><pubDate>Wed, 21 Dec 2016 23:59:01 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4d37fc32870b9fd93f6c/</guid><description>データベースアクセス層(いわゆるDAO)からとあるテーブルの行の更新情報がDBに引き渡されるとします。そのテーブルは主キーによって行が一意に</description></item><item><title>Servletの中で@Autowiredを利用したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c82a90459e11a940cc5f/</link><pubDate>Tue, 20 Dec 2016 23:33:28 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c82a90459e11a940cc5f/</guid><description>Webアプリケーション構築にあたっては原則として「単一言語/単一フレームワーク」であるべきだとは思いますが、現実としてそれが許されない場合も</description></item><item><title>while-readの区切り文字を空白以外に設定したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6757d3d77deb6da9389f/</link><pubDate>Sat, 17 Dec 2016 11:23:45 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6757d3d77deb6da9389f/</guid><description>シェルスクリプトにおいて、要素の区切りは「空白文字」に設定することが一般的です。ただし現実問題として「空白文字」が要素のひとつとして扱わねば</description></item><item><title>ループ中にdefaultdictの未定義領域にアクセスすると例外</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2d9ab4d77d0d56e5a9a7/</link><pubDate>Tue, 13 Dec 2016 00:10:54 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2d9ab4d77d0d56e5a9a7/</guid><description>突然ですが次のコードは例外をスローします。なぜでしょうか? import collections ht = collections.defaultdict(int) ht[0] = ht[1] = 1 x = 2 for ky in ht: if ht[ky + 1] == 0: do_something() #=&amp;gt; RuntimeError: dictionary changed size during iteration Python3ではル</description></item><item><title>配列の最小値を求める</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0ab9fc8bbe8dacd4bddf/</link><pubDate>Wed, 07 Dec 2016 00:25:19 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0ab9fc8bbe8dacd4bddf/</guid><description>正の整数が格納された配列があり、その最小値を求めることを考えます。まずawk厨のわたしとしては、awkを利用する方法が思いつきます。 numbers=(34 65 112 98</description></item><item><title>文字列を1文字ずつに分解する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1d869474086c64a93ba0/</link><pubDate>Tue, 06 Dec 2016 01:20:45 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1d869474086c64a93ba0/</guid><description>bashやshellsciriptにおいて、文字列を1文字ずつに分解するとき、個人的にまず思いつくのはawkを利用する方法です。 echo &amp;#39;helloworld&amp;#39; | awk -v FS=&amp;#39;&amp;#39;</description></item><item><title>CodeIQ「『ディビジョン・サム』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/aaf73e7515571c787698/</link><pubDate>Thu, 01 Dec 2016 23:41:52 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/aaf73e7515571c787698/</guid><description>CodeIQ「『ディビジョン・サム』問題」の掲載期限が終了したということで、自分の提出コードを公開します。ほかの解答者のコードはTogett</description></item><item><title>SQLでは「'」をエスケープする際に「''」を使う</title><link>https://nekotheshadow.github.io/qiita-backup/blog/1573138b4dcfe0821cf4/</link><pubDate>Tue, 29 Nov 2016 01:01:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/1573138b4dcfe0821cf4/</guid><description>SQLでは文字列リテラルとしてシングルクォート(「&amp;rsquo;」)を利用します。そのため文字列中に何も考えずシングルクォートを混ぜていると</description></item><item><title>ディレクトリ構造を無視して圧縮する場合はzipコマンドの-jオプションを使う</title><link>https://nekotheshadow.github.io/qiita-backup/blog/895dcd423082c38366cf/</link><pubDate>Wed, 23 Nov 2016 23:53:09 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/895dcd423082c38366cf/</guid><description>たとえばディレクトリ/foo/barの直下にa.xml/b.xml/c.xmlという3つのxmlファイルがあり、この3つだけをおさめたzip</description></item><item><title>ディレクトリの中身の有無によって条件分岐をしたい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5d6c5f3e5ff35ab34298/</link><pubDate>Sun, 20 Nov 2016 22:39:55 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5d6c5f3e5ff35ab34298/</guid><description>ディレクトリが空ディレクトリかどうかによって条件分岐を行いたいということがよくあると思います。たとえば「対象のディレクトリがファイルやディレ</description></item><item><title>gsubでマッチした部分を置き換え文字の生成に利用したい</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4693cf0ec0847d2130d6/</link><pubDate>Sat, 19 Nov 2016 01:49:43 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4693cf0ec0847d2130d6/</guid><description>gsub(pattern, replace)はpatternにマッチする部分をすべてreplaceに置き換えてくれる便利メソッドです。patternとして正規表現、r</description></item><item><title>LOOPを利用して、標準入力から渡されるデータをリストに格納する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/7eb8694fb1b7c2506591/</link><pubDate>Wed, 26 Oct 2016 21:40:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/7eb8694fb1b7c2506591/</guid><description>とりわけ競技プログラミングなどでは、標準入力から数字や文字列が渡され、それをリストや配列に格納したいということがよくあります。 たとえば次のよ</description></item><item><title>いくつかの条件ごとに更新する行や内容を切り替える</title><link>https://nekotheshadow.github.io/qiita-backup/blog/35f00931ec8336b7e26b/</link><pubDate>Sun, 23 Oct 2016 19:43:35 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/35f00931ec8336b7e26b/</guid><description>同一テーブル内の複数の行を更新する際、行ごとに更新する内容を切り替えたい場合はUPDATEとCASEの合わせ技を用います。 たとえばユーザの個</description></item><item><title>テーブルの途中のN行を取得するいくつかのSQL文</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5de507c0f6c4b9f2f455/</link><pubDate>Sat, 22 Oct 2016 19:32:43 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5de507c0f6c4b9f2f455/</guid><description>ページネーションの実装など、テーブルのN行目から(N + M)行目を取得したい場合、どのようなSQL文を発行すべきでしょうか。まず一番手っ取り早</description></item><item><title>MyBatis-Springでプログラム的にトランザクション管理をする</title><link>https://nekotheshadow.github.io/qiita-backup/blog/2770036dae7436ca18a4/</link><pubDate>Sat, 08 Oct 2016 23:30:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/2770036dae7436ca18a4/</guid><description>残業続きでとても眠いので、ごく簡単に済ませたいと思います。誤字脱字は許してね(´・ω・`) やりたいことはタイトルの通り。MyBatis-Sp</description></item><item><title>CodeIQ「『トライアングル・メイズ』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/952a0c103a0bfc432963/</link><pubDate>Sat, 01 Oct 2016 09:01:17 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/952a0c103a0bfc432963/</guid><description>CodeIQ「『トライアングル・メイズ』問題」の掲載期間が終了したということで、自分が提出したコード(Python3)を公開します。ほかの解</description></item><item><title>reduce/injectで処理を中断するにはbreakを使う(+三項演算子の話)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/73edfc6c3a3083a67156/</link><pubDate>Sun, 25 Sep 2016 20:25:14 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/73edfc6c3a3083a67156/</guid><description>注意: Rubyのバージョンは2.3.0です。それ以前のバージョンあるいはそれ以後のバージョンでは挙動が変化している可能性があります。 redu</description></item><item><title>String#slice!(nth)はIntegerではなく、Stringを返す。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0ac786baf985f53faa90/</link><pubDate>Mon, 19 Sep 2016 11:07:37 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0ac786baf985f53faa90/</guid><description>注意: この記事は2016/09/19現在のものです。またRubyのversionは2.3.0です。 String#slice!は文字列を破壊的</description></item><item><title>@RequestBodyと@Validの両方を利用時に"The request sent by the client was syntactically incorrect"が出る</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c35dc31d9f4b3c453fb1/</link><pubDate>Sat, 10 Sep 2016 23:39:03 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c35dc31d9f4b3c453fb1/</guid><description>残業続きで眠いです……。誤字脱字は勘弁してね(´・ω・`) クライアントからPOSTされたJSONを受け取って、JSONを返すようなコントロー</description></item><item><title>「モンティ・ホール問題」の簡単なシミュレーションプログラムを書いてみる</title><link>https://nekotheshadow.github.io/qiita-backup/blog/0720fa0fe41260dbbf8c/</link><pubDate>Fri, 26 Aug 2016 00:19:19 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/0720fa0fe41260dbbf8c/</guid><description>モンティ・ホール問題は「主観的な答えと確率論にのっとった答えが一致しない」という不思議な問題です。今回はこの「モンティ・ホール問題」の簡単な</description></item><item><title>CodeIQ「『プライム・ホッパー』問題」に挑戦しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/48dc34145361829e22d4/</link><pubDate>Sat, 06 Aug 2016 00:28:04 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/48dc34145361829e22d4/</guid><description>CodeIQ「『プライム・ホッパー』問題」の掲載期間が終わったということで、自分の提出コードを公開します(´・ω・`) require &amp;#34;prime&amp;#34; # 問題のF(p, q)</description></item><item><title>ストゥージソートをPython3で実装(バブルソート&amp;クイックソート)</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c3d37e32c99a43c87b3d/</link><pubDate>Sun, 31 Jul 2016 21:58:56 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c3d37e32c99a43c87b3d/</guid><description>ストゥージソート(stooge sort)というソートがあるそうです。このソートアルゴリズムはとても効率の悪いソートアルゴリズムらしく、バブル</description></item><item><title>Python3のスクリプトでjsonをPOSTする</title><link>https://nekotheshadow.github.io/qiita-backup/blog/324976c7b54623e82b26/</link><pubDate>Thu, 28 Jul 2016 21:03:11 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/324976c7b54623e82b26/</guid><description>ちょっとしたPython3スクリプトでjsonをPOSTしたいということがよくあると思います(適当)。 まずはサンプルコード。 import urllib.request, json if __name__ == &amp;#39;__main__&amp;#39;: url</description></item><item><title>Python3で素数の無限ジェネレータ</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4de8cc0fb0967a1aae68/</link><pubDate>Wed, 27 Jul 2016 22:57:49 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4de8cc0fb0967a1aae68/</guid><description>先日次のような記事を書きました: 「Pythonで素数列挙と素数判定」。これを公開したのち、ふと「素数の無限ジェネレータ」をPython3を作</description></item><item><title>jQueryを利用せずにAjaxを利用するサンプル</title><link>https://nekotheshadow.github.io/qiita-backup/blog/79ad4e0bbac0444a7222/</link><pubDate>Tue, 26 Jul 2016 22:04:00 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/79ad4e0bbac0444a7222/</guid><description>風の噂によれば、世の中には「DOM操作を多用するが、jQueryは禁止」という開発現場があるそうです(血涙) まずはjsonをPOSTする例。</description></item><item><title>Pythonで素数列挙と素数判定</title><link>https://nekotheshadow.github.io/qiita-backup/blog/4ebad619564a48f5a97f/</link><pubDate>Mon, 25 Jul 2016 22:49:41 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/4ebad619564a48f5a97f/</guid><description>たまに自分で使うので、Qiitaに投稿しておきます(´・ω・`) primes(x)はx未満の素数をリストに格納するメソッドです。アルゴリズム</description></item><item><title>__len__の戻り値に気を付ける</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5c68112ce16e459ef72b/</link><pubDate>Sun, 24 Jul 2016 00:22:18 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5c68112ce16e459ef72b/</guid><description>自作のクラスに__len__をオーバーライドし、呼び出したところ、次のようなエラーが発生。 OverflowError: cannot fit &amp;#39;int&amp;#39; into an index-sized integer 原因は__len__の仕様にありま</description></item><item><title>数独ソルバーをPython3で実装</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a7b6f1e050627d862591/</link><pubDate>Sat, 23 Jul 2016 23:06:08 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a7b6f1e050627d862591/</guid><description>先日ネットサーフィン中に次のような記事を見つけました: 「数学のエキスパートが3ヶ月かけて作成した「世界一難しい数独」」。事実かどうかはともか</description></item><item><title>CodeIQ「『アフター・ドット』問題」に参加しました</title><link>https://nekotheshadow.github.io/qiita-backup/blog/27513e31e5ab43484a74/</link><pubDate>Thu, 07 Jul 2016 23:13:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/27513e31e5ab43484a74/</guid><description>CodeIQ「『アフター・ドット』問題」の掲載期限が終了したということで、提出コードを公開したいと思います。なお詳しい内容については、広大な</description></item><item><title>CodeIQ「『マイナー・ゲーム』問題」に挑戦しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/3ac942c2c5b7251ea973/</link><pubDate>Thu, 16 Jun 2016 19:58:24 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/3ac942c2c5b7251ea973/</guid><description>CodeIQ「『マイナー・ゲーム』問題」の掲載期間が終わったということで、自分の提出コードを公開しておきます。なお詳しい問題の概要や解法は広</description></item><item><title>CodeIQ「『レッド・アンド・ホワイト』問題」に挑戦しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/c35ee923ac1b032aafc0/</link><pubDate>Sat, 21 May 2016 11:11:08 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/c35ee923ac1b032aafc0/</guid><description>CodeIQ「『レッド・アンド・ホワイト』問題」の問題掲載期間が終了したということで、自分の提出コードを公開したいと思います。なお詳細な内容</description></item><item><title>Gauche(0.9.4)とPython(3.5.1)で「logと無限大の関係」を比較する</title><link>https://nekotheshadow.github.io/qiita-backup/blog/ded8dcf746738cb4e209/</link><pubDate>Tue, 03 May 2016 22:16:54 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/ded8dcf746738cb4e209/</guid><description>Gauche(0.9.4)でプログラミング中、無限大の対数をとるという処理を行ったところ、Assertion failedなるエラーが発生、G</description></item><item><title>CodeIQ「『ディビジョン・ナイン』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/a2aa22bc25c8a3e51da4/</link><pubDate>Thu, 07 Apr 2016 20:47:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/a2aa22bc25c8a3e51da4/</guid><description>どうでもいいですが、この4月から社会人になりました。毎日5時半に起床、夢の国に向かう電車に揺られて職場まで通っております。研修にもかかわらず</description></item><item><title>Windows10でgit環境を作るまでのメモ。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/207f77b43c92e7f9c026/</link><pubDate>Thu, 31 Mar 2016 17:28:31 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/207f77b43c92e7f9c026/</guid><description>注意 本記事は2016/03/31に作成されたものです OSはWindows10(64bit)です。 本記事には外部サイトへのリンクがありますが、</description></item><item><title>ズンドコキヨシ with Scheme</title><link>https://nekotheshadow.github.io/qiita-backup/blog/48b32ed6a210ab049396/</link><pubDate>Sat, 12 Mar 2016 22:36:09 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/48b32ed6a210ab049396/</guid><description>ここ数日(というほどでもないが)「ズンドコキヨシ」なるブームが到来しているそうです。せっかくなので、ミーハー気分で参加してみようと思います。</description></item><item><title>CodeIQ「『ロング・ロング・ストリング』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/9af5b0ddbcc29b5f3206/</link><pubDate>Thu, 10 Mar 2016 23:57:27 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/9af5b0ddbcc29b5f3206/</guid><description>CodeIQ「『ロング・ロング・ストリング』問題」の掲載期間が終了したということで、自分が提出したコードを公開したいと思います。なお他の方の</description></item><item><title>CodeIQ「『プラス・マイナス・ゼロ』問題」に挑戦しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/704fd870ccba05e2ae94/</link><pubDate>Thu, 18 Feb 2016 13:05:16 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/704fd870ccba05e2ae94/</guid><description>CodeIQ「『プラス・マイナス・ゼロ』問題」の掲載期間が終了したということで、わたしが提出したRubyコードを公開したいと思います。 @n = gets.to_i</description></item><item><title>CodeIQの入出力サンプル&lt;Scheme>について</title><link>https://nekotheshadow.github.io/qiita-backup/blog/b202822e628891d24484/</link><pubDate>Thu, 11 Feb 2016 21:31:57 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/b202822e628891d24484/</guid><description>注意:本記事は2015/2/11に書かれたものです。 2016/2/12追記 先日大規模アップデートされたCodeIQの入出力サンプル表ですが、</description></item><item><title>「『スクエア・カルテット』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/ca58449030611347b60c/</link><pubDate>Fri, 15 Jan 2016 18:05:29 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/ca58449030611347b60c/</guid><description>CodeIQ「『スクエア・カルテット』問題」の出題期間が終了したということで、自分が提出したコードを公表してみたいと思います。最初はPyth</description></item><item><title>CodeIQ「『ルート・パワー』問題」に参加しました。</title><link>https://nekotheshadow.github.io/qiita-backup/blog/5f44222639f44d55310a/</link><pubDate>Thu, 24 Dec 2015 11:25:07 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/5f44222639f44d55310a/</guid><description>「『ルート・パワー』問題」とは CodeIQ「『ルート・パワー』問題」の掲載期間が終わり、提出コードを公開してよいとのことなので、その流れに乗</description></item><item><title>CodeIQ「マヨイドーロ問題」に参加しました</title><link>https://nekotheshadow.github.io/qiita-backup/blog/cf0a9d3e949335916b74/</link><pubDate>Thu, 17 Dec 2015 18:11:25 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/cf0a9d3e949335916b74/</guid><description>「マヨイドーロ問題」とは タイトルの通りですが、CodeIQ「マヨイドーロ問題」の解答期限が過ぎたということで、提出コードを公開してみたいと思</description></item><item><title>RubyのPrimeライブラリを利用する際に注意したいこと</title><link>https://nekotheshadow.github.io/qiita-backup/blog/6567ac7b4d1dc56095d2/</link><pubDate>Wed, 16 Dec 2015 22:59:33 +0900</pubDate><guid>https://nekotheshadow.github.io/qiita-backup/blog/6567ac7b4d1dc56095d2/</guid><description>_以下の内容はRuby2.2.3/Windows10で検証したものです。したがって違うバージョンやOSではまったく違う挙動を示す可能性があり</description></item></channel></rss>