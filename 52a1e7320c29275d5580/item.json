{"rendered_body":"<p>goreleaserは、Goプロジェクトをビルドして、各OS向けの実行可能バイナリやDocker Imageを作成し、GithubのReleaseやDocker Repositoryに配布してくれるツールです。この記事ではGithub Actionsを利用して、goreleaserによるビルドから配布までを自動化するまでの手順を示します。</p>\n\n<h1>\n<span id=\"1-goreleaserのインストール\" class=\"fragment\"></span><a href=\"#1-goreleaser%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>1) goreleaserのインストール</h1>\n\n<p>次のURLを参考にgoreleaserをインストールし、<code>goreleaser</code>コマンドを利用できる環境にします: <a href=\"https://goreleaser.com/install/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://goreleaser.com/install/</a></p>\n\n<p>個人的には公式のDockerイメージを使うのが一番楽かと思います。</p>\n\n<h1>\n<span id=\"2-goreleaserymlの作成\" class=\"fragment\"></span><a href=\"#2-goreleaseryml%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>2) .goreleaser.ymlの作成</h1>\n\n<p>プロジェクトディレクトリの直下に<code>goreleaser.yml</code>を作成します。作成には<code>goreleaser init</code>コマンドを利用します。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>cd project-directory\ngoreleaser init\n</pre></div></div>\n\n<p>goreleaserのインストールにDockerを利用した場合は、次のようにしてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>cd project-directory\ndocker run --rm --privileged \\\n  -v $PWD:/src \\\n  -w /src \\\n  goreleaser/goreleaser init\n</pre></div></div>\n\n<h1>\n<span id=\"3-goreleaserymlの修正\" class=\"fragment\"></span><a href=\"#3-goreleaseryml%E3%81%AE%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>3) .goreleaser.ymlの修正</h1>\n\n<p>必要な場合は<code>.goreleaser.yml</code>を修正してください。もっとも作成した初期の状態でも、windows、Linux、OSX向けの実行可能バイナリを作成してくれる状況にはなっています。</p>\n\n<h1>\n<span id=\"4-ワークフローファイルの作成\" class=\"fragment\"></span><a href=\"#4-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4) ワークフローファイルの作成</h1>\n\n<p>Github Actionsでgoreleaserを利用する場合は公式のワークフローを利用するのがもっとも便利です。プロジェクトディレクトリ直下に<code>.github/workflows</code>ディレクトリを作成し、任意の名前の<code>.yml</code>ファイルを作成します。<strong>この<code>.yml</code>ファイルの中身は以下のURLの<code>README.md &gt; Usage &gt; Workflow</code>をそのままコピペすればよいです: <a href=\"https://github.com/goreleaser/goreleaser-action\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/goreleaser/goreleaser-action</a></strong></p>\n\n<h1>\n<span id=\"5-ワークフローファイルの修正\" class=\"fragment\"></span><a href=\"#5-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>5) ワークフローファイルの修正</h1>\n\n<p>必要な場合は、ワークフローファイルを修正してください。</p>\n\n<h1>\n<span id=\"6-ワークフローの起動\" class=\"fragment\"></span><a href=\"#6-%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%95%E3%83%AD%E3%83%BC%E3%81%AE%E8%B5%B7%E5%8B%95\"><i class=\"fa fa-link\"></i></a>6) ワークフローの起動</h1>\n\n<p>あとはワークフローファイルに書かれた条件を実現して、Github Actionsを起動するだけです。</p>\n","body":"goreleaserは、Goプロジェクトをビルドして、各OS向けの実行可能バイナリやDocker Imageを作成し、GithubのReleaseやDocker Repositoryに配布してくれるツールです。この記事ではGithub Actionsを利用して、goreleaserによるビルドから配布までを自動化するまでの手順を示します。\n# 1) goreleaserのインストール\n\n次のURLを参考にgoreleaserをインストールし、`goreleaser`コマンドを利用できる環境にします: https://goreleaser.com/install/\n\n個人的には公式のDockerイメージを使うのが一番楽かと思います。\n\n# 2) .goreleaser.ymlの作成\n\nプロジェクトディレクトリの直下に`goreleaser.yml`を作成します。作成には`goreleaser init`コマンドを利用します。\n\n```\ncd project-directory\ngoreleaser init\n```\n\ngoreleaserのインストールにDockerを利用した場合は、次のようにしてください。\n\n```\ncd project-directory\ndocker run --rm --privileged \\\n  -v $PWD:/src \\\n  -w /src \\\n  goreleaser/goreleaser init\n```\n\n# 3) .goreleaser.ymlの修正\n\n必要な場合は`.goreleaser.yml`を修正してください。もっとも作成した初期の状態でも、windows、Linux、OSX向けの実行可能バイナリを作成してくれる状況にはなっています。\n\n# 4) ワークフローファイルの作成\n\nGithub Actionsでgoreleaserを利用する場合は公式のワークフローを利用するのがもっとも便利です。プロジェクトディレクトリ直下に`.github/workflows`ディレクトリを作成し、任意の名前の`.yml`ファイルを作成します。__この`.yml`ファイルの中身は以下のURLの`README.md > Usage > Workflow`をそのままコピペすればよいです: https://github.com/goreleaser/goreleaser-action__\n\n\n\n# 5) ワークフローファイルの修正\n\n必要な場合は、ワークフローファイルを修正してください。\n\n# 6) ワークフローの起動\n\nあとはワークフローファイルに書かれた条件を実現して、Github Actionsを起動するだけです。\n\n","coediting":false,"comments_count":0,"created_at":"2020-09-10T23:40:18+09:00","group":null,"id":"52a1e7320c29275d5580","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Go","versions":[]},{"name":"goreleaser","versions":[]}],"title":"goreleaserをGithub Actionsで利用するまでのQuick Start","updated_at":"2020-09-10T23:40:18+09:00","url":"https://qiita.com/neko_the_shadow/items/52a1e7320c29275d5580","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":166,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}