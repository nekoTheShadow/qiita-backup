{"rendered_body":"\n<h1>\n<span id=\"マヨイドーロ問題とは\" class=\"fragment\"></span><a href=\"#%E3%83%9E%E3%83%A8%E3%82%A4%E3%83%89%E3%83%BC%E3%83%AD%E5%95%8F%E9%A1%8C%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>「マヨイドーロ問題」とは</h1>\n\n<p>タイトルの通りですが、<a href=\"https://codeiq.jp/q/2549\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「マヨイドーロ問題」</a>の解答期限が過ぎたということで、提出コードを公開してみたいと思います。この問題は「数学ガール」シリーズでおなじみ(?)の<a href=\"https://twitter.com/hyuki\" rel=\"nofollow noopener\" target=\"_blank\">結城浩先生</a>による出題で、正解者のうち10名に最新刊<a href=\"http://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB%E3%81%AE%E7%A7%98%E5%AF%86%E3%83%8E%E3%83%BC%E3%83%88-%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%81%AE%E7%9C%9F%E5%AE%9F-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797382325\" rel=\"nofollow noopener\" target=\"_blank\">『数学ガールの秘密ノート／ベクトルの真実』</a>がプレゼントされるという企画でした。ものがもらえるかもしれないという期待と、先生の知名度および高邁なお人柄が影響してか、挑戦人数が700名を超えるというすごい事態になっていました。</p>\n\n<p>さて実際の問題ですが、どうやら後日<a href=\"https://codeiq.jp/magazine/\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQMagazine</a>あたりで、解説記事とともに公開されるようなので、ここでは一応伏しておきます。公開後覚えていればリンクを張り付けておきます。まあ広大なネットの海を探せば見つかるとか見つからないとか……。</p>\n\n<hr>\n\n<p><strong>2015/12/24追記:</strong><br>\n結城先生ご本人による解説記事が公開されていました。というと今さっき知ったみたいですが、実は前に知っていたものの、ここに追記するのを忘れていたという……。<br>\n<a href=\"https://codeiq.jp/magazine/2015/12/35521/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codeiq.jp/magazine/2015/12/35521/</a></p>\n\n<hr>\n\n<h1>\n<span id=\"提出コード\" class=\"fragment\"></span><a href=\"#%E6%8F%90%E5%87%BA%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>提出コード</h1>\n\n<p>以下はわたしが実際に提出し、無事合格となったソースコードです。使用言語はRuby。たぶん一発合格だったはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><span class=\"no\">N</span> <span class=\"o\">=</span> <span class=\"nb\">gets</span><span class=\"p\">.</span><span class=\"nf\">to_i</span>\n\n<span class=\"c1\"># インデックスが現在地と方向、要素が次の地点となる配列</span>\n<span class=\"c1\"># (a, b , c) = (0, 1, 2)</span>\n<span class=\"c1\"># (y, z) = (3, 4)</span>\n<span class=\"c1\"># (left, right) = (0, 1)</span>\n<span class=\"vi\">@table</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># 現在地s、方向d、残り回数n : @memo[s][d][n] = f(s, d, n)</span>\n<span class=\"vi\">@memo</span> <span class=\"o\">=</span> <span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">){</span><span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">){</span><span class=\"no\">Array</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"no\">N</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)}}</span>\n\n<span class=\"c1\"># yにたどり着くルートの総数Pを返す</span>\n<span class=\"c1\"># s : 現在地(0, 1, 2, 3, 4)</span>\n<span class=\"c1\"># d : 方向(0, 1)</span>\n<span class=\"c1\"># n : 方向を変えることができる回数(0..Nを満たす整数)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"vi\">@memo</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">][</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">||=</span> <span class=\"k\">case</span>\n        <span class=\"k\">when</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"c1\"># yにたどり着いた</span>\n        <span class=\"k\">when</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"mi\">4</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"c1\"># zにたどり着いた</span>\n        <span class=\"k\">when</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"vi\">@table</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"c1\"># 方向を変えられない場合はそのまま進む</span>\n        <span class=\"k\">else</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"vi\">@table</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">][</span><span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"vi\">@table</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">][</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">d</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">d</span><span class=\"p\">),</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"c1\"># そのまま進む + 方向を変えて進む</span>\n    <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># == main ==</span>\n<span class=\"c1\"># スタート地点 : 1 (b)</span>\n<span class=\"c1\"># 方向 : 1 (right)</span>\n<span class=\"c1\"># 方向を変えることができる回数 : N</span>\n\n<span class=\"nb\">p</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"no\">N</span><span class=\"p\">)</span>\n</pre></div></div>\n\n<p>どうやらフィボナッチ数列や漸化式を利用することが求められていたようですが、これを書いている人は頭からっぽ系男子なためにまったく思いつきませんでした……。そこで再帰(正確にはメモ化再帰)で何とかしています。ただこれも場合によっては悪手で、N=2000程度だから無事合格だったものの、Nの値がもっと大きくなるとstack too deepあたりを起こして、にっちもさっちもいかなくなる可能性があります。動的計画法などを利用して、再帰からふつうのループに書き換えるべきでした。もっとも再帰を使うととてもソースコードがすっきりするので、見栄えは非常に良くなるのですが……。</p>\n\n<p>それはともかくわたしの提出コードで行っていることは実に単純。「今どこにいるのか」「どちらを向いているのか」「あと何回方向転換できるのか」。もとめる道のりの総数Pはこの3つのファクターによって決まります。よってこれらを変数とする関数(returnはもちろんP)を作ってやり、動点の動き方に合わせて、関数を組み合わせてやるだけです。ただしそのまま組み合わせるだけだと、単純な再帰になってしまい、非常に効率が悪いというか、同じ計算を何度もしてしまいます。そこで1度計算した値を覚えておくことで、効率化を図っています。</p>\n\n<h1>\n<span id=\"こんな記事よりも\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%82%93%E3%81%AA%E8%A8%98%E4%BA%8B%E3%82%88%E3%82%8A%E3%82%82\"><i class=\"fa fa-link\"></i></a>こんな記事よりも……</h1>\n\n<p>というわけで、わたしの方法論はさほどほめられたものではありません。とりあえず解けたというだけです。それよりももっとよいコードを参加者の皆さんが公開しており、ありがいことに出題者の結城先生自らそれをまとめてくださっています。そちらをご参考のほどに。</p>\n\n<p><a href=\"http://togetter.com/li/913642\" rel=\"nofollow noopener\" target=\"_blank\">結城浩の「マヨイドーロ問題」解答リンク集</a></p>\n","body":"# 「マヨイドーロ問題」とは\n\nタイトルの通りですが、[CodeIQ「マヨイドーロ問題」](https://codeiq.jp/q/2549)の解答期限が過ぎたということで、提出コードを公開してみたいと思います。この問題は「数学ガール」シリーズでおなじみ(?)の[結城浩先生](https://twitter.com/hyuki)による出題で、正解者のうち10名に最新刊[『数学ガールの秘密ノート／ベクトルの真実』](http://www.amazon.co.jp/%E6%95%B0%E5%AD%A6%E3%82%AC%E3%83%BC%E3%83%AB%E3%81%AE%E7%A7%98%E5%AF%86%E3%83%8E%E3%83%BC%E3%83%88-%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%81%AE%E7%9C%9F%E5%AE%9F-%E7%B5%90%E5%9F%8E-%E6%B5%A9/dp/4797382325)がプレゼントされるという企画でした。ものがもらえるかもしれないという期待と、先生の知名度および高邁なお人柄が影響してか、挑戦人数が700名を超えるというすごい事態になっていました。\n\nさて実際の問題ですが、どうやら後日[CodeIQMagazine](https://codeiq.jp/magazine/)あたりで、解説記事とともに公開されるようなので、ここでは一応伏しておきます。公開後覚えていればリンクを張り付けておきます。まあ広大なネットの海を探せば見つかるとか見つからないとか……。\n\n***\n__2015/12/24追記:__\n結城先生ご本人による解説記事が公開されていました。というと今さっき知ったみたいですが、実は前に知っていたものの、ここに追記するのを忘れていたという……。\nhttps://codeiq.jp/magazine/2015/12/35521/\n***\n\n# 提出コード\n\n以下はわたしが実際に提出し、無事合格となったソースコードです。使用言語はRuby。たぶん一発合格だったはずです。\n\n```rb\nN = gets.to_i\n\n# インデックスが現在地と方向、要素が次の地点となる配列\n# (a, b , c) = (0, 1, 2)\n# (y, z) = (3, 4)\n# (left, right) = (0, 1)\n@table = [\n    [3, 1],\n    [0, 2],\n    [1, 4]\n]\n\n# 現在地s、方向d、残り回数n : @memo[s][d][n] = f(s, d, n)\n@memo = Array.new(5){Array.new(2){Array.new(N + 1)}}\n\n# yにたどり着くルートの総数Pを返す\n# s : 現在地(0, 1, 2, 3, 4)\n# d : 方向(0, 1)\n# n : 方向を変えることができる回数(0..Nを満たす整数)\ndef f(s, d, n)\n    @memo[s][d][n] ||= case\n        when s == 3 then 1 # yにたどり着いた\n        when s == 4 then 0 # zにたどり着いた\n        when n == 0 then f(@table[s][d], d, n) # 方向を変えられない場合はそのまま進む\n        else f(@table[s][d], d, n) + f(@table[s][1 - d], (1 - d), n - 1) # そのまま進む + 方向を変えて進む\n    end\nend\n\n# == main ==\n# スタート地点 : 1 (b)\n# 方向 : 1 (right)\n# 方向を変えることができる回数 : N\n\np f(1, 1, N)\n```\n\nどうやらフィボナッチ数列や漸化式を利用することが求められていたようですが、これを書いている人は頭からっぽ系男子なためにまったく思いつきませんでした……。そこで再帰(正確にはメモ化再帰)で何とかしています。ただこれも場合によっては悪手で、N=2000程度だから無事合格だったものの、Nの値がもっと大きくなるとstack too deepあたりを起こして、にっちもさっちもいかなくなる可能性があります。動的計画法などを利用して、再帰からふつうのループに書き換えるべきでした。もっとも再帰を使うととてもソースコードがすっきりするので、見栄えは非常に良くなるのですが……。\n\nそれはともかくわたしの提出コードで行っていることは実に単純。「今どこにいるのか」「どちらを向いているのか」「あと何回方向転換できるのか」。もとめる道のりの総数Pはこの3つのファクターによって決まります。よってこれらを変数とする関数(returnはもちろんP)を作ってやり、動点の動き方に合わせて、関数を組み合わせてやるだけです。ただしそのまま組み合わせるだけだと、単純な再帰になってしまい、非常に効率が悪いというか、同じ計算を何度もしてしまいます。そこで1度計算した値を覚えておくことで、効率化を図っています。\n\n# こんな記事よりも……\n\nというわけで、わたしの方法論はさほどほめられたものではありません。とりあえず解けたというだけです。それよりももっとよいコードを参加者の皆さんが公開しており、ありがいことに出題者の結城先生自らそれをまとめてくださっています。そちらをご参考のほどに。\n\n[結城浩の「マヨイドーロ問題」解答リンク集](http://togetter.com/li/913642)\n\n\n","coediting":false,"comments_count":0,"created_at":"2015-12-17T18:11:25+09:00","group":null,"id":"cf0a9d3e949335916b74","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"codeiq","versions":[]}],"title":"CodeIQ「マヨイドーロ問題」に参加しました","updated_at":"2015-12-24T11:29:01+09:00","url":"https://qiita.com/neko_the_shadow/items/cf0a9d3e949335916b74","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":173,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}