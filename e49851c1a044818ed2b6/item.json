{"rendered_body":"<p>ディレクトリを再帰的に削除する処理、要するに<code>rm -rf</code>と同等の処理をJavaで実装する機会があったので、メモを残しておきます(´・ω・｀) 今回の処理に限らず、ディレクトリを再帰的に処理したい場合は<code>Files.walkTree</code>が便利です。<code>Files.walkTree</code>は第1引数に処理対象であるディレクトリのパス、第2引数にファイルやディレクトリを検出した際のふるまいを定義した<code>FileVisitor</code>を与えることで、再帰的な処理を簡単に実装することができます。</p>\n\n<p>さて<code>FileVisitor</code>はインターフェイスで、4つのメソッドの実装を要求されるのですが、<code>SimpleFileVisitor</code>クラスを継承すれば、必要なメソッドをオーバライドするだけで、簡単に目的を達成することができます。たとえば、ディレクトリを再帰的にたどりながら、すべてのファイルとディレクトリを削除する<code>FileVisitor</code>は次のようにして作成することができます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">RemoveRecurseFileVisitor.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.io.UncheckedIOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.FileVisitResult</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Files</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Path</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.SimpleFileVisitor</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.attribute.BasicFileAttributes</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">RemoveRecurseFileVisitor</span> <span class=\"kd\">extends</span> <span class=\"nc\">SimpleFileVisitor</span><span class=\"o\">&lt;</span><span class=\"nc\">Path</span><span class=\"o\">&gt;</span> <span class=\"o\">{</span>\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">FileVisitResult</span> <span class=\"nf\">visitFile</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">file</span><span class=\"o\">,</span> <span class=\"nc\">BasicFileAttributes</span> <span class=\"n\">attrs</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">delete</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">FileVisitResult</span> <span class=\"nf\">postVisitDirectory</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">dir</span><span class=\"o\">,</span> <span class=\"nc\">IOException</span> <span class=\"n\">exc</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nf\">delete</span><span class=\"o\">(</span><span class=\"n\">dir</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">FileVisitResult</span> <span class=\"nf\">delete</span><span class=\"o\">(</span><span class=\"nc\">Path</span> <span class=\"n\">path</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">try</span> <span class=\"o\">{</span>\n            <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">deleteIfExists</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">);</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"removed '%s'%n\"</span><span class=\"o\">,</span> <span class=\"n\">path</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"nc\">FileVisitResult</span><span class=\"o\">.</span><span class=\"na\">CONTINUE</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">UncheckedIOException</span><span class=\"o\">(</span><span class=\"n\">e</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>では作成したコードを実際に動かしてみます。まずは以下に示す一連のコマンドを順番に実行します。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nb\">mkdir</span> <span class=\"nt\">-p</span> dir01/dir02/dir03\n<span class=\"nb\">touch </span>dir01/file1\n<span class=\"nb\">touch </span>dir01/dir02/file2\n<span class=\"nb\">touch </span>dir01/dir02/file3\n<span class=\"nb\">touch </span>dir01/dir02/dir03/file4\n<span class=\"nb\">touch </span>dir01/dir02/dir03/file5\n<span class=\"nb\">touch </span>dir01/dir02/dir03/file6\n</pre></div></div>\n\n<p>すると次のようなディレクトリ・ファイルが作成されるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>find dir1/ <span class=\"nt\">-exec</span> <span class=\"nb\">stat</span> <span class=\"nt\">-c</span> <span class=\"s1\">'%n (%F)'</span> <span class=\"o\">{}</span> <span class=\"se\">\\;</span>\ndir1/ <span class=\"o\">(</span>directory<span class=\"o\">)</span>\ndir1/dir2 <span class=\"o\">(</span>directory<span class=\"o\">)</span>\ndir1/dir2/dir3 <span class=\"o\">(</span>directory<span class=\"o\">)</span>\ndir1/dir2/dir3/txt4 <span class=\"o\">(</span>regular empty file<span class=\"o\">)</span>\ndir1/dir2/dir3/txt5 <span class=\"o\">(</span>regular empty file<span class=\"o\">)</span>\ndir1/dir2/dir3/txt6 <span class=\"o\">(</span>regular empty file<span class=\"o\">)</span>\ndir1/dir2/txt2 <span class=\"o\">(</span>regular empty file<span class=\"o\">)</span>\ndir1/dir2/txt3 <span class=\"o\">(</span>regular empty file<span class=\"o\">)</span>\ndir1/txt1 <span class=\"o\">(</span>regular empty file<span class=\"o\">)</span>\n</pre></div></div>\n\n<p>ここで<code>RemoveRecurseFileVisitor</code>を利用して、<code>dir1</code>とその配下にあるファイルとディレクトリを削除する<code>Main.java</code>を作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.io.IOException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Files</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.nio.file.Paths</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">IOException</span> <span class=\"o\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\"dir1\"</span><span class=\"o\">);</span>\n        <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">walkFileTree</span><span class=\"o\">(</span><span class=\"n\">target</span><span class=\"o\">,</span> <span class=\"k\">new</span> <span class=\"nc\">RemoveRecurseFileVisitor</span><span class=\"o\">());</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>あとはこれをコンパイル&amp;実行すると、まずは標準出力に削除ログが出力されることが確認できるはずです(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>removed 'dir1\\dir2\\dir3\\txt4'\nremoved 'dir1\\dir2\\dir3\\txt5'\nremoved 'dir1\\dir2\\dir3\\txt6'\nremoved 'dir1\\dir2\\dir3'\nremoved 'dir1\\dir2\\txt2'\nremoved 'dir1\\dir2\\txt3'\nremoved 'dir1\\dir2'\nremoved 'dir1\\txt1'\nremoved 'dir1'\n</pre></div></div>\n\n<p>以下のようなコマンドで、ディレクトリ<code>dir1</code>とその配下すべてが削除されていることが確認できます。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">ls</span> <span class=\"nt\">-l</span> dir1\n<span class=\"nb\">ls</span>: cannot access <span class=\"s1\">'dir1'</span>: No such file or directory\n</pre></div></div>\n\n<p>参考: <a href=\"https://docs.oracle.com/javase/tutorial/essential/io/walk.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.oracle.com/javase/tutorial/essential/io/walk.html</a></p>\n","body":"ディレクトリを再帰的に削除する処理、要するに`rm -rf`と同等の処理をJavaで実装する機会があったので、メモを残しておきます(´・ω・｀) 今回の処理に限らず、ディレクトリを再帰的に処理したい場合は`Files.walkTree`が便利です。`Files.walkTree`は第1引数に処理対象であるディレクトリのパス、第2引数にファイルやディレクトリを検出した際のふるまいを定義した`FileVisitor`を与えることで、再帰的な処理を簡単に実装することができます。\n\nさて`FileVisitor`はインターフェイスで、4つのメソッドの実装を要求されるのですが、`SimpleFileVisitor`クラスを継承すれば、必要なメソッドをオーバライドするだけで、簡単に目的を達成することができます。たとえば、ディレクトリを再帰的にたどりながら、すべてのファイルとディレクトリを削除する`FileVisitor`は次のようにして作成することができます。\n\n```java:RemoveRecurseFileVisitor.java\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.file.FileVisitResult;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.SimpleFileVisitor;\nimport java.nio.file.attribute.BasicFileAttributes;\n\npublic class RemoveRecurseFileVisitor extends SimpleFileVisitor<Path> {\n    @Override\n    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n        return delete(file);\n    }\n    \n    @Override\n    public FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n        return delete(dir);\n    }\n    \n    private FileVisitResult delete(Path path) {\n        try {\n            Files.deleteIfExists(path);\n            System.out.printf(\"removed '%s'%n\", path);\n            return FileVisitResult.CONTINUE;\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}\n```\n\nでは作成したコードを実際に動かしてみます。まずは以下に示す一連のコマンドを順番に実行します。\n\n```bash\nmkdir -p dir01/dir02/dir03\ntouch dir01/file1\ntouch dir01/dir02/file2\ntouch dir01/dir02/file3\ntouch dir01/dir02/dir03/file4\ntouch dir01/dir02/dir03/file5\ntouch dir01/dir02/dir03/file6\n```\n\nすると次のようなディレクトリ・ファイルが作成されるはずです。\n\n```bash\n$ find dir1/ -exec stat -c '%n (%F)' {} \\;\ndir1/ (directory)\ndir1/dir2 (directory)\ndir1/dir2/dir3 (directory)\ndir1/dir2/dir3/txt4 (regular empty file)\ndir1/dir2/dir3/txt5 (regular empty file)\ndir1/dir2/dir3/txt6 (regular empty file)\ndir1/dir2/txt2 (regular empty file)\ndir1/dir2/txt3 (regular empty file)\ndir1/txt1 (regular empty file)\n```\n\nここで`RemoveRecurseFileVisitor`を利用して、`dir1`とその配下にあるファイルとディレクトリを削除する`Main.java`を作成します。\n\n```java:Main.java\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        var target = Paths.get(\"dir1\");\n        Files.walkFileTree(target, new RemoveRecurseFileVisitor());\n    }\n}\n```\n\nあとはこれをコンパイル&実行すると、まずは標準出力に削除ログが出力されることが確認できるはずです(´・ω・｀)\n\n```\nremoved 'dir1\\dir2\\dir3\\txt4'\nremoved 'dir1\\dir2\\dir3\\txt5'\nremoved 'dir1\\dir2\\dir3\\txt6'\nremoved 'dir1\\dir2\\dir3'\nremoved 'dir1\\dir2\\txt2'\nremoved 'dir1\\dir2\\txt3'\nremoved 'dir1\\dir2'\nremoved 'dir1\\txt1'\nremoved 'dir1'\n```\n\n以下のようなコマンドで、ディレクトリ`dir1`とその配下すべてが削除されていることが確認できます。\n\n```bash\n$ ls -l dir1\nls: cannot access 'dir1': No such file or directory\n```\n\n参考: https://docs.oracle.com/javase/tutorial/essential/io/walk.html\n","coediting":false,"comments_count":0,"created_at":"2018-09-06T22:47:59+09:00","group":null,"id":"e49851c1a044818ed2b6","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"Javaでrm -rfを実装する。","updated_at":"2018-09-06T22:47:59+09:00","url":"https://qiita.com/neko_the_shadow/items/e49851c1a044818ed2b6","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":163,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}