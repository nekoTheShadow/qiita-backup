{"rendered_body":"\n<h1>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h1>\n\n<p>商品在庫を管理するシステム構築にあたり、まず在庫数を商品ごとに格納しているinventoryテーブルがあるとします。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">goods</th>\n<th style=\"text-align: right\">pieces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">夏タイヤ</td>\n<td style=\"text-align: right\">10</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">冬タイヤ</td>\n<td style=\"text-align: right\">20</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ホイール</td>\n<td style=\"text-align: right\">30</td>\n</tr>\n</tbody>\n</table>\n\n<p>次に商品がいつどれだけ入荷されるかの履歴や予定を格納しているarrivalテーブルがあります。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">goods</th>\n<th style=\"text-align: right\">created_at</th>\n<th style=\"text-align: right\">pieces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">夏タイヤ</td>\n<td style=\"text-align: right\">2021/03/31</td>\n<td style=\"text-align: right\">1</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">冬タイヤ</td>\n<td style=\"text-align: right\">2021/03/31</td>\n<td style=\"text-align: right\">2</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ホイール</td>\n<td style=\"text-align: right\">2021/03/31</td>\n<td style=\"text-align: right\">3</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">夏タイヤ</td>\n<td style=\"text-align: right\">2021/04/01</td>\n<td style=\"text-align: right\">4</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">夏タイヤ</td>\n<td style=\"text-align: right\">2021/04/01</td>\n<td style=\"text-align: right\">5</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">冬タイヤ</td>\n<td style=\"text-align: right\">2021/04/01</td>\n<td style=\"text-align: right\">6</td>\n</tr>\n</tbody>\n</table>\n\n<p>ここで2021/04/01になったので、2021/04/01に到着する商品数を在庫数に足してやる必要があります。つまり、arrivalテーブルから2021/04/01に到着する商品を取り出して、inventoryテーブルのpicesに足しこむようなUPDATE文を作る必要があります。</p>\n\n<p>なお実行後のinventoryテーブルは以下のようになるはずです。</p>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left\">goods</th>\n<th style=\"text-align: right\">pieces</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left\">夏タイヤ</td>\n<td style=\"text-align: right\">19</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">冬タイヤ</td>\n<td style=\"text-align: right\">26</td>\n</tr>\n<tr>\n<td style=\"text-align: left\">ホイール</td>\n<td style=\"text-align: right\">30</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id=\"解法1\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%951\"><i class=\"fa fa-link\"></i></a>解法1</h1>\n\n<p>もっともべたに書くと次のようなUPDATE文になるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">UPDATE</span> <span class=\"n\">inventory</span>\n<span class=\"k\">SET</span> <span class=\"n\">pieces</span> <span class=\"o\">=</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">pieces</span> <span class=\"o\">+</span> <span class=\"p\">(</span>\n  <span class=\"k\">SELECT</span> <span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"n\">pieces</span><span class=\"p\">)</span> \n  <span class=\"k\">FROM</span> <span class=\"n\">arrival</span>\n  <span class=\"k\">WHERE</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">goods</span> <span class=\"o\">=</span> <span class=\"n\">arrival</span><span class=\"p\">.</span><span class=\"n\">goods</span>\n  <span class=\"k\">AND</span> <span class=\"n\">arrival</span><span class=\"p\">.</span><span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"s1\">'2021-04-01'</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"k\">EXISTS</span> <span class=\"p\">(</span>\n  <span class=\"k\">SELECT</span> <span class=\"o\">*</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">arrival</span>\n  <span class=\"k\">WHERE</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">goods</span> <span class=\"o\">=</span> <span class=\"n\">arrival</span><span class=\"p\">.</span><span class=\"n\">goods</span>\n  <span class=\"k\">AND</span> <span class=\"n\">arrival</span><span class=\"p\">.</span><span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"s1\">'2021-04-01'</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"解法2\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%952\"><i class=\"fa fa-link\"></i></a>解法2</h1>\n\n<p>共通表式を利用すると、もう少しすっきりした見た目にはなります。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">WITH</span> <span class=\"n\">t</span> <span class=\"k\">AS</span> <span class=\"p\">(</span>\n  <span class=\"k\">SELECT</span> <span class=\"n\">goods</span><span class=\"p\">,</span> <span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"n\">pieces</span><span class=\"p\">)</span> <span class=\"k\">AS</span> <span class=\"n\">total</span>\n   <span class=\"k\">FROM</span> <span class=\"n\">arrival</span>\n  <span class=\"k\">WHERE</span> <span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"s1\">'2021-04-01'</span>\n  <span class=\"k\">GROUP</span> <span class=\"k\">BY</span> <span class=\"n\">goods</span>\n<span class=\"p\">)</span>\n<span class=\"k\">UPDATE</span> <span class=\"n\">inventory</span>\n<span class=\"k\">SET</span> <span class=\"n\">pieces</span> <span class=\"o\">=</span> <span class=\"n\">pieces</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"n\">total</span> <span class=\"k\">FROM</span> <span class=\"n\">t</span> <span class=\"k\">WHERE</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">goods</span> <span class=\"o\">=</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">goods</span><span class=\"p\">)</span>\n<span class=\"k\">WHERE</span> <span class=\"k\">EXISTS</span> <span class=\"p\">(</span><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">t</span> <span class=\"k\">WHERE</span> <span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">goods</span> <span class=\"o\">=</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">goods</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"解法3\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%953\"><i class=\"fa fa-link\"></i></a>解法3</h1>\n\n<p>解法3はこの問題特有の解法になります。到着する荷物がない場合「UPDATE対象にしない」と考えるのではなく、「0を足す」という風に考えると、WHERE節を省くことができます。解法1と解法2はWHERE節とSET節両方でサブクエリを書く必要があって、このせいで冗長な書きぶりになっていましたが、以下のクエリであればそれを避けることができます。</p>\n\n<div class=\"code-frame\" data-lang=\"SQL\"><div class=\"highlight\"><pre><code><span class=\"k\">UPDATE</span> <span class=\"n\">inventory</span>\n<span class=\"k\">SET</span> <span class=\"n\">pieces</span> <span class=\"o\">=</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">pieces</span> <span class=\"o\">+</span> <span class=\"p\">(</span>\n  <span class=\"k\">SELECT</span> <span class=\"n\">COALESCE</span><span class=\"p\">(</span><span class=\"k\">SUM</span><span class=\"p\">(</span><span class=\"n\">pieces</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"k\">FROM</span> <span class=\"n\">arrival</span>\n  <span class=\"k\">WHERE</span> <span class=\"n\">inventory</span><span class=\"p\">.</span><span class=\"n\">goods</span> <span class=\"o\">=</span> <span class=\"n\">arrival</span><span class=\"p\">.</span><span class=\"n\">goods</span>\n  <span class=\"k\">AND</span> <span class=\"n\">arrival</span><span class=\"p\">.</span><span class=\"n\">created_at</span> <span class=\"o\">=</span> <span class=\"s1\">'2021-04-01'</span>\n<span class=\"p\">);</span>\n</code></pre></div></div>\n\n<h1>\n<span id=\"検証環境\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>検証環境</h1>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Microsoft SQL Server 2019 (RTM-CU9) (KB5000642) - 15.0.4102.2 (X64) \n    Jan 25 2021 20:16:12 \n    Copyright (C) 2019 Microsoft Corporation\n    Developer Edition (64-bit) on Linux (Ubuntu 18.04.5 LTS) &lt;X64&gt;\n</code></pre></div></div>\n","body":"# 前提\n\n商品在庫を管理するシステム構築にあたり、まず在庫数を商品ごとに格納しているinventoryテーブルがあるとします。\n\n|goods|pieces|\n|:---|---:|\n|夏タイヤ|10|\n|冬タイヤ|20|\n|ホイール|30|\n\n次に商品がいつどれだけ入荷されるかの履歴や予定を格納しているarrivalテーブルがあります。\n\n|goods|created_at|pieces|\n|:---|---:|---:|\n|夏タイヤ|2021/03/31|1|\n|冬タイヤ|2021/03/31|2|\n|ホイール|2021/03/31|3|\n|夏タイヤ|2021/04/01|4|\n|夏タイヤ|2021/04/01|5|\n|冬タイヤ|2021/04/01|6|\n\nここで2021/04/01になったので、2021/04/01に到着する商品数を在庫数に足してやる必要があります。つまり、arrivalテーブルから2021/04/01に到着する商品を取り出して、inventoryテーブルのpicesに足しこむようなUPDATE文を作る必要があります。\n\nなお実行後のinventoryテーブルは以下のようになるはずです。\n\n|goods|pieces|\n|:---|---:|\n|夏タイヤ|19|\n|冬タイヤ|26|\n|ホイール|30|\n\n# 解法1\n\nもっともべたに書くと次のようなUPDATE文になるはずです。\n\n```SQL\nUPDATE inventory\nSET pieces = inventory.pieces + (\n  SELECT SUM(pieces) \n  FROM arrival\n  WHERE inventory.goods = arrival.goods\n  AND arrival.created_at = '2021-04-01')\nWHERE EXISTS (\n  SELECT *\n  FROM arrival\n  WHERE inventory.goods = arrival.goods\n  AND arrival.created_at = '2021-04-01'\n);\n```\n\n# 解法2\n\n共通表式を利用すると、もう少しすっきりした見た目にはなります。\n\n```sql\nWITH t AS (\n  SELECT goods, SUM(pieces) AS total\n   FROM arrival\n  WHERE created_at = '2021-04-01'\n  GROUP BY goods\n)\nUPDATE inventory\nSET pieces = pieces + (SELECT total FROM t WHERE t.goods = inventory.goods)\nWHERE EXISTS (SELECT * FROM t WHERE t.goods = inventory.goods);\n```\n\n# 解法3\n\n解法3はこの問題特有の解法になります。到着する荷物がない場合「UPDATE対象にしない」と考えるのではなく、「0を足す」という風に考えると、WHERE節を省くことができます。解法1と解法2はWHERE節とSET節両方でサブクエリを書く必要があって、このせいで冗長な書きぶりになっていましたが、以下のクエリであればそれを避けることができます。\n\n```SQL\nUPDATE inventory\nSET pieces = inventory.pieces + (\n  SELECT COALESCE(SUM(pieces), 0)\n  FROM arrival\n  WHERE inventory.goods = arrival.goods\n  AND arrival.created_at = '2021-04-01'\n);\n```\n\n# 検証環境\n\n```\nMicrosoft SQL Server 2019 (RTM-CU9) (KB5000642) - 15.0.4102.2 (X64) \n\tJan 25 2021 20:16:12 \n\tCopyright (C) 2019 Microsoft Corporation\n\tDeveloper Edition (64-bit) on Linux (Ubuntu 18.04.5 LTS) <X64>\n```\n\n","coediting":false,"comments_count":0,"created_at":"2021-04-11T14:47:24+09:00","group":null,"id":"a3c3eff96bf4db3adba7","likes_count":0,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"SQL","versions":[]},{"name":"SQLServer","versions":[]}],"title":"相関サブクエリや共通表式を使って、他のテーブルをもとにUPDATEする","updated_at":"2021-04-11T14:47:24+09:00","url":"https://qiita.com/neko_the_shadow/items/a3c3eff96bf4db3adba7","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":708,"team_membership":null,"organization_url_name":null}