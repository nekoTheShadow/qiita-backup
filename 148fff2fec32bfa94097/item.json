{"rendered_body":"\n<h1>\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n\n<p>JIRAやRedmineのようなバグトラッキングシステムを例とします。このシステムでは、トピックごとにプロジェクトを作成します。チケットはプロジェクトごとに作成され、利用者はチケットにコメントを付与することができるとします。ER図は以下の通りです。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/a5222774242f703ebc4b5f7e451697cf1fe15615/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130353835392f32663632616566322d303935642d633535322d663637612d6564316439633930663535362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F105859%2F2f62aef2-095d-c552-f67a-ed1d9c90f556.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7b440286ebab74b66878850d9478813f\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/105859/2f62aef2-095d-c552-f67a-ed1d9c90f556.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F105859%2F2f62aef2-095d-c552-f67a-ed1d9c90f556.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ed6db49e824bd67ba8626063e6f67edc 1x\" loading=\"lazy\"></a></p>\n\n<p>データについては、次のようになっているとします。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/385e80d7a5a13bd702ff36b55dcbe5cc750fc435/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3130353835392f39346665343662632d393832372d376534632d623464632d3033323036393764653465632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F105859%2F94fe46bc-9827-7e4c-b4dc-0320697de4ec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=51d598fcebed89e873b18ae245a7a37d\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/105859/94fe46bc-9827-7e4c-b4dc-0320697de4ec.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F105859%2F94fe46bc-9827-7e4c-b4dc-0320697de4ec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=37a38d6532686cd4b2b8abdb353534eb 1x\" loading=\"lazy\"></a></p>\n\n<p>ここで、プロジェクトとそれにひもづくチケット・コメントをすべて取得することを考えます。クエリを書くことは簡単ですが、<code>Project.java</code>というネストされたJava Beanに結果をマッピングした場合、どのようにすればよいでしょうか? 言い換えれば、1対多の関係にあるテーブルに対する照会クエリをネストされたBeanにマッピングしたい場合、どのようにすればよいでしょうか?</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Project.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nd\">@Data</span>\n<span class=\"nd\">@ToString</span><span class=\"o\">(</span><span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">\"tickets\"</span><span class=\"o\">})</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Project</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">projectId</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Ticket</span><span class=\"o\">&gt;</span> <span class=\"n\">tickets</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Ticket.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nd\">@Data</span>\n<span class=\"nd\">@ToString</span><span class=\"o\">(</span><span class=\"n\">exclude</span> <span class=\"o\">=</span> <span class=\"o\">{</span><span class=\"s\">\"comments\"</span><span class=\"o\">})</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Ticket</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">ticketId</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">content</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Comment</span><span class=\"o\">&gt;</span> <span class=\"n\">comments</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Comment.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nd\">@Data</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Comment</span> <span class=\"o\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">commentId</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">content</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<h1>\n<span id=\"回答\" class=\"fragment\"></span><a href=\"#%E5%9B%9E%E7%AD%94\"><i class=\"fa fa-link\"></i></a>回答</h1>\n\n<p><a href=\"https://mybatis.org/mybatis-3/ja/sqlmap-xml.html\" rel=\"nofollow noopener\" target=\"_blank\"><code>resultMap</code>と<code>collection</code>という機能を利用します。</a> 上記の例であれば、以下のようなxmlを作成します。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">ProjectMapper.xml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span>\n<span class=\"cp\">&lt;!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span>\n<span class=\"nt\">&lt;mapper</span> <span class=\"na\">namespace=</span><span class=\"s\">\"com.example.demo.mapper.ProjectMapper\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;select</span> <span class=\"na\">id=</span><span class=\"s\">\"findAllProject\"</span> <span class=\"na\">resultMap=</span><span class=\"s\">\"findAllProjectResultMap\"</span><span class=\"nt\">&gt;</span>\n    SELECT\n      project.project_id,\n      project.name as project_name,\n      ticket.ticket_id,\n      ticket.content as ticket_content,\n      comment.comment_id,\n      comment.content as comment_content\n    FROM project\n    JOIN ticket ON project.project_id = ticket.project_id\n    JOIN comment ON ticket.ticket_id = comment.ticket_id\n  <span class=\"nt\">&lt;/select&gt;</span>\n\n  <span class=\"nt\">&lt;resultMap</span> <span class=\"na\">id=</span><span class=\"s\">\"findAllProjectResultMap\"</span> <span class=\"na\">type=</span><span class=\"s\">\"com.example.demo.dto.Project\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;id</span> <span class=\"na\">property=</span><span class=\"s\">\"projectId\"</span> <span class=\"na\">column=</span><span class=\"s\">\"project_id\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;result</span> <span class=\"na\">property=</span><span class=\"s\">\"name\"</span> <span class=\"na\">column=</span><span class=\"s\">\"project_name\"</span><span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;collection</span> <span class=\"na\">property=</span><span class=\"s\">\"tickets\"</span> <span class=\"na\">ofType=</span><span class=\"s\">\"com.example.demo.dto.Ticket\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;id</span> <span class=\"na\">property=</span><span class=\"s\">\"ticketId\"</span> <span class=\"na\">column=</span><span class=\"s\">\"ticket_id\"</span> <span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;result</span> <span class=\"na\">property=</span><span class=\"s\">\"content\"</span> <span class=\"na\">column=</span><span class=\"s\">\"ticket_content\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;collection</span> <span class=\"na\">property=</span><span class=\"s\">\"comments\"</span> <span class=\"na\">ofType=</span><span class=\"s\">\"com.example.demo.dto.Comment\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;id</span> <span class=\"na\">property=</span><span class=\"s\">\"commentId\"</span> <span class=\"na\">column=</span><span class=\"s\">\"comment_id\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;result</span> <span class=\"na\">property=</span><span class=\"s\">\"content\"</span> <span class=\"na\">column=</span><span class=\"s\">\"comment_content\"</span><span class=\"nt\">/&gt;</span>\n      <span class=\"nt\">&lt;/collection&gt;</span>\n    <span class=\"nt\">&lt;/collection&gt;</span>\n  <span class=\"nt\">&lt;/resultMap&gt;</span>\n<span class=\"nt\">&lt;/mapper&gt;</span>\n</code></pre></div>\n</div>\n\n<p>以下のコードではSQLを実行結果がどのような形でJava BeanにマッピングされたのかをPretty Printすることで、確認することができます</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">CommandlineappliApplication.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"nd\">@Component</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">CommandlineappliApplication</span> <span class=\"kd\">implements</span> <span class=\"nc\">CommandLineRunner</span><span class=\"o\">{</span>\n\n    <span class=\"nd\">@Autowired</span>\n    <span class=\"kd\">private</span> <span class=\"nc\">ProjectMapper</span> <span class=\"n\">projectMapper</span><span class=\"o\">;</span>\n\n    <span class=\"nd\">@Override</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">run</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">...</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Project</span> <span class=\"n\">project</span> <span class=\"o\">:</span> <span class=\"n\">projectMapper</span><span class=\"o\">.</span><span class=\"na\">findAllProject</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"%s%n\"</span><span class=\"o\">,</span> <span class=\"n\">project</span><span class=\"o\">);</span>\n\n            <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Ticket</span> <span class=\"n\">ticket</span> <span class=\"o\">:</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">getTickets</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"  └ %s%n\"</span><span class=\"o\">,</span> <span class=\"n\">ticket</span><span class=\"o\">);</span>\n\n                <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"nc\">Comment</span> <span class=\"n\">comment</span> <span class=\"o\">:</span> <span class=\"n\">ticket</span><span class=\"o\">.</span><span class=\"na\">getComments</span><span class=\"o\">())</span> <span class=\"o\">{</span>\n                    <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">printf</span><span class=\"o\">(</span><span class=\"s\">\"      └ %s%n\"</span><span class=\"o\">,</span> <span class=\"n\">comment</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>実際に動かした結果は次の通り。ネストされたBeanに対して、SQLの実行結果が想定通りマッピングされていることがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>Project(projectId=1, name=プロジェクト1)\n  └ Ticket(ticketId=1, content=チケット1-1)\n      └ Comment(commentId=1, content=コメント1-1-1)\n      └ Comment(commentId=2, content=コメント1-1-2)\n  └ Ticket(ticketId=2, content=チケット1-2)\n      └ Comment(commentId=3, content=コメント1-2-1)\n      └ Comment(commentId=4, content=コメント1-2-2)\nProject(projectId=2, name=プロジェクト2)\n  └ Ticket(ticketId=3, content=チケット2-1)\n      └ Comment(commentId=5, content=コメント2-1-1)\n      └ Comment(commentId=6, content=コメント2-1-2)\n  └ Ticket(ticketId=4, content=チケット2-2)\n      └ Comment(commentId=7, content=コメント2-2-1)\n      └ Comment(commentId=8, content=コメント2-2-2)\n</code></pre></div></div>\n\n<h1>\n<span id=\"環境情報\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>環境情報</h1>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">pom.xml</span></div>\n<div class=\"highlight\"><pre><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span>\n<span class=\"nt\">&lt;project</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"na\">xmlns:xsi=</span><span class=\"s\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>\n    <span class=\"na\">xsi:schemaLocation=</span><span class=\"s\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;modelVersion&gt;</span>4.0.0<span class=\"nt\">&lt;/modelVersion&gt;</span>\n    <span class=\"nt\">&lt;parent&gt;</span>\n        <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n        <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-parent<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;version&gt;</span>2.3.2.RELEASE<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;relativePath/&gt;</span> <span class=\"c\">&lt;!-- lookup parent from repository --&gt;</span>\n    <span class=\"nt\">&lt;/parent&gt;</span>\n    <span class=\"nt\">&lt;groupId&gt;</span>com.example<span class=\"nt\">&lt;/groupId&gt;</span>\n    <span class=\"nt\">&lt;artifactId&gt;</span>mybatis-sample<span class=\"nt\">&lt;/artifactId&gt;</span>\n    <span class=\"nt\">&lt;version&gt;</span>0.0.1-SNAPSHOT<span class=\"nt\">&lt;/version&gt;</span>\n    <span class=\"nt\">&lt;name&gt;</span>mybatis-sample<span class=\"nt\">&lt;/name&gt;</span>\n    <span class=\"nt\">&lt;description&gt;</span>Demo project for Spring Boot<span class=\"nt\">&lt;/description&gt;</span>\n\n    <span class=\"nt\">&lt;properties&gt;</span>\n        <span class=\"nt\">&lt;java.version&gt;</span>11<span class=\"nt\">&lt;/java.version&gt;</span>\n    <span class=\"nt\">&lt;/properties&gt;</span>\n\n    <span class=\"nt\">&lt;dependencies&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-batch<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.mybatis.spring.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>mybatis-spring-boot-starter<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;version&gt;</span>2.1.3<span class=\"nt\">&lt;/version&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>com.h2database<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>h2<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;scope&gt;</span>runtime<span class=\"nt\">&lt;/scope&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-starter-test<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n            <span class=\"nt\">&lt;exclusions&gt;</span>\n                <span class=\"nt\">&lt;exclusion&gt;</span>\n                    <span class=\"nt\">&lt;groupId&gt;</span>org.junit.vintage<span class=\"nt\">&lt;/groupId&gt;</span>\n                    <span class=\"nt\">&lt;artifactId&gt;</span>junit-vintage-engine<span class=\"nt\">&lt;/artifactId&gt;</span>\n                <span class=\"nt\">&lt;/exclusion&gt;</span>\n            <span class=\"nt\">&lt;/exclusions&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.batch<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>spring-batch-test<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;scope&gt;</span>test<span class=\"nt\">&lt;/scope&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n        <span class=\"nt\">&lt;dependency&gt;</span>\n            <span class=\"nt\">&lt;groupId&gt;</span>org.projectlombok<span class=\"nt\">&lt;/groupId&gt;</span>\n            <span class=\"nt\">&lt;artifactId&gt;</span>lombok<span class=\"nt\">&lt;/artifactId&gt;</span>\n        <span class=\"nt\">&lt;/dependency&gt;</span>\n    <span class=\"nt\">&lt;/dependencies&gt;</span>\n\n    <span class=\"nt\">&lt;build&gt;</span>\n        <span class=\"nt\">&lt;plugins&gt;</span>\n            <span class=\"nt\">&lt;plugin&gt;</span>\n                <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n                <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n            <span class=\"nt\">&lt;/plugin&gt;</span>\n        <span class=\"nt\">&lt;/plugins&gt;</span>\n    <span class=\"nt\">&lt;/build&gt;</span>\n\n<span class=\"nt\">&lt;/project&gt;</span>\n</code></pre></div>\n</div>\n","body":"# 問題\n\nJIRAやRedmineのようなバグトラッキングシステムを例とします。このシステムでは、トピックごとにプロジェクトを作成します。チケットはプロジェクトごとに作成され、利用者はチケットにコメントを付与することができるとします。ER図は以下の通りです。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/105859/2f62aef2-095d-c552-f67a-ed1d9c90f556.png)\n\nデータについては、次のようになっているとします。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/105859/94fe46bc-9827-7e4c-b4dc-0320697de4ec.png)\n\nここで、プロジェクトとそれにひもづくチケット・コメントをすべて取得することを考えます。クエリを書くことは簡単ですが、`Project.java`というネストされたJava Beanに結果をマッピングした場合、どのようにすればよいでしょうか? 言い換えれば、1対多の関係にあるテーブルに対する照会クエリをネストされたBeanにマッピングしたい場合、どのようにすればよいでしょうか?\n\n```Project.java\n@Data\n@ToString(exclude = {\"tickets\"})\npublic class Project {\n    private int projectId;\n    private String name;\n    private List<Ticket> tickets;\n}\n```\n\n```Ticket.java\n@Data\n@ToString(exclude = {\"comments\"})\npublic class Ticket {\n    private int ticketId;\n    private String content;\n    private List<Comment> comments;\n}\n```\n\n```Comment.java\n@Data\npublic class Comment {\n    private int commentId;\n    private String content;\n}\n```\n\n# 回答\n\n[`resultMap`と`collection`という機能を利用します。](https://mybatis.org/mybatis-3/ja/sqlmap-xml.html) 上記の例であれば、以下のようなxmlを作成します。\n\n```ProjectMapper.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.example.demo.mapper.ProjectMapper\">\n  <select id=\"findAllProject\" resultMap=\"findAllProjectResultMap\">\n    SELECT\n      project.project_id,\n      project.name as project_name,\n      ticket.ticket_id,\n      ticket.content as ticket_content,\n      comment.comment_id,\n      comment.content as comment_content\n    FROM project\n    JOIN ticket ON project.project_id = ticket.project_id\n    JOIN comment ON ticket.ticket_id = comment.ticket_id\n  </select>\n\n  <resultMap id=\"findAllProjectResultMap\" type=\"com.example.demo.dto.Project\">\n    <id property=\"projectId\" column=\"project_id\" />\n    <result property=\"name\" column=\"project_name\"/>\n    <collection property=\"tickets\" ofType=\"com.example.demo.dto.Ticket\">\n      <id property=\"ticketId\" column=\"ticket_id\" />\n      <result property=\"content\" column=\"ticket_content\"/>\n      <collection property=\"comments\" ofType=\"com.example.demo.dto.Comment\">\n        <id property=\"commentId\" column=\"comment_id\" />\n        <result property=\"content\" column=\"comment_content\"/>\n      </collection>\n    </collection>\n  </resultMap>\n</mapper>\n```\n以下のコードではSQLを実行結果がどのような形でJava BeanにマッピングされたのかをPretty Printすることで、確認することができます\n\n```CommandlineappliApplication.java\n@Component\npublic class CommandlineappliApplication implements CommandLineRunner{\n\n    @Autowired\n    private ProjectMapper projectMapper;\n\n    @Override\n    public void run(String... args) throws Exception {\n        for (Project project : projectMapper.findAllProject()) {\n            System.out.printf(\"%s%n\", project);\n\n            for (Ticket ticket : project.getTickets()) {\n                System.out.printf(\"  └ %s%n\", ticket);\n\n                for (Comment comment : ticket.getComments()) {\n                    System.out.printf(\"      └ %s%n\", comment);\n                }\n            }\n        }\n    }\n}\n```\n\n実際に動かした結果は次の通り。ネストされたBeanに対して、SQLの実行結果が想定通りマッピングされていることがわかります。\n\n```\nProject(projectId=1, name=プロジェクト1)\n  └ Ticket(ticketId=1, content=チケット1-1)\n      └ Comment(commentId=1, content=コメント1-1-1)\n      └ Comment(commentId=2, content=コメント1-1-2)\n  └ Ticket(ticketId=2, content=チケット1-2)\n      └ Comment(commentId=3, content=コメント1-2-1)\n      └ Comment(commentId=4, content=コメント1-2-2)\nProject(projectId=2, name=プロジェクト2)\n  └ Ticket(ticketId=3, content=チケット2-1)\n      └ Comment(commentId=5, content=コメント2-1-1)\n      └ Comment(commentId=6, content=コメント2-1-2)\n  └ Ticket(ticketId=4, content=チケット2-2)\n      └ Comment(commentId=7, content=コメント2-2-1)\n      └ Comment(commentId=8, content=コメント2-2-2)\n```\n\n# 環境情報\n\n```xml:pom.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>2.3.2.RELEASE</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.example</groupId>\n\t<artifactId>mybatis-sample</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>mybatis-sample</name>\n\t<description>Demo project for Spring Boot</description>\n\n\t<properties>\n\t\t<java.version>11</java.version>\n\t</properties>\n\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-batch</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis.spring.boot</groupId>\n\t\t\t<artifactId>mybatis-spring-boot-starter</artifactId>\n\t\t\t<version>2.1.3</version>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>com.h2database</groupId>\n\t\t\t<artifactId>h2</artifactId>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t\t<exclusions>\n\t\t\t\t<exclusion>\n\t\t\t\t\t<groupId>org.junit.vintage</groupId>\n\t\t\t\t\t<artifactId>junit-vintage-engine</artifactId>\n\t\t\t\t</exclusion>\n\t\t\t</exclusions>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.batch</groupId>\n\t\t\t<artifactId>spring-batch-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.projectlombok</groupId>\n\t\t\t<artifactId>lombok</artifactId>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n```\n","coediting":false,"comments_count":0,"created_at":"2020-07-31T20:55:42+09:00","group":null,"id":"148fff2fec32bfa94097","likes_count":3,"private":false,"reactions_count":0,"stocks_count":1,"tags":[{"name":"Java","versions":[]},{"name":"MyBatis","versions":[]}],"title":"[MyBatis] 1対多の関係にあるテーブルに対する照会クエリをネストされたBeanにマッピングしたい","updated_at":"2020-07-31T20:57:08+09:00","url":"https://qiita.com/neko_the_shadow/items/148fff2fec32bfa94097","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":37,"github_login_name":"nekoTheShadow","id":"neko_the_shadow","items_count":218,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":4028,"team_membership":null,"organization_url_name":null,"slide":false}