{"rendered_body":"<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"k\">def</span> <span class=\"nf\">repeat</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span> <span class=\"o\">*</span> <span class=\"n\">n</span> \n</code></pre></div></div>\n\n<p>文字列の内容をn回だけ繰り返した新しい文字列を生成したいという場合、Pythonでは上の例のように書くことができます。つまり<code>*</code>演算子が文字列を繰り返す機能を有しているのですが、同様のことをJavaで実現するとなると、次のようなメソッドを定義することが多いと思います(nullチェックなどは省略)。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">repeat</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kt\">var</span> <span class=\"n\">sb</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n  <span class=\"k\">while</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">--</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">sb</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>別にこれでかまわないといえばそのとおりなのですが、Pythonでは1行で書けるのにJavaでは書けないというのは悔しい(謎)。そこでJavaで文字列の繰り返しをシンプルに書く方法をよく考えるのですが、個人的にまず思いつくのが<code>Stream</code>を使う方法。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">repeat</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">range</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">).</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">str</span><span class=\"o\">).</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>確かに1行にはなったものの、1行にするためにややトリッキーな書き方をしている印象も受けます。よりシンプルにすべく、いろいろ調べる中で思いついたのが以下の方法。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">repeat</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">str</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"k\">return</span> <span class=\"nc\">String</span><span class=\"o\">.</span><span class=\"na\">join</span><span class=\"o\">(</span><span class=\"s\">\"\"</span><span class=\"o\">,</span> <span class=\"nc\">Collections</span><span class=\"o\">.</span><span class=\"na\">nCopies</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">str</span><span class=\"o\">));</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>より短く、よりシンプルになりました。短くするためにトリッキーなことをするという感じもありません。<code>Collections.nCopies</code>がリストを生成するため、そこだけ気にしつつ、積極的に使っていきたいと思います。</p>\n\n<p>Apache Commons Langの<code>StringUtils.repeat</code>を使えばいいっていうのはいいっこなし(´・ω・｀)</p>\n","body":"```python\ndef repeat(str, n):\n    return str * n \n```\n\n文字列の内容をn回だけ繰り返した新しい文字列を生成したいという場合、Pythonでは上の例のように書くことができます。つまり`*`演算子が文字列を繰り返す機能を有しているのですが、同様のことをJavaで実現するとなると、次のようなメソッドを定義することが多いと思います(nullチェックなどは省略)。\n\n```java\npublic static String repeat(String str, int n) {\n  var sb = new StringBuilder();\n  while(n-- > 0) sb.append(str);\n  return sb.toString();\n}\n```\n\n別にこれでかまわないといえばそのとおりなのですが、Pythonでは1行で書けるのにJavaでは書けないというのは悔しい(謎)。そこでJavaで文字列の繰り返しをシンプルに書く方法をよく考えるのですが、個人的にまず思いつくのが`Stream`を使う方法。\n\n```java\npublic static String repeat(String str, int n) {\n  return IntStream.range(0, n).mapToObj(i -> str).collect(Collectors.joining(\"\"));\n}\n```\n\n確かに1行にはなったものの、1行にするためにややトリッキーな書き方をしている印象も受けます。よりシンプルにすべく、いろいろ調べる中で思いついたのが以下の方法。\n\n```java\npublic static String repeat(String str, int n) {\n  return String.join(\"\", Collections.nCopies(n, str));\n}\n```\n\nより短く、よりシンプルになりました。短くするためにトリッキーなことをするという感じもありません。`Collections.nCopies`がリストを生成するため、そこだけ気にしつつ、積極的に使っていきたいと思います。\n\nApache Commons Langの`StringUtils.repeat`を使えばいいっていうのはいいっこなし(´・ω・｀)\n\n","coediting":false,"comments_count":2,"created_at":"2018-05-13T21:40:36+09:00","group":null,"id":"78ad73e86f45e4994a89","likes_count":11,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"文字列の繰り返しをシンプルに書きたい","updated_at":"2018-05-13T21:40:36+09:00","url":"https://qiita.com/neko_the_shadow/items/78ad73e86f45e4994a89","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":194,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}