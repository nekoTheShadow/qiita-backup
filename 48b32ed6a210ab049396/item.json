{"rendered_body":"<p>ここ数日(というほどでもないが)「ズンドコキヨシ」なるブームが到来しているそうです。せっかくなので、ミーハー気分で参加してみようと思います。ちなみに「ズンドコキヨシ」の存在は以下の記事を見て知りました:<a href=\"http://qiita.com/shunsugai@github/items/971a15461de29563bf90\" id=\"reference-a344eaeb6e0911752620\">「ズンドコキヨシまとめ」</a>。ブームの経緯や詳しいレギュレーションなどは当該記事をご参照のほどお願いします。</p>\n\n<p>というわけで意気込んでコーディングを始めたわけですが――結論から先に述べると、はじめのうちは問題文を読み間違っておりました(´・ω・`)。すなわち<strong>「『ズン』もしくは『ドコ』のどちらかをランダムに出力し続けるが、その際ズン⇒ズン⇒ズン⇒ドコという並びが現れた瞬間『キ・ヨ・シ!』を出力して、ループを脱出する」</strong>というように問題を誤解しており、その結果次のようなソースコードが出来上がりました。</p>\n\n<div class=\"code-frame\" data-lang=\"scm\"><div class=\"highlight\"><pre>(use srfi-27)\n\n(define (zun-doko-stream)\n  (let loop ((ls '())\n             (logging 0)\n             (i (random-integer 2)))\n    (if (= logging 1110)\n      (reverse (cons \"キ・ヨ・シ!\" ls))\n      (loop (cons (if (zero? i) \"ドコ\" \"ズン\") ls)\n            (modulo (+ i (* logging 10)) 10000)\n            (random-integer 2)))))\n\n(for-each\n  (lambda (s) (begin (display s) (newline)))\n  (zun-doko-stream))\n</pre></div></div>\n\n<p>実行結果は以下の通り。もちろん乱数を使っているので、実行するたびに結果が少しずつ変わります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>ズン\nドコ\nズン\nズン\nドコ\nズン\nズン\nドコ\nズン\nドコ\nドコ\nズン\nドコ\nドコ\nズン\nズン\nズン\nズン\nズン\nズン\nドコ\nキ・ヨ・シ!\n</pre></div></div>\n\n<p>改めてながめてみると、なかなかのハードコーディングですね。ちょっと反省(´・ω・`)。もっとも本問について再利用しやすいコードを書くのは結構難しそうですが……。</p>\n\n<p>さて以上のコードを作り終え、ある程度テストも済ませたあと、問題文を読み間違っていることに気がつきました。以下が題意通りの結果を示すコードです。</p>\n\n<div class=\"code-frame\" data-lang=\"scm\"><div class=\"highlight\"><pre>(use srfi-1)\n(use srfi-13)\n(use srfi-27)\n\n; \"ズン\"と\"ドコ\"をランダムに並べて、大きさ4のリストを作る\n; ex. (list \"ズン\" \"ドコ\" \"ドコ\" \"ズン\")\n(define (make-zun-doko)\n  (let loop ((ls '()) (cnt 4))\n    (if (zero? cnt)\n      ls\n      (loop (cons (if (zero? (random-integer 2)) \"ズン\" \"ドコ\") ls)\n            (- cnt 1)))))\n\n(define (zun-doko-list)\n  (let ((last-zundoko (list \"ズン\" \"ズン\" \"ズン\" \"ドコ\")))\n    (let loop ((ls (list (make-zun-doko))))\n      (if (list= string=? (car ls) last-zundoko)\n        (reverse (cons \"キ・ヨ・シ!\" ls))\n        (loop (cons (make-zun-doko) ls))))))\n\n(for-each\n  (lambda (ls) (begin (display ls) (newline)))\n  (zun-doko-list))\n</pre></div></div>\n\n<p>実行結果は以下の通り。こちらも実行のたびに結果が少しずつ変わります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>(ドコ ドコ ズン ドコ)\n(ズン ドコ ドコ ズン)\n(ドコ ズン ズン ドコ)\n(ドコ ドコ ズン ズン)\n(ドコ ドコ ドコ ドコ)\n(ドコ ドコ ドコ ズン)\n(ドコ ズン ズン ドコ)\n(ズン ズン ズン ドコ)\nキ・ヨ・シ!\n</pre></div></div>\n","body":"ここ数日(というほどでもないが)「ズンドコキヨシ」なるブームが到来しているそうです。せっかくなので、ミーハー気分で参加してみようと思います。ちなみに「ズンドコキヨシ」の存在は以下の記事を見て知りました:[「ズンドコキヨシまとめ」](\nhttp://qiita.com/shunsugai@github/items/971a15461de29563bf90)。ブームの経緯や詳しいレギュレーションなどは当該記事をご参照のほどお願いします。\n\nというわけで意気込んでコーディングを始めたわけですが――結論から先に述べると、はじめのうちは問題文を読み間違っておりました(´・ω・`)。すなわち__「『ズン』もしくは『ドコ』のどちらかをランダムに出力し続けるが、その際ズン⇒ズン⇒ズン⇒ドコという並びが現れた瞬間『キ・ヨ・シ!』を出力して、ループを脱出する」__というように問題を誤解しており、その結果次のようなソースコードが出来上がりました。\n\n```scm\n(use srfi-27)\n\n(define (zun-doko-stream)\n  (let loop ((ls '())\n             (logging 0)\n             (i (random-integer 2)))\n    (if (= logging 1110)\n      (reverse (cons \"キ・ヨ・シ!\" ls))\n      (loop (cons (if (zero? i) \"ドコ\" \"ズン\") ls)\n            (modulo (+ i (* logging 10)) 10000)\n            (random-integer 2)))))\n\n(for-each\n  (lambda (s) (begin (display s) (newline)))\n  (zun-doko-stream))\n```\n\n実行結果は以下の通り。もちろん乱数を使っているので、実行するたびに結果が少しずつ変わります。\n\n```\nズン\nドコ\nズン\nズン\nドコ\nズン\nズン\nドコ\nズン\nドコ\nドコ\nズン\nドコ\nドコ\nズン\nズン\nズン\nズン\nズン\nズン\nドコ\nキ・ヨ・シ!\n```\n\n改めてながめてみると、なかなかのハードコーディングですね。ちょっと反省(´・ω・`)。もっとも本問について再利用しやすいコードを書くのは結構難しそうですが……。\n\nさて以上のコードを作り終え、ある程度テストも済ませたあと、問題文を読み間違っていることに気がつきました。以下が題意通りの結果を示すコードです。\n\n```scm\n(use srfi-1)\n(use srfi-13)\n(use srfi-27)\n\n; \"ズン\"と\"ドコ\"をランダムに並べて、大きさ4のリストを作る\n; ex. (list \"ズン\" \"ドコ\" \"ドコ\" \"ズン\")\n(define (make-zun-doko)\n  (let loop ((ls '()) (cnt 4))\n    (if (zero? cnt)\n      ls\n      (loop (cons (if (zero? (random-integer 2)) \"ズン\" \"ドコ\") ls)\n            (- cnt 1)))))\n\n(define (zun-doko-list)\n  (let ((last-zundoko (list \"ズン\" \"ズン\" \"ズン\" \"ドコ\")))\n    (let loop ((ls (list (make-zun-doko))))\n      (if (list= string=? (car ls) last-zundoko)\n        (reverse (cons \"キ・ヨ・シ!\" ls))\n        (loop (cons (make-zun-doko) ls))))))\n\n(for-each\n  (lambda (ls) (begin (display ls) (newline)))\n  (zun-doko-list))\n```\n\n実行結果は以下の通り。こちらも実行のたびに結果が少しずつ変わります。\n\n```\n(ドコ ドコ ズン ドコ)\n(ズン ドコ ドコ ズン)\n(ドコ ズン ズン ドコ)\n(ドコ ドコ ズン ズン)\n(ドコ ドコ ドコ ドコ)\n(ドコ ドコ ドコ ズン)\n(ドコ ズン ズン ドコ)\n(ズン ズン ズン ドコ)\nキ・ヨ・シ!\n```\n","coediting":false,"comments_count":1,"created_at":"2016-03-12T22:36:09+09:00","group":null,"id":"48b32ed6a210ab049396","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Scheme","versions":[]},{"name":"ズンドコキヨシ","versions":[]}],"title":"ズンドコキヨシ with Scheme","updated_at":"2016-03-12T22:37:53+09:00","url":"https://qiita.com/neko_the_shadow/items/48b32ed6a210ab049396","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}