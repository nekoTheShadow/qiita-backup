[{"body":"Gauche限定なら、make-zun-dokoのようにランダムにデータを取って何か構造を作る場合に、`data.random`が使えます。\n\n0.9.4なら\n\n    (define make-zun-doko (lists-of 4 (samples-from (list (^[] \"ズン\") (^[] \"ドコ\")))))\n\nHEADならもうちょっと簡単で\n\n    (define make-zun-doko (lists-of 4 (samples$ '(\"ズン\" \"ドコ\"))))\n\nまた、srfi-121の`gtake-while`を使うと、「求める組み合わせが出てくるまで(or出てこなくなるまで)生成し続ける」という処理が簡単に書けます。(0.9.4なら`(use gauche.generator)`、HEADなら`(use srfi-121)`)\n\n    (define (make-zun-doko-gen)\n      (let1 key '(\"ズン\" \"ズン\" \"ズン\" \"ドコ\")\n        (gappend (gtake-while (^c (not (equal? c key))) make-zun-doko)\n                 (list->generator `(,key \"キ・ヨ・シ!\")))))\n\nこの`make-zun-doko-gen`はジェネレータを返します。`generator->list`でリストに変換できますが、表示するならリストを介さずにジェネレータから直接行うこともできます。\n\n    (generator-for-each print (make-zun-doko-gen))\n\n\n\n\n","created_at":"2016-03-13T05:45:04+09:00","id":"eab9fc8f6983609ab0bb","rendered_body":"<p>Gauche限定なら、make-zun-dokoのようにランダムにデータを取って何か構造を作る場合に、<code>data.random</code>が使えます。</p>\n\n<p>0.9.4なら</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>(define make-zun-doko (lists-of 4 (samples-from (list (^[] \"ズン\") (^[] \"ドコ\")))))\n</code></pre></div></div>\n\n<p>HEADならもうちょっと簡単で</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>(define make-zun-doko (lists-of 4 (samples$ '(\"ズン\" \"ドコ\"))))\n</code></pre></div></div>\n\n<p>また、srfi-121の<code>gtake-while</code>を使うと、「求める組み合わせが出てくるまで(or出てこなくなるまで)生成し続ける」という処理が簡単に書けます。(0.9.4なら<code>(use gauche.generator)</code>、HEADなら<code>(use srfi-121)</code>)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>(define (make-zun-doko-gen)\n  (let1 key '(\"ズン\" \"ズン\" \"ズン\" \"ドコ\")\n    (gappend (gtake-while (^c (not (equal? c key))) make-zun-doko)\n             (list-&gt;generator `(,key \"キ・ヨ・シ!\")))))\n</code></pre></div></div>\n\n<p>この<code>make-zun-doko-gen</code>はジェネレータを返します。<code>generator-&gt;list</code>でリストに変換できますが、表示するならリストを介さずにジェネレータから直接行うこともできます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>(generator-for-each print (make-zun-doko-gen))\n</code></pre></div></div>\n","updated_at":"2016-03-13T05:48:21+09:00","user":{"description":null,"facebook_id":null,"followees_count":1,"followers_count":25,"github_login_name":"shirok","id":"anohana","items_count":0,"linkedin_id":null,"location":null,"name":"","organization":null,"permanent_id":9173,"profile_image_url":"https://secure.gravatar.com/avatar/223493dc04f78d4a990a24235ff1ab9f?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png","team_only":false,"twitter_screen_name":"anohana","website_url":null}}]