{"rendered_body":"\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux]</li>\n<li>Ubuntu 20.04 LTS (Focal Fossa) [Windows Subsystem for Linux 2; WSL2]</li>\n</ul>\n\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<p>Rubyで標準出力を利用する場合、標準出力の先がコンソールか別のコマンドかによって、バッファリング・フラッシュの規則が異なっているようです。</p>\n\n<ul>\n<li>標準出力が別コマンドにつながっている場合、バッファリングする</li>\n<li>標準出力がコンソールにつながっている場合、1行ごとにフラッシュする。</li>\n</ul>\n\n<p>これを簡単に検証してみましょう。標準出力がコンソールにつながっている場合は<code>true</code>、コマンドにつながっている場合は<code>false</code>を標準出力に出力したあと、0から4までの数字を1秒おきに標準出力に出力するRubyコードです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">main.rb</span></div>\n<div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"nb\">puts</span> <span class=\"s2\">\"STDOUT.isatty = </span><span class=\"si\">#{</span><span class=\"no\">STDOUT</span><span class=\"p\">.</span><span class=\"nf\">isatty</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n  <span class=\"nb\">sleep</span> <span class=\"mi\">1</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">x</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<p>以下の<code>cmd.rb</code>と<code>console.rb</code>は<code>ruby main.rb</code>の標準出力をパイプまたはコンソールにつなげて実行し、出力した結果にタイムスタンプを付与します。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">cmd.rb</span></div>\n<div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"nb\">require</span> <span class=\"s1\">'open3'</span>\n\n<span class=\"c1\"># 読み込み専用IOから1行づつ読み込み、タイムスタンプを付与して出力する。</span>\n<span class=\"nb\">puts</span> <span class=\"s1\">'*** main.rbの標準出力が別コマンドにつながっている場合 ***'</span>\n<span class=\"no\">Open3</span><span class=\"p\">.</span><span class=\"nf\">popen3</span><span class=\"p\">(</span><span class=\"s1\">'ruby main.rb'</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">stdin</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">wait_thr</span><span class=\"o\">|</span>\n  <span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"no\">Time</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">.</span><span class=\"nf\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%F %T'</span><span class=\"p\">)</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">timestamp</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">#{</span><span class=\"n\">line</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">console.rb</span></div>\n<div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"nb\">require</span> <span class=\"s1\">'pty'</span>\n\n<span class=\"c1\"># 読み込み専用IOから1行づつ読み込み、タイムスタンプを付与して出力する。</span>\n<span class=\"nb\">puts</span> <span class=\"s1\">'*** main.rbの標準出力がコンソールにつながっている場合 ***'</span>\n<span class=\"no\">PTY</span><span class=\"p\">.</span><span class=\"nf\">spawn</span><span class=\"p\">(</span><span class=\"s1\">'ruby main.rb'</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">read</span><span class=\"p\">,</span> <span class=\"n\">write</span><span class=\"p\">,</span> <span class=\"n\">pid</span><span class=\"o\">|</span>\n  <span class=\"n\">read</span><span class=\"p\">.</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">line</span><span class=\"o\">|</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"no\">Time</span><span class=\"p\">.</span><span class=\"nf\">now</span><span class=\"p\">.</span><span class=\"nf\">strftime</span><span class=\"p\">(</span><span class=\"s1\">'%F %T'</span><span class=\"p\">)</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"</span><span class=\"si\">#{</span><span class=\"n\">timestamp</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">#{</span><span class=\"n\">line</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<p><code>cmd.rb</code>と<code>console.rb</code>の実行結果は以下の通りになります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ ruby cmd.rb 2&gt;/dev/null\n*** main.rbの標準出力が別コマンドにつながっている場合 ***\n2020-07-05 16:45:09 STDOUT.isatty = false\n2020-07-05 16:45:09 0\n2020-07-05 16:45:09 1\n2020-07-05 16:45:09 2\n2020-07-05 16:45:09 3\n2020-07-05 16:45:09 4\n$ ruby console.rb 2&gt;/dev/null\n*** main.rbの標準出力がコンソールにつながっている場合 ***\n2020-07-05 16:45:11 STDOUT.isatty = true\n2020-07-05 16:45:12 0\n2020-07-05 16:45:13 1\n2020-07-05 16:45:14 2\n2020-07-05 16:45:15 3\n2020-07-05 16:45:16 4\n</code></pre></div></div>\n\n<p>タイムスタンプを見ると、標準出力がパイプにつながっている<code>main.rb</code>はバッファリングしていますが、コンソールにつながっている場合は、行ごとにフラッシュしていることがわかります。</p>\n\n<h1>\n<span id=\"標準出力がコマンドにつながっている場合でもバッファリングしたくない\" class=\"fragment\"></span><a href=\"#%E6%A8%99%E6%BA%96%E5%87%BA%E5%8A%9B%E3%81%8C%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%AB%E3%81%A4%E3%81%AA%E3%81%8C%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%A7%E3%82%82%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%9F%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>標準出力がコマンドにつながっている場合でも、バッファリングしたくない</h1>\n\n<p>いろいろやり方はあるとは思いますが、とりあえず思いつくのはこのあたりでしょうか。</p>\n\n<ul>\n<li>\n<code>STDOUT.sync = true</code>を設定して、標準出力を同期モードにする</li>\n<li>\n<code>STDOUT.flush</code>を任意のタイミングで呼び出す。</li>\n</ul>\n\n<p>前者について実験してみます。上記の<code>main.rb</code>を以下のように改造します。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">main.rb</span></div>\n<div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"vg\">$stdout</span><span class=\"p\">.</span><span class=\"nf\">sync</span> <span class=\"o\">=</span> <span class=\"kp\">true</span>\n<span class=\"nb\">puts</span> <span class=\"s2\">\"STDOUT.isatty = </span><span class=\"si\">#{</span><span class=\"no\">STDOUT</span><span class=\"p\">.</span><span class=\"nf\">isatty</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n  <span class=\"nb\">sleep</span> <span class=\"mi\">1</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">x</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<p><code>main.rb</code>の標準出力を別コマンドにつなげる<code>cmd.rb</code>を実行すると、さきほどとは違って、バッファリングしていないことがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ ruby cmd.rb 2&gt;/dev/null\n*** main.rbの標準出力が別コマンドにつながっている場合 ***\n2020-07-05 16:51:33 STDOUT.isatty = false\n2020-07-05 16:51:34 0\n2020-07-05 16:51:35 1\n2020-07-05 16:51:36 2\n2020-07-05 16:51:37 3\n2020-07-05 16:51:38 4\n</code></pre></div></div>\n\n<h1>\n<span id=\"標準出力がコンソールにつながっている場合でもフラッシュしてほしくない\" class=\"fragment\"></span><a href=\"#%E6%A8%99%E6%BA%96%E5%87%BA%E5%8A%9B%E3%81%8C%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%81%AB%E3%81%A4%E3%81%AA%E3%81%8C%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%A7%E3%82%82%E3%83%95%E3%83%A9%E3%83%83%E3%82%B7%E3%83%A5%E3%81%97%E3%81%A6%E3%81%BB%E3%81%97%E3%81%8F%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>標準出力がコンソールにつながっている場合でも、フラッシュしてほしくない</h1>\n\n<p>これについてもやりようはいろいろありそうですが、自分の思いつく範囲だと「<code>$stdout</code>を<code>StringIO</code>にリダイレクトし、任意のタイミングで<code>StringIO</code>にため込んだ内容を<code>STDOUT</code>に出力する」というものがあります。この場合、<code>main.rb</code>は以下のようになるはずです。</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">main.rb</span></div>\n<div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"nb\">require</span> <span class=\"s1\">'stringio'</span>\n\n<span class=\"no\">StringIO</span><span class=\"p\">.</span><span class=\"nf\">open</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">io</span><span class=\"o\">|</span>\n  <span class=\"c1\"># 標準出力をStringIOにリダイレクト</span>\n  <span class=\"vg\">$stdout</span> <span class=\"o\">=</span> <span class=\"n\">io</span>\n\n  <span class=\"c1\"># ここはもともとのmain.rbと同じ</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"STDOUT.isatty = </span><span class=\"si\">#{</span><span class=\"no\">STDOUT</span><span class=\"p\">.</span><span class=\"nf\">isatty</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n  <span class=\"mi\">5</span><span class=\"p\">.</span><span class=\"nf\">times</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span>\n    <span class=\"nb\">sleep</span> <span class=\"mi\">1</span>\n    <span class=\"nb\">puts</span> <span class=\"n\">x</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"c1\"># StringIOにためた内容をSTDOUTに吐き出す</span>\n  <span class=\"vg\">$stdout</span> <span class=\"o\">=</span> <span class=\"no\">STDOUT</span>\n  <span class=\"n\">io</span><span class=\"p\">.</span><span class=\"nf\">rewind</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">io</span><span class=\"p\">.</span><span class=\"nf\">read</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n</div>\n\n<p><code>console.rb</code>を実行して、<code>main.rb</code>がコンソールにつながっている場合の動きを確認すると、想定通りバッファリングしていることがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre class=\"with-code\"><code>$ ruby console.rb 2&gt;/dev/null\n*** main.rbの標準出力がコンソールにつながっている場合 ***\n2020-07-05 16:56:38 STDOUT.isatty = true\n2020-07-05 16:56:38 0\n2020-07-05 16:56:38 1\n2020-07-05 16:56:38 2\n2020-07-05 16:56:38 3\n2020-07-05 16:56:38 4\n</code></pre></div></div>\n","body":"# 環境\n\n- ruby 2.7.1p83 (2020-03-31 revision a0c7c23c9c) [x86_64-linux]\n- Ubuntu 20.04 LTS (Focal Fossa) [Windows Subsystem for Linux 2; WSL2]\n\n# 事象\n\nRubyで標準出力を利用する場合、標準出力の先がコンソールか別のコマンドかによって、バッファリング・フラッシュの規則が異なっているようです。\n\n- 標準出力が別コマンドにつながっている場合、バッファリングする\n- 標準出力がコンソールにつながっている場合、1行ごとにフラッシュする。\n\nこれを簡単に検証してみましょう。標準出力がコンソールにつながっている場合は`true`、コマンドにつながっている場合は`false`を標準出力に出力したあと、0から4までの数字を1秒おきに標準出力に出力するRubyコードです。\n\n```rb:main.rb\nputs \"STDOUT.isatty = #{STDOUT.isatty}\"\n5.times do |x|\n  sleep 1\n  puts x\nend\n```\n\n以下の`cmd.rb`と`console.rb`は`ruby main.rb`の標準出力をパイプまたはコンソールにつなげて実行し、出力した結果にタイムスタンプを付与します。\n\n```rb:cmd.rb\nrequire 'open3'\n\n# 読み込み専用IOから1行づつ読み込み、タイムスタンプを付与して出力する。\nputs '*** main.rbの標準出力が別コマンドにつながっている場合 ***'\nOpen3.popen3('ruby main.rb') do |stdin, stdout, stderr, wait_thr|\n  stdout.each do |line|\n    timestamp = Time.now.strftime('%F %T')\n    puts \"#{timestamp} #{line}\"\n  end\nend\n```\n\n```rb:console.rb\nrequire 'pty'\n\n# 読み込み専用IOから1行づつ読み込み、タイムスタンプを付与して出力する。\nputs '*** main.rbの標準出力がコンソールにつながっている場合 ***'\nPTY.spawn('ruby main.rb') do |read, write, pid|\n  read.each do |line|\n    timestamp = Time.now.strftime('%F %T')\n    puts \"#{timestamp} #{line}\"\n  end\nend\n```\n\n`cmd.rb`と`console.rb`の実行結果は以下の通りになります。\n\n```\n$ ruby cmd.rb 2>/dev/null\n*** main.rbの標準出力が別コマンドにつながっている場合 ***\n2020-07-05 16:45:09 STDOUT.isatty = false\n2020-07-05 16:45:09 0\n2020-07-05 16:45:09 1\n2020-07-05 16:45:09 2\n2020-07-05 16:45:09 3\n2020-07-05 16:45:09 4\n$ ruby console.rb 2>/dev/null\n*** main.rbの標準出力がコンソールにつながっている場合 ***\n2020-07-05 16:45:11 STDOUT.isatty = true\n2020-07-05 16:45:12 0\n2020-07-05 16:45:13 1\n2020-07-05 16:45:14 2\n2020-07-05 16:45:15 3\n2020-07-05 16:45:16 4\n```\n\nタイムスタンプを見ると、標準出力がパイプにつながっている`main.rb`はバッファリングしていますが、コンソールにつながっている場合は、行ごとにフラッシュしていることがわかります。\n\n# 標準出力がコマンドにつながっている場合でも、バッファリングしたくない\n\nいろいろやり方はあるとは思いますが、とりあえず思いつくのはこのあたりでしょうか。\n\n- `STDOUT.sync = true`を設定して、標準出力を同期モードにする\n- `STDOUT.flush`を任意のタイミングで呼び出す。\n\n前者について実験してみます。上記の`main.rb`を以下のように改造します。\n\n```rb:main.rb\n$stdout.sync = true\nputs \"STDOUT.isatty = #{STDOUT.isatty}\"\n5.times do |x|\n  sleep 1\n  puts x\nend\n```\n\n`main.rb`の標準出力を別コマンドにつなげる`cmd.rb`を実行すると、さきほどとは違って、バッファリングしていないことがわかります。\n\n```\n$ ruby cmd.rb 2>/dev/null\n*** main.rbの標準出力が別コマンドにつながっている場合 ***\n2020-07-05 16:51:33 STDOUT.isatty = false\n2020-07-05 16:51:34 0\n2020-07-05 16:51:35 1\n2020-07-05 16:51:36 2\n2020-07-05 16:51:37 3\n2020-07-05 16:51:38 4\n```\n\n# 標準出力がコンソールにつながっている場合でも、フラッシュしてほしくない\n\nこれについてもやりようはいろいろありそうですが、自分の思いつく範囲だと「`$stdout`を`StringIO`にリダイレクトし、任意のタイミングで`StringIO`にため込んだ内容を`STDOUT`に出力する」というものがあります。この場合、`main.rb`は以下のようになるはずです。\n\n```rb:main.rb\nrequire 'stringio'\n\nStringIO.open do |io|\n  # 標準出力をStringIOにリダイレクト\n  $stdout = io\n\n  # ここはもともとのmain.rbと同じ\n  puts \"STDOUT.isatty = #{STDOUT.isatty}\"\n  5.times do |x|\n    sleep 1\n    puts x\n  end\n\n  # StringIOにためた内容をSTDOUTに吐き出す\n  $stdout = STDOUT\n  io.rewind\n  puts io.read\nend\n```\n\n`console.rb`を実行して、`main.rb`がコンソールにつながっている場合の動きを確認すると、想定通りバッファリングしていることがわかります。\n\n```\n$ ruby console.rb 2>/dev/null\n*** main.rbの標準出力がコンソールにつながっている場合 ***\n2020-07-05 16:56:38 STDOUT.isatty = true\n2020-07-05 16:56:38 0\n2020-07-05 16:56:38 1\n2020-07-05 16:56:38 2\n2020-07-05 16:56:38 3\n2020-07-05 16:56:38 4\n```\n\n\n\n","coediting":false,"comments_count":0,"created_at":"2020-07-05T17:01:36+09:00","group":null,"id":"4ada1a17a509e1e0314f","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]}],"title":"標準出力がコンソールか別のコマンドかによって、バッファリングやフラッシュの規則が異なる","updated_at":"2020-07-05T17:01:36+09:00","url":"https://qiita.com/neko_the_shadow/items/4ada1a17a509e1e0314f","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":183,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}