{"rendered_body":"<p><strong>注意: C#初心者なので、とんちんかんなことをいっているかもしれません。</strong>呼び出すたびに5桁のランダムな整数からなるパスワードを生成する<code>CreatePassword</code>というメソッドを作成。5回連続でこのメソッドを呼び出したところ、5回とも同じパスワードが生成されるという事象が発生しました(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 83740</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 83740</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 83740</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 83740</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 83740</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">static</span> <span class=\"kt\">string</span> <span class=\"nf\">CreatePassword</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">random</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Random</span><span class=\"p\">();</span>\n        <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"n\">digits</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">Count</span> <span class=\"p\">&lt;</span> <span class=\"m\">5</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>そこでインターネットの叡智にすがってみました。そもそも<code>System.Random</code>のコンストラクタは<code>Random()</code>と<code>Random(int32)</code>の2種類があります。後者は引数としてシード値を与えているのですが、引数を省略した場合(つまり前者の場合)、シード値はPCが起動してからの時間を保持する<code>System.Environment.TickCount</code>が使用されます。要するに<code>new Random()</code>は内部的には<code>new Random(System.Environment.TickCount)</code>と同じということになります。</p>\n\n<p><strong>問題はこの<code>TickCount</code>プロパティがミリ秒単位であるということ。つまり1ミリ秒以内に複数の<code>Random</code>インスタンスがコンストラクタ<code>Random()</code>により生成された場合、すべて同じシード値になり、結果として同じ乱数列が生成されてしまいます。</strong></p>\n\n<p>そこで以下のように<code>sleep</code>を利用して、<code>Random()</code>のシード値である<code>TickCount</code>の値を無理やり変えてやると、<code>sleep</code>の前と後ろで乱数列が異なる、つまりシード値が変化したような挙動を見せています。前3つと後3つはそれぞれ1ミリ秒以内に生成され、同じシード値を共有しているのでしょう。(コンパイラの最適化なども「悪さ」をしているような気がしますが、そこまでは追いきれませんでした……)</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 38067</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 38067</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 38067</span>\n\n        <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Threading</span><span class=\"p\">.</span><span class=\"n\">Thread</span><span class=\"p\">.</span><span class=\"nf\">Sleep</span><span class=\"p\">(</span><span class=\"m\">1000</span><span class=\"p\">);</span> <span class=\"c1\">// sleep in 1 sec.</span>\n\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 72012</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 72012</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 72012</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">static</span> <span class=\"kt\">string</span> <span class=\"nf\">CreatePassword</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">random</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Random</span><span class=\"p\">();</span>\n        <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"n\">digits</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">Count</span> <span class=\"p\">&lt;</span> <span class=\"m\">5</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><strong>原因が分かったとして、では冒頭のコードを想定通り動作させるにはどう修正すればよいかですが、不用意に<code>System.Random</code>インスタンスを生成せずに使いまわすというのが手っ取り早そうです。</strong>繰り返すように<code>Random()</code>の乱数らしさは「時間」に依存していますが、この「時間」をプログラム上でコントロールするのは容易ではない。だとすれば「時間」の流れによって変化しないロジック、すなわち初期化された状態のままのインスタンスを使いまわすロジックを採用するのは、そう悪くない戦略だと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 60926</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 54621</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 62504</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 67956</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"nf\">CreatePassword</span><span class=\"p\">());</span> <span class=\"c1\">// =&gt; 91760</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">static</span> <span class=\"n\">Random</span> <span class=\"n\">random</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"nf\">Random</span><span class=\"p\">();</span>\n\n    <span class=\"k\">static</span> <span class=\"kt\">string</span> <span class=\"nf\">CreatePassword</span><span class=\"p\">()</span>\n    <span class=\"p\">{</span>\n        <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"n\">digits</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;();</span>\n        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"n\">Count</span> <span class=\"p\">&lt;</span> <span class=\"m\">5</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">digits</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">random</span><span class=\"p\">.</span><span class=\"nf\">Next</span><span class=\"p\">(</span><span class=\"m\">10</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">digits</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>確かに修正後は<code>CreatePassword</code>をコールするたびに、ランダムなパスワードが生成されていますね(｀・ω・´)ｼｬｷｰﾝ</p>\n\n<p>参考:</p>\n\n<ul>\n<li><a href=\"https://msdn.microsoft.com/ja-jp/library/system.random(v=vs.110).aspx\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://msdn.microsoft.com/ja-jp/library/system.random(v=vs.110).aspx</a></li>\n<li><a href=\"https://msdn.microsoft.com/ja-jp/library/system.environment.tickcount(v=vs.110).aspx\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://msdn.microsoft.com/ja-jp/library/system.environment.tickcount(v=vs.110).aspx</a></li>\n<li><a href=\"http://www.atmarkit.co.jp/fdotnet/dotnettips/035random/random.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://www.atmarkit.co.jp/fdotnet/dotnettips/035random/random.html</a></li>\n</ul>\n","body":"__注意: C#初心者なので、とんちんかんなことをいっているかもしれません。__呼び出すたびに5桁のランダムな整数からなるパスワードを生成する`CreatePassword`というメソッドを作成。5回連続でこのメソッドを呼び出したところ、5回とも同じパスワードが生成されるという事象が発生しました(´・ω・｀)\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CreatePassword()); // => 83740\n        Console.WriteLine(CreatePassword()); // => 83740\n        Console.WriteLine(CreatePassword()); // => 83740\n        Console.WriteLine(CreatePassword()); // => 83740\n        Console.WriteLine(CreatePassword()); // => 83740\n    }\n\n    static string CreatePassword()\n    {\n        var random = new Random();\n        List<int> digits = new List<int>();\n        while (digits.Count < 5)\n        {\n            digits.Add(random.Next(10));\n        }\n        return string.Join(\"\", digits);\n    }\n}\n```\n\nそこでインターネットの叡智にすがってみました。そもそも`System.Random`のコンストラクタは`Random()`と`Random(int32)`の2種類があります。後者は引数としてシード値を与えているのですが、引数を省略した場合(つまり前者の場合)、シード値はPCが起動してからの時間を保持する`System.Environment.TickCount`が使用されます。要するに`new Random()`は内部的には`new Random(System.Environment.TickCount)`と同じということになります。\n\n__問題はこの`TickCount`プロパティがミリ秒単位であるということ。つまり1ミリ秒以内に複数の`Random`インスタンスがコンストラクタ`Random()`により生成された場合、すべて同じシード値になり、結果として同じ乱数列が生成されてしまいます。__\n\nそこで以下のように`sleep`を利用して、`Random()`のシード値である`TickCount`の値を無理やり変えてやると、`sleep`の前と後ろで乱数列が異なる、つまりシード値が変化したような挙動を見せています。前3つと後3つはそれぞれ1ミリ秒以内に生成され、同じシード値を共有しているのでしょう。(コンパイラの最適化なども「悪さ」をしているような気がしますが、そこまでは追いきれませんでした……)\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CreatePassword()); // => 38067\n        Console.WriteLine(CreatePassword()); // => 38067\n        Console.WriteLine(CreatePassword()); // => 38067\n\n        System.Threading.Thread.Sleep(1000); // sleep in 1 sec.\n\n        Console.WriteLine(CreatePassword()); // => 72012\n        Console.WriteLine(CreatePassword()); // => 72012\n        Console.WriteLine(CreatePassword()); // => 72012\n    }\n    \n    static string CreatePassword()\n    {\n        var random = new Random();\n        List<int> digits = new List<int>();\n        while (digits.Count < 5)\n        {\n            digits.Add(random.Next(10));\n        }\n        return string.Join(\"\", digits);\n    }\n}\n```\n\n__原因が分かったとして、では冒頭のコードを想定通り動作させるにはどう修正すればよいかですが、不用意に`System.Random`インスタンスを生成せずに使いまわすというのが手っ取り早そうです。__繰り返すように`Random()`の乱数らしさは「時間」に依存していますが、この「時間」をプログラム上でコントロールするのは容易ではない。だとすれば「時間」の流れによって変化しないロジック、すなわち初期化された状態のままのインスタンスを使いまわすロジックを採用するのは、そう悪くない戦略だと思います。\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(CreatePassword()); // => 60926\n        Console.WriteLine(CreatePassword()); // => 54621\n        Console.WriteLine(CreatePassword()); // => 62504\n        Console.WriteLine(CreatePassword()); // => 67956\n        Console.WriteLine(CreatePassword()); // => 91760\n    }\n    \n    static Random random = new Random();\n\n    static string CreatePassword()\n    {\n        List<int> digits = new List<int>();\n        while (digits.Count < 5)\n        {\n            digits.Add(random.Next(10));\n        }\n        return string.Join(\"\", digits);\n    }\n}\n```\n\n確かに修正後は`CreatePassword`をコールするたびに、ランダムなパスワードが生成されていますね(｀・ω・´)ｼｬｷｰﾝ\n\n参考:\n\n- https://msdn.microsoft.com/ja-jp/library/system.random(v=vs.110).aspx\n- https://msdn.microsoft.com/ja-jp/library/system.environment.tickcount(v=vs.110).aspx\n- http://www.atmarkit.co.jp/fdotnet/dotnettips/035random/random.html\n","coediting":false,"comments_count":2,"created_at":"2018-01-17T23:28:25+09:00","group":null,"id":"72f0285324100a596979","likes_count":7,"private":false,"reactions_count":0,"stocks_count":4,"tags":[{"name":"C#","versions":[]}],"title":"別々のSystem.Randomインスタンスが同じ乱数列を生成してしまう","updated_at":"2018-01-17T23:43:01+09:00","url":"https://qiita.com/neko_the_shadow/items/72f0285324100a596979","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":204,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":13054,"team_membership":null}