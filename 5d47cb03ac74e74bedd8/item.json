{"rendered_body":"\n<h1>\n<span id=\"問題\" class=\"fragment\"></span><a href=\"#%E5%95%8F%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>問題</h1>\n\n<p>突然ですが、次のコードは<code>NullPointerException</code>になる可能性があります。どのような場合でしょうか?</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kt\">boolean</span> <span class=\"n\">iszero</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n</pre></div></div>\n\n<h1>\n<span id=\"答え\" class=\"fragment\"></span><a href=\"#%E7%AD%94%E3%81%88\"><i class=\"fa fa-link\"></i></a>答え</h1>\n\n<p>答えは、変数<code>n</code>の型が<code>Integer</code>で、値が<code>null</code>の場合に<code>NullPointerException</code>が発生します。たとえば以下のような<code>Main.java</code>があるとします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"kd\">throws</span> <span class=\"nc\">Exception</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Integer</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"kc\">null</span><span class=\"o\">;</span>\n        <span class=\"kt\">boolean</span> <span class=\"n\">iszero</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>これをコンパイルし、実行すると、確かに<code>NullPointerException</code>が発生することが確認できます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ javac Main.java\n$ java Main\nException in thread \"main\" java.lang.NullPointerException\n    at Main.main(Main.java:4)\n</pre></div></div>\n\n<h1>\n<span id=\"解説\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E8%AA%AC\"><i class=\"fa fa-link\"></i></a>解説</h1>\n\n<p><a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.2\" rel=\"nofollow noopener\" target=\"_blank\">Java Language Specification の 4.2.2. Integer Operations</a> には次の通りに記述されています。</p>\n\n<blockquote>\n<p>Any integer operator can throw a NullPointerException if unboxing conversion (§5.1.8) of a null reference is required. </p>\n</blockquote>\n\n<p>要するにJava言語の仕様というわけで、Javaプログラマは粛々と従うほかないわけです<del>が、それではさみしいので、一応自分なりの解釈を述べておくと -- 上記のコードの右辺はリテラルで宣言された0、すなわち<code>int</code>型です。そのため左辺はunboxingされ、<code>Integer</code>から<code>int</code>にキャストされます。ですが左辺<code>n</code>は<code>null</code>。<code>int</code>型は<code>null</code>を許容しないので、<code>NullPointerException</code>になるわけです。</del> <strong>(2019/11/11 コメントをもとに修正)</strong></p>\n\n<h1>\n<span id=\"愚痴\" class=\"fragment\"></span><a href=\"#%E6%84%9A%E7%97%B4\"><i class=\"fa fa-link\"></i></a>愚痴</h1>\n\n<ul>\n<li>\n<del>こういう場合は「<code>null</code>によるUnboxingの失敗」を示す専用例外を投げてほしいという気持ちもあったりなかったり。<code>NullPointerException</code>だと「キャストに失敗した」という成分がすっぽり抜けてしまうので(´・ω・｀)</del> <strong>(2019/11/11 コメントをもとに修正)</strong>\n</li>\n<li>Javaプログラマの間ではこの性質はよく知られており、自分も知っていたのですが、それに気づかず、1時間近くを溶かしたというのが、この記事を書いたきっかけになります……。言い訳すると、上記のサンプルコード程度であればすぐ気がついたと思うのですが、実際は以下のようなコードでした。これじゃわかるもんもわからん(´・ω・｀)</li>\n</ul>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"nc\">List</span><span class=\"o\">&lt;</span><span class=\"nc\">Integer</span><span class=\"o\">&gt;</span> <span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ArrayList</span><span class=\"o\">&lt;&gt;();</span>\n\n<span class=\"c1\">//</span>\n<span class=\"c1\">// すごいスパゲッティコード</span>\n<span class=\"c1\">//</span>\n\n<span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"kc\">null</span><span class=\"o\">);</span> <span class=\"c1\">// ここでまぎれこんだ</span>\n\n<span class=\"c1\">//</span>\n<span class=\"c1\">// すごいスパゲッティコード</span>\n<span class=\"c1\">//</span>\n\n<span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">size</span><span class=\"o\">();</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n\n    <span class=\"c1\">//</span>\n    <span class=\"c1\">// すごいスパゲッティコード</span>\n    <span class=\"c1\">// </span>\n\n    <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span> <span class=\"c1\">// ここでNullPointerException</span>\n\n        <span class=\"c1\">//</span>\n        <span class=\"c1\">// すごいスパゲッティコード</span>\n        <span class=\"c1\">// </span>\n\n    <span class=\"o\">}</span>\n\n    <span class=\"c1\">//</span>\n    <span class=\"c1\">// すごいスパゲッティコード</span>\n    <span class=\"c1\">// </span>\n\n<span class=\"o\">}</span>\n</pre></div></div>\n","body":"# 問題\n\n突然ですが、次のコードは`NullPointerException`になる可能性があります。どのような場合でしょうか?\n\n```java\nboolean iszero = n == 0;\n```\n\n# 答え\n\n答えは、変数`n`の型が`Integer`で、値が`null`の場合に`NullPointerException`が発生します。たとえば以下のような`Main.java`があるとします。\n\n```java:Main.java\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        Integer n = null;\n        boolean iszero = n == 0;\n    }\n}\n```\n\nこれをコンパイルし、実行すると、確かに`NullPointerException`が発生することが確認できます。\n\n```\n$ javac Main.java\n$ java Main\nException in thread \"main\" java.lang.NullPointerException\n    at Main.main(Main.java:4)\n```\n\n# 解説\n\n[Java Language Specification の 4.2.2. Integer Operations](https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2.2) には次の通りに記述されています。\n\n> Any integer operator can throw a NullPointerException if unboxing conversion (§5.1.8) of a null reference is required. \n\n要するにJava言語の仕様というわけで、Javaプログラマは粛々と従うほかないわけです~~が、それではさみしいので、一応自分なりの解釈を述べておくと -- 上記のコードの右辺はリテラルで宣言された0、すなわち`int`型です。そのため左辺はunboxingされ、`Integer`から`int`にキャストされます。ですが左辺`n`は`null`。`int`型は`null`を許容しないので、`NullPointerException`になるわけです。~~ __(2019/11/11 コメントをもとに修正)__\n\n# 愚痴\n\n* ~~こういう場合は「`null`によるUnboxingの失敗」を示す専用例外を投げてほしいという気持ちもあったりなかったり。`NullPointerException`だと「キャストに失敗した」という成分がすっぽり抜けてしまうので(´・ω・｀)~~ __(2019/11/11 コメントをもとに修正)__\n* Javaプログラマの間ではこの性質はよく知られており、自分も知っていたのですが、それに気づかず、1時間近くを溶かしたというのが、この記事を書いたきっかけになります……。言い訳すると、上記のサンプルコード程度であればすぐ気がついたと思うのですが、実際は以下のようなコードでした。これじゃわかるもんもわからん(´・ω・｀)\n\n```java\nList<Integer> digits = new ArrayList<>();\n\n//\n// すごいスパゲッティコード\n//\n\ndigits.add(null); // ここでまぎれこんだ\n\n//\n// すごいスパゲッティコード\n//\n\nfor (int i = 0; i < digits.size(); i++) {\n    \n    //\n    // すごいスパゲッティコード\n    // \n    \n    if (digits.get(i) == 0) { // ここでNullPointerException\n\n        //\n        // すごいスパゲッティコード\n        // \n    \n    }\n\n    //\n    // すごいスパゲッティコード\n    // \n\n}\n```\n","coediting":false,"comments_count":2,"created_at":"2019-11-11T12:37:06+09:00","group":null,"id":"5d47cb03ac74e74bedd8","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"n == 0がNullPointerExceptionをスローする。","updated_at":"2019-11-11T15:41:24+09:00","url":"https://qiita.com/neko_the_shadow/items/5d47cb03ac74e74bedd8","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":166,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}