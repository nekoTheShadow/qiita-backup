{"rendered_body":"<p><a href=\"https://qiita.com/advent-calendar/2018/4949prime-series\">「シクシク素数列 Advent Calendar 2018」</a>の16日目の記事になります。問題詳細は当該アドベントカレンダーのページを参照していただくとして、ごく簡単にまとめておくと「100以下の自然数nが与えられたとき、n番目までの\"シクシク素数\"を求めて、カンマ区切りで出力しなさい」というものになります。なお\"シクシク素数\"とは数値として4または9を含む素数を指します。</p>\n\n<p>本記事ではこの\"シクシク素数\"問題をC#で解答しています。解答コードは次の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">Prime4949</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Program</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"p\">=</span> <span class=\"m\">100</span><span class=\"p\">;</span>\n            <span class=\"kt\">var</span> <span class=\"n\">answer</span> <span class=\"p\">=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"nf\">Primes</span><span class=\"p\">().</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">Program</span><span class=\"p\">.</span><span class=\"n\">HasFourOrNine</span><span class=\"p\">).</span><span class=\"nf\">Take</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">));</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">/// &lt;summary&gt;</span>\n        <span class=\"c1\">/// 数値に4か9を含むかどうかを判定する。</span>\n        <span class=\"c1\">/// &lt;/summary&gt;</span>\n        <span class=\"c1\">/// &lt;param name=\"x\"&gt;自然数&lt;/param&gt;</span>\n        <span class=\"c1\">/// &lt;returns&gt;xが4か9を含む場合true&lt;/returns&gt;</span>\n        <span class=\"k\">static</span> <span class=\"kt\">bool</span> <span class=\"nf\">HasFourOrNine</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"p\">&gt;</span> <span class=\"m\">0</span><span class=\"p\">)</span>\n            <span class=\"p\">{</span>\n                <span class=\"kt\">int</span> <span class=\"n\">mod</span> <span class=\"p\">=</span> <span class=\"n\">x</span> <span class=\"p\">%</span> <span class=\"m\">10</span><span class=\"p\">;</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">mod</span> <span class=\"p\">==</span> <span class=\"m\">4</span> <span class=\"p\">||</span> <span class=\"n\">mod</span> <span class=\"p\">==</span> <span class=\"m\">9</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n                <span class=\"n\">x</span> <span class=\"p\">/=</span> <span class=\"m\">10</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">/// &lt;summary&gt;</span>\n        <span class=\"c1\">/// 素数を次々に生成する。</span>\n        <span class=\"c1\">/// </span>\n        <span class=\"c1\">/// 注意: </span>\n        <span class=\"c1\">///     任意の素数をxとすると、x+1..x^2に1つ以上の素数が含まれていることを前提にしています。</span>\n        <span class=\"c1\">///     そのほか、説明のためにもろもろの検査をすっ飛ばしています。</span>\n        <span class=\"c1\">///     クリティカルな場面では利用しないことをおすすめします。</span>\n        <span class=\"c1\">/// &lt;/summary&gt;</span>\n        <span class=\"c1\">/// &lt;returns&gt;素数&lt;/returns&gt;</span>\n        <span class=\"k\">static</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"nf\">Primes</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">primes</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">5</span> <span class=\"p\">};</span>\n            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"p\">;</span> <span class=\"n\">index</span><span class=\"p\">++)</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">==</span> <span class=\"n\">primes</span><span class=\"p\">.</span><span class=\"n\">Count</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"kt\">var</span> <span class=\"n\">min</span> <span class=\"p\">=</span> <span class=\"n\">primes</span><span class=\"p\">.</span><span class=\"nf\">Last</span><span class=\"p\">()</span> <span class=\"p\">+</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n                    <span class=\"kt\">var</span> <span class=\"n\">max</span> <span class=\"p\">=</span> <span class=\"n\">min</span> <span class=\"p\">*</span> <span class=\"n\">min</span><span class=\"p\">;</span>\n                    <span class=\"kt\">var</span> <span class=\"n\">integers</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"n\">min</span><span class=\"p\">,</span> <span class=\"n\">max</span> <span class=\"p\">-</span> <span class=\"n\">min</span> <span class=\"p\">+</span> <span class=\"m\">1</span><span class=\"p\">).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n                    <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">prime</span> <span class=\"k\">in</span> <span class=\"n\">primes</span><span class=\"p\">)</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"kt\">int</span> <span class=\"n\">sieving</span> <span class=\"p\">=</span> <span class=\"n\">integers</span><span class=\"p\">.</span><span class=\"nf\">FindIndex</span><span class=\"p\">(</span><span class=\"n\">digit</span> <span class=\"p\">=&gt;</span> <span class=\"n\">digit</span> <span class=\"p\">%</span> <span class=\"n\">prime</span> <span class=\"p\">==</span> <span class=\"m\">0</span><span class=\"p\">);</span>\n                        <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">sieving</span> <span class=\"p\">&lt;</span> <span class=\"n\">integers</span><span class=\"p\">.</span><span class=\"n\">Count</span><span class=\"p\">)</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"n\">integers</span><span class=\"p\">[</span><span class=\"n\">sieving</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"p\">-</span><span class=\"m\">1</span><span class=\"p\">;</span>\n                            <span class=\"n\">sieving</span> <span class=\"p\">+=</span> <span class=\"n\">prime</span><span class=\"p\">;</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                    <span class=\"n\">primes</span><span class=\"p\">.</span><span class=\"nf\">AddRange</span><span class=\"p\">(</span><span class=\"n\">integers</span><span class=\"p\">.</span><span class=\"nf\">Where</span><span class=\"p\">(</span><span class=\"n\">integer</span> <span class=\"p\">=&gt;</span> <span class=\"n\">integer</span> <span class=\"p\">!=</span> <span class=\"p\">-</span><span class=\"m\">1</span><span class=\"p\">));</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"k\">yield</span> <span class=\"k\">return</span> <span class=\"n\">primes</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">];</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<hr>\n\n<p>シンプルな問題なので解答方法はいろいろあると思いますが、今回は次のような方針を採用してみます:「素数列から4949性を満たすものをフィルタリングする」。まず素数列の生成ですが、今回はいわゆる<a href=\"https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9\" rel=\"nofollow noopener\" target=\"_blank\">エラトステネスのふるい</a>を利用することにしました。エラトステネスのふるいは素数判定法のひとつで、指定された整数以下の素数を単純かつ効率的に求めることができ、プログラミングの教材にもよく利用されます。「指定された整数以下の素数を求める」という記述を見ると、今回のように「無限に素数を作りたい」という要件にマッチしないようにも思えますが、工夫次第ではなんとでもなり、それを実装したものが<code>Primes</code>メソッドになります。</p>\n\n<p>4949性を満たすかどうか--すなわち与えられた整数が数値として4または9を含むかの判定を行っているのがメソッド<code>HasFourOrNine</code>で、除法をうまく利用して整数xを各桁ごとにばらしています。</p>\n","body":"[「シクシク素数列 Advent Calendar 2018」](https://qiita.com/advent-calendar/2018/4949prime-series)の16日目の記事になります。問題詳細は当該アドベントカレンダーのページを参照していただくとして、ごく簡単にまとめておくと「100以下の自然数nが与えられたとき、n番目までの\"シクシク素数\"を求めて、カンマ区切りで出力しなさい」というものになります。なお\"シクシク素数\"とは数値として4または9を含む素数を指します。\n\n本記事ではこの\"シクシク素数\"問題をC#で解答しています。解答コードは次の通りです。\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Prime4949\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int n = 100;\n            var answer = string.Join(\",\", Primes().Where(Program.HasFourOrNine).Take(n));\n            Console.WriteLine(answer);\n        }\n\n        /// <summary>\n        /// 数値に4か9を含むかどうかを判定する。\n        /// </summary>\n        /// <param name=\"x\">自然数</param>\n        /// <returns>xが4か9を含む場合true</returns>\n        static bool HasFourOrNine(int x)\n        {\n            while (x > 0)\n            {\n                int mod = x % 10;\n                if (mod == 4 || mod == 9)\n                {\n                    return true;\n                }\n                x /= 10;\n            }\n            return false;\n        }\n\n        /// <summary>\n        /// 素数を次々に生成する。\n        /// \n        /// 注意: \n        ///     任意の素数をxとすると、x+1..x^2に1つ以上の素数が含まれていることを前提にしています。\n        ///     そのほか、説明のためにもろもろの検査をすっ飛ばしています。\n        ///     クリティカルな場面では利用しないことをおすすめします。\n        /// </summary>\n        /// <returns>素数</returns>\n        static IEnumerable<int> Primes()\n        {\n            var primes = new List<int> { 2, 3, 5 };\n            for (int index = 0; ; index++)\n            {\n                if (index == primes.Count)\n                {\n                    var min = primes.Last() + 1;\n                    var max = min * min;\n                    var integers = Enumerable.Range(min, max - min + 1).ToList();\n                    foreach (var prime in primes)\n                    {\n                        int sieving = integers.FindIndex(digit => digit % prime == 0);\n                        while (sieving < integers.Count)\n                        {\n                            integers[sieving] = -1;\n                            sieving += prime;\n                        }\n                    }\n                    primes.AddRange(integers.Where(integer => integer != -1));\n                }\n\n                yield return primes[index];\n            }\n        }\n    }\n}\n```\n\n---\n\nシンプルな問題なので解答方法はいろいろあると思いますが、今回は次のような方針を採用してみます:「素数列から4949性を満たすものをフィルタリングする」。まず素数列の生成ですが、今回はいわゆる[エラトステネスのふるい](https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9)を利用することにしました。エラトステネスのふるいは素数判定法のひとつで、指定された整数以下の素数を単純かつ効率的に求めることができ、プログラミングの教材にもよく利用されます。「指定された整数以下の素数を求める」という記述を見ると、今回のように「無限に素数を作りたい」という要件にマッチしないようにも思えますが、工夫次第ではなんとでもなり、それを実装したものが`Primes`メソッドになります。\n\n4949性を満たすかどうか--すなわち与えられた整数が数値として4または9を含むかの判定を行っているのがメソッド`HasFourOrNine`で、除法をうまく利用して整数xを各桁ごとにばらしています。\n\n","coediting":false,"comments_count":0,"created_at":"2018-12-12T23:40:25+09:00","group":null,"id":"ca927584a6059d681cd3","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"C#","versions":[]}],"title":"シクシク素数列 Advent Calendar 2018 C#編","updated_at":"2018-12-16T07:03:11+09:00","url":"https://qiita.com/neko_the_shadow/items/ca927584a6059d681cd3","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":186,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}