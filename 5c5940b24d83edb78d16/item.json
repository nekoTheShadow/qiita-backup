{"rendered_body":"<p>「入力された文字列がint型に変換されるかどうかをチェックしたい」という場合、次のように判定しているソースコードを見かけることがあります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"k\">try</span> <span class=\"o\">{</span>\n    <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">str</span><span class=\"o\">);</span>\n    <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">NumberFormatException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><strong>まず変換してみてダメならfalseにする、そして例外を握りつぶすなど、この方法には個人的に違和感があり、なんとなく敬遠の対象でした。</strong>身もふたもない言い方をすれば、生理的嫌悪感があります。</p>\n\n<p>そういうわけで<strong><code>Integer#parseInt</code>を利用せずに、与えられた文字列がintに変換できるかどうかチェックするメソッド</strong>を作っておきました(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre class=\"with-code\"><code><span class=\"kd\">final</span> <span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">IntegerUtils</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"123\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"-23\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"12A\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; false</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"ABC\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; false</span>\n\n        <span class=\"c1\">// 境界値でも正確に判定できている。</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"2147483647\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"2147483648\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; false</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"-2147483648\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"-2147483649\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; false</span>\n\n        <span class=\"c1\">// ==== 2017-05-16 テストケースを追加した。 ===</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"0\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"473\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"+42\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"-0\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"-\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; false</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"+5\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"１２３\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">IntegerUtils</span><span class=\"o\">.</span><span class=\"na\">isInteger</span><span class=\"o\">(</span><span class=\"s\">\"١٢٣\"</span><span class=\"o\">));</span> <span class=\"c1\">//=&gt; true        </span>\n    <span class=\"o\">}</span>\n\n\n    <span class=\"cm\">/**\n     * 文字列が10進数の整数であり、かつintの範疇に収まるかどうかを判定する。\n     * @param str 判定対象の文字列。\n     * @return 文字列が10進数の整数であり、かつintの範疇に収まる場合はTrue.\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isInteger</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">str</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">==</span> <span class=\"kc\">null</span>\n                <span class=\"o\">||</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">isEmpty</span><span class=\"o\">()</span>\n                <span class=\"o\">||</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"+\"</span><span class=\"o\">)</span>\n                <span class=\"o\">||</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">equals</span><span class=\"o\">(</span><span class=\"s\">\"-\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"kt\">char</span> <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">);</span>\n        <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"sc\">'+'</span> <span class=\"o\">||</span> <span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"sc\">'-'</span><span class=\"o\">)</span> <span class=\"o\">?</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"o\">(</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"sc\">'-'</span><span class=\"o\">)</span> <span class=\"o\">?</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span><span class=\"o\">;</span>\n        <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">();</span>\n        <span class=\"kt\">long</span> <span class=\"n\">integer</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">len</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">char</span> <span class=\"n\">ch</span> <span class=\"o\">=</span> <span class=\"n\">str</span><span class=\"o\">.</span><span class=\"na\">charAt</span><span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">++);</span>\n            <span class=\"kt\">int</span> <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"nc\">Character</span><span class=\"o\">.</span><span class=\"na\">digit</span><span class=\"o\">(</span><span class=\"n\">ch</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">);</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">digit</span> <span class=\"o\">==</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n\n            <span class=\"n\">integer</span> <span class=\"o\">=</span> <span class=\"n\">integer</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">sign</span> <span class=\"o\">*</span> <span class=\"n\">digit</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">integer</span> <span class=\"o\">&lt;</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">MIN_VALUE</span> <span class=\"o\">||</span> <span class=\"nc\">Integer</span><span class=\"o\">.</span><span class=\"na\">MAX_VALUE</span> <span class=\"o\">&lt;</span> <span class=\"n\">integer</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n\n\n<span class=\"c1\">//    ==== 2017-05-16 ロジックに誤りがあったため全面的に修正した。 ===</span>\n<span class=\"c1\">//    /**</span>\n<span class=\"c1\">//     * 文字列が10進数の整数であり、かつintの範疇に収まるかどうかを判定する。</span>\n<span class=\"c1\">//     * @param str 判定対象の文字列。</span>\n<span class=\"c1\">//     * @return 文字列が10進数の整数であり、かつintの範疇に収まる場合はTrue.</span>\n<span class=\"c1\">//     */</span>\n<span class=\"c1\">//    public static final boolean isInteger(String str) {        </span>\n<span class=\"c1\">//        if (str == null || str.isEmpty()) {</span>\n<span class=\"c1\">//            return false;</span>\n<span class=\"c1\">//        }</span>\n<span class=\"c1\">//        </span>\n<span class=\"c1\">//        boolean isNegative = str.charAt(0) == '-';</span>\n<span class=\"c1\">//        int i = isNegative ? 1 : 0;</span>\n<span class=\"c1\">//        int sign = isNegative ? -1: 1;</span>\n<span class=\"c1\">//        int len = str.length();</span>\n<span class=\"c1\">//        long integer = 0;</span>\n<span class=\"c1\">//        </span>\n<span class=\"c1\">//        while (i &lt; len) {</span>\n<span class=\"c1\">//            int digit = str.charAt(i++) - '0';</span>\n<span class=\"c1\">//            if (digit &lt; 0 || 9 &lt; digit) {</span>\n<span class=\"c1\">//                return false;</span>\n<span class=\"c1\">//            }</span>\n<span class=\"c1\">//            </span>\n<span class=\"c1\">//            integer = integer * 10 + sign * digit;</span>\n<span class=\"c1\">//            if (integer &lt; Integer.MIN_VALUE || Integer.MAX_VALUE &lt; integer) {</span>\n<span class=\"c1\">//                return false;</span>\n<span class=\"c1\">//            }</span>\n<span class=\"c1\">//        }</span>\n<span class=\"c1\">//        return true;</span>\n<span class=\"c1\">//    }</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>アルゴリズムというか、やっていることはごく単純で、与えられた引数が整数に変換できるかどうかを1文字ずつ検査しているだけ。<code>Integer#parseInt</code>を利用する方法と違いがあるとすれば、例外を利用していないということぐらいですが、「例外ならfalse」というよりは洗練されていると個人的には感じています。自己満足(´・ω・｀)</p>\n","body":"\n「入力された文字列がint型に変換されるかどうかをチェックしたい」という場合、次のように判定しているソースコードを見かけることがあります。\n\n```java\ntry {\n    Integer.parseInt(str);\n    return true;\n} catch (NumberFormatException e) {\n    return false;\n}\n```\n\n__まず変換してみてダメならfalseにする、そして例外を握りつぶすなど、この方法には個人的に違和感があり、なんとなく敬遠の対象でした。__身もふたもない言い方をすれば、生理的嫌悪感があります。\n\nそういうわけで__`Integer#parseInt`を利用せずに、与えられた文字列がintに変換できるかどうかチェックするメソッド__を作っておきました(´・ω・｀)\n\n```java\nfinal public class IntegerUtils {\n    \n    public static void main(String[] args) {\n        System.out.println(IntegerUtils.isInteger(\"123\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"-23\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"12A\")); //=> false\n        System.out.println(IntegerUtils.isInteger(\"ABC\")); //=> false\n        \n        // 境界値でも正確に判定できている。\n        System.out.println(IntegerUtils.isInteger(\"2147483647\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"2147483648\")); //=> false\n        System.out.println(IntegerUtils.isInteger(\"-2147483648\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"-2147483649\")); //=> false\n        \n        // ==== 2017-05-16 テストケースを追加した。 ===\n        System.out.println(IntegerUtils.isInteger(\"0\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"473\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"+42\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"-0\")); //=> true\n\n        System.out.println(IntegerUtils.isInteger(\"-\")); //=> false\n        System.out.println(IntegerUtils.isInteger(\"+5\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"１２３\")); //=> true\n        System.out.println(IntegerUtils.isInteger(\"١٢٣\")); //=> true        \n    }\n    \n\n    /**\n     * 文字列が10進数の整数であり、かつintの範疇に収まるかどうかを判定する。\n     * @param str 判定対象の文字列。\n     * @return 文字列が10進数の整数であり、かつintの範疇に収まる場合はTrue.\n     */\n    public static final boolean isInteger(String str) {\n        if (str == null\n        \t\t|| str.isEmpty()\n        \t\t|| str.equals(\"+\")\n        \t\t|| str.equals(\"-\")) {\n            return false;\n        }\n\n        char first = str.charAt(0);\n        int i = (first == '+' || first == '-') ? 1 : 0;\n        int sign = (first == '-') ? -1 : 1;\n        int len = str.length();\n        long integer = 0;\n\n        while (i < len) {\n        \tchar ch = str.charAt(i++);\n            int digit = Character.digit(ch, 10);\n            if (digit == -1) {\n            \treturn false;\n            }\n\n            integer = integer * 10 + sign * digit;\n            if (integer < Integer.MIN_VALUE || Integer.MAX_VALUE < integer) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n\n\n//    ==== 2017-05-16 ロジックに誤りがあったため全面的に修正した。 ===\n//    /**\n//     * 文字列が10進数の整数であり、かつintの範疇に収まるかどうかを判定する。\n//     * @param str 判定対象の文字列。\n//     * @return 文字列が10進数の整数であり、かつintの範疇に収まる場合はTrue.\n//     */\n//    public static final boolean isInteger(String str) {        \n//        if (str == null || str.isEmpty()) {\n//            return false;\n//        }\n//        \n//        boolean isNegative = str.charAt(0) == '-';\n//        int i = isNegative ? 1 : 0;\n//        int sign = isNegative ? -1: 1;\n//        int len = str.length();\n//        long integer = 0;\n//        \n//        while (i < len) {\n//            int digit = str.charAt(i++) - '0';\n//            if (digit < 0 || 9 < digit) {\n//                return false;\n//            }\n//            \n//            integer = integer * 10 + sign * digit;\n//            if (integer < Integer.MIN_VALUE || Integer.MAX_VALUE < integer) {\n//                return false;\n//            }\n//        }\n//        return true;\n//    }\n}\n```\n\nアルゴリズムというか、やっていることはごく単純で、与えられた引数が整数に変換できるかどうかを1文字ずつ検査しているだけ。`Integer#parseInt`を利用する方法と違いがあるとすれば、例外を利用していないということぐらいですが、「例外ならfalse」というよりは洗練されていると個人的には感じています。自己満足(´・ω・｀)\n","coediting":false,"comments_count":2,"created_at":"2017-05-15T23:34:50+09:00","group":null,"id":"5c5940b24d83edb78d16","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"Integer#parseIntを利用せずに文字列がintに変換できるかどうかを検査する","updated_at":"2017-05-16T09:57:15+09:00","url":"https://qiita.com/neko_the_shadow/items/5c5940b24d83edb78d16","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":183,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}