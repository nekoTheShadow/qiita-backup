{"rendered_body":"<p>受け取ったシグナルに合わせて、指定した処理を実行してくれる<code>trap</code>、とても便利ですよね(´・ω・｀) 個人的には「作成した一時ファイルを終了後に必ず破棄する」という処理を実装する際によく利用しています。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nv\">path</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n<span class=\"nb\">trap</span> <span class=\"s2\">\"rm -f </span><span class=\"k\">${</span><span class=\"nv\">path</span><span class=\"k\">}</span><span class=\"s2\">\"</span> EXIT\n</code></pre></div></div>\n\n<p>ひとつのシグナルに対する処理はそのスクリプト内において1回しか定義できない、つまりtrapを呼び出すたびにどんどん上書きされてしまうことに注意する必要があります。たとえば「複数の一時ファイルを作成し、処理終了後にそれらをすべて破棄する」とき、ついつい次のようなコードを書きがちです。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">trap_test.sh</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">#!/bin/bash</span>\n\n<span class=\"nb\">set</span> <span class=\"nt\">-x</span>\n\n<span class=\"nv\">path1</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n<span class=\"nv\">path2</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n<span class=\"nv\">path3</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n\n<span class=\"k\">for </span>path <span class=\"k\">in</span> <span class=\"k\">${</span><span class=\"nv\">path1</span><span class=\"k\">}</span> <span class=\"k\">${</span><span class=\"nv\">path2</span><span class=\"k\">}</span> <span class=\"k\">${</span><span class=\"nv\">path3</span><span class=\"k\">}</span><span class=\"p\">;</span> <span class=\"k\">do\n  </span><span class=\"nb\">trap</span> <span class=\"s2\">\"rm -f </span><span class=\"k\">${</span><span class=\"nv\">path</span><span class=\"k\">}</span><span class=\"s2\">\"</span> EXIT\n<span class=\"k\">done</span>\n\n<span class=\"c\"># === do_something ===</span>\n\n<span class=\"nb\">exit </span>0\n</code></pre></div>\n</div>\n\n<p>これを実行した結果が以下の通りになります。trapを3回呼び出して、作成した3つの一時ファイルを処理終了後に削除することを意図していますが、<code>rm</code>は一度しか呼ばれていません。また少しわかりづらいのですが、trapにより呼ばれた<code>rm</code>は<code>path3</code>を削除しています。つまり<code>trap</code>は呼び出すごとに指定した処理を上書きしているとわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ bash trap_test.sh\n++ mktemp\n+ path1=/tmp/tmp.0dzHkNQP8n\n++ mktemp\n+ path2=/tmp/tmp.CtuP5ZdxyW\n++ mktemp\n+ path3=/tmp/tmp.8TZD5DRKKI\n+ for path in '${path1}' '${path2}' '${path3}'\n+ trap 'rm -f /tmp/tmp.0dzHkNQP8n' EXIT\n+ for path in '${path1}' '${path2}' '${path3}'\n+ trap 'rm -f /tmp/tmp.CtuP5ZdxyW' EXIT\n+ for path in '${path1}' '${path2}' '${path3}'\n+ trap 'rm -f /tmp/tmp.8TZD5DRKKI' EXIT\n+ exit 0\n+ rm -f /tmp/tmp.8TZD5DRKKI\n</code></pre></div></div>\n\n<p>したがって意図通りにするためには、<code>trap_test.sh</code>を次のように修正する必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">trap_test.sh</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c\">#!/bin/bash</span>\n\n<span class=\"nb\">set</span> <span class=\"nt\">-x</span>\n\n<span class=\"nv\">path1</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n<span class=\"nv\">path2</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n<span class=\"nv\">path3</span><span class=\"o\">=</span><span class=\"si\">$(</span><span class=\"nb\">mktemp</span><span class=\"si\">)</span>\n<span class=\"nb\">trap</span> <span class=\"s2\">\"rm -f </span><span class=\"k\">${</span><span class=\"nv\">path1</span><span class=\"k\">}</span><span class=\"s2\"> </span><span class=\"k\">${</span><span class=\"nv\">path2</span><span class=\"k\">}</span><span class=\"s2\"> </span><span class=\"k\">${</span><span class=\"nv\">path3</span><span class=\"k\">}</span><span class=\"s2\">\"</span> EXIT\n\n<span class=\"c\"># === do_something ===</span>\n\n<span class=\"nb\">exit </span>0\n</code></pre></div>\n</div>\n\n<p>この実行結果は以下の通りです。作成した3つの一時ファイルが<code>rm</code>の対象になっていることが確認できます(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ bash trap_test.sh\n++ mktemp\n+ path1=/tmp/tmp.vrVWvDvk9P\n++ mktemp\n+ path2=/tmp/tmp.i2aLRF3WMr\n++ mktemp\n+ path3=/tmp/tmp.Y6LOH2QYnw\n+ trap 'rm -f /tmp/tmp.vrVWvDvk9P /tmp/tmp.i2aLRF3WMr /tmp/tmp.Y6LOH2QYnw' EXIT\n+ exit 0\n+ rm -f /tmp/tmp.vrVWvDvk9P /tmp/tmp.i2aLRF3WMr /tmp/tmp.Y6LOH2QYnw\n</code></pre></div></div>\n","body":"受け取ったシグナルに合わせて、指定した処理を実行してくれる`trap`、とても便利ですよね(´・ω・｀) 個人的には「作成した一時ファイルを終了後に必ず破棄する」という処理を実装する際によく利用しています。\n\n```bash\npath=$(mktemp)\ntrap \"rm -f ${path}\" EXIT\n```\n\nひとつのシグナルに対する処理はそのスクリプト内において1回しか定義できない、つまりtrapを呼び出すたびにどんどん上書きされてしまうことに注意する必要があります。たとえば「複数の一時ファイルを作成し、処理終了後にそれらをすべて破棄する」とき、ついつい次のようなコードを書きがちです。\n\n```bash:trap_test.sh\n#!/bin/bash\n\nset -x\n\npath1=$(mktemp)\npath2=$(mktemp)\npath3=$(mktemp)\n\nfor path in ${path1} ${path2} ${path3}; do\n  trap \"rm -f ${path}\" EXIT\ndone\n\n# === do_something ===\n\nexit 0\n```\n\nこれを実行した結果が以下の通りになります。trapを3回呼び出して、作成した3つの一時ファイルを処理終了後に削除することを意図していますが、`rm`は一度しか呼ばれていません。また少しわかりづらいのですが、trapにより呼ばれた`rm`は`path3`を削除しています。つまり`trap`は呼び出すごとに指定した処理を上書きしているとわかります。\n\n```\n$ bash trap_test.sh\n++ mktemp\n+ path1=/tmp/tmp.0dzHkNQP8n\n++ mktemp\n+ path2=/tmp/tmp.CtuP5ZdxyW\n++ mktemp\n+ path3=/tmp/tmp.8TZD5DRKKI\n+ for path in '${path1}' '${path2}' '${path3}'\n+ trap 'rm -f /tmp/tmp.0dzHkNQP8n' EXIT\n+ for path in '${path1}' '${path2}' '${path3}'\n+ trap 'rm -f /tmp/tmp.CtuP5ZdxyW' EXIT\n+ for path in '${path1}' '${path2}' '${path3}'\n+ trap 'rm -f /tmp/tmp.8TZD5DRKKI' EXIT\n+ exit 0\n+ rm -f /tmp/tmp.8TZD5DRKKI\n```\n\nしたがって意図通りにするためには、`trap_test.sh`を次のように修正する必要があります。\n\n```bash:trap_test.sh\n#!/bin/bash\n\nset -x\n\npath1=$(mktemp)\npath2=$(mktemp)\npath3=$(mktemp)\ntrap \"rm -f ${path1} ${path2} ${path3}\" EXIT\n\n# === do_something ===\n\nexit 0\n```\n\nこの実行結果は以下の通りです。作成した3つの一時ファイルが`rm`の対象になっていることが確認できます(´・ω・｀)\n\n```\n$ bash trap_test.sh\n++ mktemp\n+ path1=/tmp/tmp.vrVWvDvk9P\n++ mktemp\n+ path2=/tmp/tmp.i2aLRF3WMr\n++ mktemp\n+ path3=/tmp/tmp.Y6LOH2QYnw\n+ trap 'rm -f /tmp/tmp.vrVWvDvk9P /tmp/tmp.i2aLRF3WMr /tmp/tmp.Y6LOH2QYnw' EXIT\n+ exit 0\n+ rm -f /tmp/tmp.vrVWvDvk9P /tmp/tmp.i2aLRF3WMr /tmp/tmp.Y6LOH2QYnw\n```\n","coediting":false,"comments_count":0,"created_at":"2018-03-01T23:01:14+09:00","group":null,"id":"74af8ad58284e1aa1378","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Bash","versions":[]},{"name":"trap","versions":[]},{"name":"signal","versions":[]}],"title":"trapがどんどん上書きされてしまう","updated_at":"2018-03-02T08:47:43+09:00","url":"https://qiita.com/neko_the_shadow/items/74af8ad58284e1aa1378","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":198,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}