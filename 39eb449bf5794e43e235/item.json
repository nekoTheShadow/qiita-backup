{"rendered_body":"<p>この記事は<a href=\"https://qiita.com/advent-calendar/2018/4949prime-series\">「シクシク素数列 Advent Calendar 2018」2日目</a>になります。</p>\n\n<p>詳細はアドベントカレンダーの該当ページを見ていただくとして、ざっくり問題内容をまとめておくと「100以下の正の整数Nがあたえられたとき、N番目までの\"シクシク素数\"を求め、カンマ区切りで出力しなさい」というもの。\"シクシク素数\"とは数値に4または9を素数を指しています。</p>\n\n<p>単純な問題なので、解法はいろいろあると思いますが、とりあえずは以下のような外部仕様を満たすAPIがあれば、これを組み合わせて、問題の答えが出せそうです。</p>\n\n<ol>\n<li>\n<code>hasFourOrNine</code>: 自然数xが引数として与えられたとき、xに4または9が含まれている場合はtrue、それ以外はfalseを返す。</li>\n<li>\n<code>isPrime</code>: 自然数xが引数として与えられたとき、xが素数ならばtrue、それ以外はfalseを返す。</li>\n<li>\n<code>solve</code>: 100以下の自然数nが引数として与えられたとき、n番目までの\"シクシク素数\"をカンマ区切りで連結した文字列を返す。</li>\n</ol>\n\n<p>さて実装に移っていくわけですが、Java6やJava7あたりのやや古いバージョンのJavaであれば、以下のように書いていたはずです(もっとも「やや古い」とはいうものの、Java製のシステムは概して長持ちなので、このぐらいの古さのバージョンであれば、現役で動いているものも多いと思います……)</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main1.java</span></div>\n<div class=\"highlight\"><pre>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main1</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"o\">;</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">solve</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">StringBuilder</span> <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nc\">StringBuilder</span><span class=\"o\">();</span>\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"o\">;</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">;</span> <span class=\"n\">x</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">isPrime</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">hasFourOrNine</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n                <span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span>\n                <span class=\"k\">if</span> <span class=\"o\">(--</span><span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"na\">append</span><span class=\"o\">(</span><span class=\"s\">\",\"</span><span class=\"o\">);</span>\n                <span class=\"o\">}</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">answer</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">();</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasFourOrNine</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">while</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">4</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">9</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n            <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"mi\">10</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPrime</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">sqrt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">);</span> <span class=\"n\">i</span><span class=\"o\">++)</span> <span class=\"o\">{</span>\n            <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"o\">;</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>上記の例は手続き型プログラミングの色合いが強く、全体的な見た目としては縦長になります。では外部仕様を変更することなく、今日現在のJavaの最新バージョンである11らしく書き換えてみましょう (もっともJava11らしい機能はまったく使っていませんが……)</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main2.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">java.util.stream.Collectors</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.stream.IntStream</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main2</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">int</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"o\">;</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">solve</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">String</span> <span class=\"nf\">solve</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">iterate</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">Main2:</span><span class=\"o\">:</span><span class=\"n\">isPrime</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">Main2:</span><span class=\"o\">:</span><span class=\"n\">hasFourOrNine</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">mapToObj</span><span class=\"o\">(</span><span class=\"nl\">String:</span><span class=\"o\">:</span><span class=\"n\">valueOf</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">limit</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">joining</span><span class=\"o\">(</span><span class=\"s\">\",\"</span><span class=\"o\">));</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">hasFourOrNine</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">iterate</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">10</span><span class=\"o\">)</span>\n                        <span class=\"o\">.</span><span class=\"na\">anyMatch</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">4</span> <span class=\"o\">||</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">9</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">boolean</span> <span class=\"nf\">isPrime</span><span class=\"o\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nc\">IntStream</span><span class=\"o\">.</span><span class=\"na\">rangeClosed</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"kt\">int</span><span class=\"o\">)</span><span class=\"nc\">Math</span><span class=\"o\">.</span><span class=\"na\">sqrt</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)).</span><span class=\"na\">allMatch</span><span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">-&gt;</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>Stream APIやラムダ式を多用することで、縦の長さはぐっと縮まり、全体として横長のコードが出来上がりました。関数型プログラミングといえるほどではありませんが、少なくともそのパラダイムの一部が導入されています。</p>\n\n<p>プログラミングをするうえで大事にしたいのが「可読性」--ですが、この程度の長さだと可読性うんぬんという感じではないですね……。ただ個人的に書いていて楽しい・気持ちいいのは後者。メソッドチェーンは癖になる(´・ω・｀)</p>\n\n<p>最後にn=100の場合の問題の解答を以下に示します。ただし問題の指定では「カンマ区切り」でしたが、読みやすさの都合上、以下では「改行区切り」で示します。ご了承ください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>19\n29\n41\n43\n47\n59\n79\n89\n97\n109\n139\n149\n179\n191\n193\n197\n199\n229\n239\n241\n269\n293\n347\n349\n359\n379\n389\n397\n401\n409\n419\n421\n431\n433\n439\n443\n449\n457\n461\n463\n467\n479\n487\n491\n499\n509\n541\n547\n569\n593\n599\n619\n641\n643\n647\n659\n691\n709\n719\n739\n743\n769\n797\n809\n829\n839\n859\n907\n911\n919\n929\n937\n941\n947\n953\n967\n971\n977\n983\n991\n997\n1009\n1019\n1039\n1049\n1069\n1091\n1093\n1097\n1109\n1129\n1193\n1229\n1249\n1259\n1279\n1289\n1291\n1297\n1319\n</pre></div></div>\n","body":"この記事は[「シクシク素数列 Advent Calendar 2018」2日目](https://qiita.com/advent-calendar/2018/4949prime-series)になります。\n\n詳細はアドベントカレンダーの該当ページを見ていただくとして、ざっくり問題内容をまとめておくと「100以下の正の整数Nがあたえられたとき、N番目までの\"シクシク素数\"を求め、カンマ区切りで出力しなさい」というもの。\"シクシク素数\"とは数値に4または9を素数を指しています。\n\n単純な問題なので、解法はいろいろあると思いますが、とりあえずは以下のような外部仕様を満たすAPIがあれば、これを組み合わせて、問題の答えが出せそうです。\n\n1. `hasFourOrNine`: 自然数xが引数として与えられたとき、xに4または9が含まれている場合はtrue、それ以外はfalseを返す。\n2. `isPrime`: 自然数xが引数として与えられたとき、xが素数ならばtrue、それ以外はfalseを返す。\n3. `solve`: 100以下の自然数nが引数として与えられたとき、n番目までの\"シクシク素数\"をカンマ区切りで連結した文字列を返す。\n\nさて実装に移っていくわけですが、Java6やJava7あたりのやや古いバージョンのJavaであれば、以下のように書いていたはずです(もっとも「やや古い」とはいうものの、Java製のシステムは概して長持ちなので、このぐらいの古さのバージョンであれば、現役で動いているものも多いと思います……)\n\n```java:Main1.java\n\npublic class Main1 {\n    public static void main(String[] args) {\n        int n = 100;\n        System.out.println(solve(n));\n    }\n    \n    public static String solve(int n) {\n        StringBuilder answer = new StringBuilder();\n        for (int x = 1; n > 0; x++) {\n            if (isPrime(x) && hasFourOrNine(x)) {\n                answer.append(x);\n                if (--n > 0) {\n                    answer.append(\",\");\n                }\n            }\n        }\n        return answer.toString();\n    }\n    \n    public static boolean hasFourOrNine(int x) {\n        while (x > 0) {\n            int i = x % 10;\n            if (i == 4 || i == 9) {\n                return true;\n            }\n            x /= 10;\n        }\n        return false;\n    }\n    \n    public static boolean isPrime(int x) {\n        if (x < 2) {\n            return false;\n        }\n        \n        for (int i = 2; i <= Math.sqrt(x); i++) {\n            if (x % i == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n上記の例は手続き型プログラミングの色合いが強く、全体的な見た目としては縦長になります。では外部仕様を変更することなく、今日現在のJavaの最新バージョンである11らしく書き換えてみましょう (もっともJava11らしい機能はまったく使っていませんが……)\n\n```java:Main2.java\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Main2 {\n    public static void main(String[] args) {\n        int n = 100;\n        System.out.println(solve(n));\n    }\n    \n    public static String solve(int n) {\n        return IntStream.iterate(1, x -> x + 1)\n                        .filter(Main2::isPrime)\n                        .filter(Main2::hasFourOrNine)\n                        .mapToObj(String::valueOf)\n                        .limit(n)\n                        .collect(Collectors.joining(\",\"));\n    }\n    \n    public static boolean hasFourOrNine(int x) {\n        return IntStream.iterate(x, i -> i > 0, i -> i / 10)\n                        .map(i -> i % 10)\n                        .anyMatch(i -> i == 4 || i == 9);\n    }\n    \n    public static boolean isPrime(int x) {\n        return x >= 2 && IntStream.rangeClosed(2, (int)Math.sqrt(x)).allMatch(i -> x % i != 0);\n    }\n}\n```\n\nStream APIやラムダ式を多用することで、縦の長さはぐっと縮まり、全体として横長のコードが出来上がりました。関数型プログラミングといえるほどではありませんが、少なくともそのパラダイムの一部が導入されています。\n\nプログラミングをするうえで大事にしたいのが「可読性」--ですが、この程度の長さだと可読性うんぬんという感じではないですね……。ただ個人的に書いていて楽しい・気持ちいいのは後者。メソッドチェーンは癖になる(´・ω・｀)\n\n最後にn=100の場合の問題の解答を以下に示します。ただし問題の指定では「カンマ区切り」でしたが、読みやすさの都合上、以下では「改行区切り」で示します。ご了承ください。\n\n```\n19\n29\n41\n43\n47\n59\n79\n89\n97\n109\n139\n149\n179\n191\n193\n197\n199\n229\n239\n241\n269\n293\n347\n349\n359\n379\n389\n397\n401\n409\n419\n421\n431\n433\n439\n443\n449\n457\n461\n463\n467\n479\n487\n491\n499\n509\n541\n547\n569\n593\n599\n619\n641\n643\n647\n659\n691\n709\n719\n739\n743\n769\n797\n809\n829\n839\n859\n907\n911\n919\n929\n937\n941\n947\n953\n967\n971\n977\n983\n991\n997\n1009\n1019\n1039\n1049\n1069\n1091\n1093\n1097\n1109\n1129\n1193\n1229\n1249\n1259\n1279\n1289\n1291\n1297\n1319\n```\n","coediting":false,"comments_count":0,"created_at":"2018-11-27T21:10:37+09:00","group":null,"id":"39eb449bf5794e43e235","likes_count":3,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"シクシク素数列 Advent Calendar 2018 Java編","updated_at":"2018-12-04T11:47:24+09:00","url":"https://qiita.com/neko_the_shadow/items/39eb449bf5794e43e235","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":34,"github_login_name":null,"id":"neko_the_shadow","items_count":172,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}