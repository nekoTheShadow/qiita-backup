{"rendered_body":"\n<h1>\n<span id=\"実行環境\" class=\"fragment\"></span><a href=\"#%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>実行環境</h1>\n\n<p>本記事を書くにあたって、利用した主なソフトウェアのバージョンは次の通りです。なおOracle Databaseの構築にあたってはDockerおよび<a href=\"https://github.com/oracle/docker-images\" rel=\"nofollow noopener\" target=\"_blank\">Oracle公式のDocker Image</a>を利用しています。</p>\n\n<table>\n<thead>\n<tr>\n<th>software</th>\n<th>version, edition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Oracle Database 11g</td>\n<td>Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production</td>\n</tr>\n<tr>\n<td>Oracle Database 12c</td>\n<td>Oracle Database 12c Standard Edition Release 12.2.0.1.0 - 64bit Production</td>\n</tr>\n<tr>\n<td>ojdbc6.jar (11g JDBC Driver)</td>\n<td>Oracle 11.2.0.2.0 JDBC 4.0 compiled with JDK6 on Sat_Aug_14_12:18:34_PDT_2010</td>\n</tr>\n<tr>\n<td>ojdbc8.jar (12c JDBC Driver)</td>\n<td>Oracle 12.2.0.1.0 JDBC 4.2 compiled with javac 1.8.0_91 on Tue_Dec_13_06:08:31_PST_2016</td>\n</tr>\n<tr>\n<td>javac</td>\n<td>javac 11.0.4</td>\n</tr>\n<tr>\n<td>java</td>\n<td>openjdk version \"11.0.4\" 2019-07-16</td>\n</tr>\n</tbody>\n</table>\n\n<h1>\n<span id=\"事象概要\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>事象概要</h1>\n\n<p>JavaアプリケーションのデータベースをOracle Database 11cからOracle Database 12gにバージョンアップするにあたって、<code>PreparedStatement::executeBatch</code>の戻り値(int型配列)の内容が微妙に異なり、時間を無限に溶かしたので、メモを残しておきます。</p>\n\n<p>以下のソースコードは、バッチ更新を利用してテーブル<code>USERS</code>に3件のデータを挿入するというものです。データベースへの接続情報はすべて実行時引数として受け取ることとします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kn\">import</span> <span class=\"nn\">java.sql.Connection</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.DriverManager</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.PreparedStatement</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.sql.SQLException</span><span class=\"o\">;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">java.util.Arrays</span><span class=\"o\">;</span>\n\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">String</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">0</span><span class=\"o\">];</span>\n        <span class=\"nc\">String</span> <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">];</span>\n        <span class=\"nc\">String</span> <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">[</span><span class=\"mi\">2</span><span class=\"o\">];</span>\n\n        <span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"nc\">Connection</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nc\">DriverManager</span><span class=\"o\">.</span><span class=\"na\">getConnection</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">,</span> <span class=\"n\">user</span><span class=\"o\">,</span> <span class=\"n\">password</span><span class=\"o\">);</span>\n             <span class=\"nc\">PreparedStatement</span> <span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"na\">prepareStatement</span><span class=\"o\">(</span><span class=\"s\">\"INSERT INTO USERS (ID, NAME) VALUES(?, ?)\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">setInt</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">);</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">setString</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s\">\"Alice\"</span><span class=\"o\">);</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">addBatch</span><span class=\"o\">();</span>\n\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">setInt</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">);</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">setString</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s\">\"Bob\"</span><span class=\"o\">);</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">addBatch</span><span class=\"o\">();</span>\n\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">setInt</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">);</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">setString</span><span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"s\">\"Carol\"</span><span class=\"o\">);</span>\n            <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">addBatch</span><span class=\"o\">();</span>\n\n            <span class=\"kt\">int</span><span class=\"o\">[]</span> <span class=\"n\">updateCounts</span> <span class=\"o\">=</span> <span class=\"n\">ps</span><span class=\"o\">.</span><span class=\"na\">executeBatch</span><span class=\"o\">();</span>\n            <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"nc\">Arrays</span><span class=\"o\">.</span><span class=\"na\">toString</span><span class=\"o\">(</span><span class=\"n\">updateCounts</span><span class=\"o\">));</span>\n        <span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">SQLException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n</div>\n\n<p>このコードをコンパイルしたのち、まずは接続先を11gに向けて実行、次に接続先を12cに変えて実行した結果が次の通りです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ java -cp ../lib/ojdbc6.jar:. Main jdbc:oracle:thin:@192.168.99.100:1511:xe user1 password\n[-2, -2, -2]\n$ java -cp ../lib/ojdbc8.jar:. Main jdbc:oracle:thin:@192.168.99.100:1512/ORCLPDB1 user1 password\n[1, 1, 1]\n</code></pre></div></div>\n\n<p><code>PreparedStatement::executeBatch</code>の戻り値である<code>updateCounts</code>の内容が11gと12cで異なることが確認できました。</p>\n\n<p>12cについては、内容は明白で、更新した件数がint型の配列に格納されています。一方、11gの<code>executeBatch</code>は<code>Statement.SUCCESS_NO_INFO</code>を格納した配列を戻り値とします。</p>\n\n<h1>\n<span id=\"結論-ドキュメントはちゃんと読もう\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96-%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AF%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E8%AA%AD%E3%82%82%E3%81%86\"><i class=\"fa fa-link\"></i></a>結論: ドキュメントはちゃんと読もう</h1>\n\n<p>実はこの挙動の違いはOracle Databaseのドキュメントを読むと、ちゃんと書かれています。</p>\n\n<p>まずは<a href=\"http://otndnld.oracle.co.jp/document/products/oracle11g/111/doc_dvd/java.111/E05720-02/oraperf.htm\" rel=\"nofollow noopener\" target=\"_blank\">11gのドキュメント</a>:</p>\n\n<blockquote>\n<p>文バッチが正常に処理された場合、文のexecuteBatchコールから戻される整数配列、つまり、更新件数配列には、常にバッチ操作1つに対して1つの要素が含まれます。標準バッチ更新のOracle実装では、配列要素の値は次のようになります。<br>\nプリコンパイルされたSQL文のバッチの場合、バッチに含まれている個々の文によって影響を受けたデータベースの行数はわかりません。そのため、配列要素の値はすべて-2になります。JDBC 2.0仕様によれば、値-2は、操作は正常終了したが影響を受けた行数は不明であることを示します。</p>\n</blockquote>\n\n<p>一方<a href=\"https://docs.oracle.com/cd/E57425_01/121/JJDBC/oraperf.htm\" rel=\"nofollow noopener\" target=\"_blank\">12cのドキュメント</a>には11gとは挙動が異なることが明記されています、</p>\n\n<blockquote>\n<p>Oracle Database 12cリリース1 (12.1)以降、executeBatchメソッドは改良され、バッチのレコード数と同じサイズのint配列を戻します。戻り配列の各項目は、バッチの対応するレコードの影響を受けたデータベース表の行数です。</p>\n</blockquote>\n\n<p>ちなみに実際に試していませんが、<a href=\"https://docs.oracle.com/cd/F19136_01/jjdbc/performance-extensions.html#GUID-20BF8463-A574-48CB-AD56-18CF8DEF603D\" rel=\"nofollow noopener\" target=\"_blank\">Oracle Database 18cのドキュメント</a><br>\nには、上記の12cのそれとまったく同じ文言が掲載されています。つまり12cと18cでは<code>PreparedStatement::executeBatch</code>の挙動に差はないと思われます。</p>\n","body":"# 実行環境\n\n本記事を書くにあたって、利用した主なソフトウェアのバージョンは次の通りです。なおOracle Databaseの構築にあたってはDockerおよび[Oracle公式のDocker Image](https://github.com/oracle/docker-images)を利用しています。\n\n|software|version, edition|\n|---|---|\n| Oracle Database 11g | Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production |\n| Oracle Database 12c | Oracle Database 12c Standard Edition Release 12.2.0.1.0 - 64bit Production |\n| ojdbc6.jar (11g JDBC Driver) | Oracle 11.2.0.2.0 JDBC 4.0 compiled with JDK6 on Sat_Aug_14_12:18:34_PDT_2010 |\n| ojdbc8.jar (12c JDBC Driver) | Oracle 12.2.0.1.0 JDBC 4.2 compiled with javac 1.8.0_91 on Tue_Dec_13_06:08:31_PST_2016 |\n| javac | javac 11.0.4 |\n| java | openjdk version \"11.0.4\" 2019-07-16 |\n\n# 事象概要\n\nJavaアプリケーションのデータベースをOracle Database 11cからOracle Database 12gにバージョンアップするにあたって、`PreparedStatement::executeBatch`の戻り値(int型配列)の内容が微妙に異なり、時間を無限に溶かしたので、メモを残しておきます。\n\n以下のソースコードは、バッチ更新を利用してテーブル`USERS`に3件のデータを挿入するというものです。データベースへの接続情報はすべて実行時引数として受け取ることとします。\n\n```java:Main.java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        String url = args[0];\n        String user = args[1];\n        String password = args[2];\n\n        try (Connection c = DriverManager.getConnection(url, user, password);\n             PreparedStatement ps = c.prepareStatement(\"INSERT INTO USERS (ID, NAME) VALUES(?, ?)\")) {\n            ps.setInt(1, 1);\n            ps.setString(2, \"Alice\");\n            ps.addBatch();\n\n            ps.setInt(1, 2);\n            ps.setString(2, \"Bob\");\n            ps.addBatch();\n\n            ps.setInt(1, 3);\n            ps.setString(2, \"Carol\");\n            ps.addBatch();\n\n            int[] updateCounts = ps.executeBatch();\n            System.out.println(Arrays.toString(updateCounts));\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n\nこのコードをコンパイルしたのち、まずは接続先を11gに向けて実行、次に接続先を12cに変えて実行した結果が次の通りです。\n\n```\n$ java -cp ../lib/ojdbc6.jar:. Main jdbc:oracle:thin:@192.168.99.100:1511:xe user1 password\n[-2, -2, -2]\n$ java -cp ../lib/ojdbc8.jar:. Main jdbc:oracle:thin:@192.168.99.100:1512/ORCLPDB1 user1 password\n[1, 1, 1]\n```\n\n`PreparedStatement::executeBatch`の戻り値である`updateCounts`の内容が11gと12cで異なることが確認できました。\n\n12cについては、内容は明白で、更新した件数がint型の配列に格納されています。一方、11gの`executeBatch`は`Statement.SUCCESS_NO_INFO`を格納した配列を戻り値とします。\n\n# 結論: ドキュメントはちゃんと読もう\n\n実はこの挙動の違いはOracle Databaseのドキュメントを読むと、ちゃんと書かれています。\n\nまずは[11gのドキュメント](http://otndnld.oracle.co.jp/document/products/oracle11g/111/doc_dvd/java.111/E05720-02/oraperf.htm):\n\n> 文バッチが正常に処理された場合、文のexecuteBatchコールから戻される整数配列、つまり、更新件数配列には、常にバッチ操作1つに対して1つの要素が含まれます。標準バッチ更新のOracle実装では、配列要素の値は次のようになります。\n> プリコンパイルされたSQL文のバッチの場合、バッチに含まれている個々の文によって影響を受けたデータベースの行数はわかりません。そのため、配列要素の値はすべて-2になります。JDBC 2.0仕様によれば、値-2は、操作は正常終了したが影響を受けた行数は不明であることを示します。\n\n一方[12cのドキュメント](https://docs.oracle.com/cd/E57425_01/121/JJDBC/oraperf.htm)には11gとは挙動が異なることが明記されています、\n\n> Oracle Database 12cリリース1 (12.1)以降、executeBatchメソッドは改良され、バッチのレコード数と同じサイズのint配列を戻します。戻り配列の各項目は、バッチの対応するレコードの影響を受けたデータベース表の行数です。\n\nちなみに実際に試していませんが、[Oracle Database 18cのドキュメント](https://docs.oracle.com/cd/F19136_01/jjdbc/performance-extensions.html#GUID-20BF8463-A574-48CB-AD56-18CF8DEF603D)\nには、上記の12cのそれとまったく同じ文言が掲載されています。つまり12cと18cでは`PreparedStatement::executeBatch`の挙動に差はないと思われます。\n","coediting":false,"comments_count":0,"created_at":"2019-12-10T22:10:13+09:00","group":null,"id":"6680ef630c7261b59fb1","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]},{"name":"oracle","versions":[]}],"title":"executeBatchの戻り値の内容が11gと12cで異なる","updated_at":"2019-12-10T22:10:13+09:00","url":"https://qiita.com/neko_the_shadow/items/6680ef630c7261b59fb1","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":197,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}