{"rendered_body":"<p><strong>注意: この記事は2016/09/19現在のものです。またRubyのversionは2.3.0です。</strong></p>\n\n<p><code>String#slice!</code>は文字列を破壊的に変更するメソッドで、<a href=\"https://docs.ruby-lang.org/ja/2.3.0/method/String/i/slice=21.html\" rel=\"nofollow noopener\" target=\"_blank\">Rubyの日本語マニュアルである<br>\n「るりま」</a>には次のように記述されています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>slice!(nth) -&gt; Integer\nslice!(pos, len) -&gt; String\nslice!(substr) -&gt; String\nslice!(regexp, nth = 0) -&gt; String\nslice!(first..last) -&gt; String\nslice!(first...last) -&gt; String\nslice!(regexp, nth = 0) -&gt; String\n</code></pre></div></div>\n\n<p>要するに<code>String#slice</code>の引数にひとつの整数を与えたときは、メソッドの戻り値は整数になると「るりま」には記述されているわけですが……</p>\n\n<div class=\"code-frame\" data-lang=\"irb\"><div class=\"highlight\"><pre><code><span class=\"gp\">irb(main):001:0&gt;</span><span class=\"w\"> </span><span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"s2\">\"ABCDEF\"</span>\n<span class=\"p\">=&gt;</span> <span class=\"s2\">\"ABCDEF\"</span>\n<span class=\"gp\">irb(main):002:0&gt;</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">.</span><span class=\"nf\">slice!</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">=&gt;</span> <span class=\"s2\">\"A\"</span>\n<span class=\"gp\">irb(main):003:0&gt;</span><span class=\"w\"> </span><span class=\"n\">string</span>\n<span class=\"p\">=&gt;</span> <span class=\"s2\">\"BCDEF\"</span>\n</code></pre></div></div>\n\n<p>文字列が戻り値になっているような気がします。確かにオーバーロード(?)されたメソッドで、戻り値が違うというのは少し違和感がありますね。</p>\n\n<p>ちなみに<a href=\"https://docs.ruby-lang.org/en/2.3.0/String.html#method-i-slice-21\" rel=\"nofollow noopener\" target=\"_blank\">英語のRubyドキュメント</a>をみたところ<code>String#slice!(nth)</code>でも文字列が返されるというような記述になっています。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>slice!(fixnum) → new_str or nil \nslice!(fixnum, fixnum) → new_str or nil \nslice!(range) → new_str or nil \nslice!(regexp) → new_str or nil \nslice!(other_str) → new_str or nil \n</code></pre></div></div>\n","body":"\n__注意: この記事は2016/09/19現在のものです。またRubyのversionは2.3.0です。__\n\n`String#slice!`は文字列を破壊的に変更するメソッドで、[Rubyの日本語マニュアルである\n「るりま」](https://docs.ruby-lang.org/ja/2.3.0/method/String/i/slice=21.html)には次のように記述されています。\n\n```\nslice!(nth) -> Integer\nslice!(pos, len) -> String\nslice!(substr) -> String\nslice!(regexp, nth = 0) -> String\nslice!(first..last) -> String\nslice!(first...last) -> String\nslice!(regexp, nth = 0) -> String\n```\n\n要するに`String#slice`の引数にひとつの整数を与えたときは、メソッドの戻り値は整数になると「るりま」には記述されているわけですが……\n\n```irb\nirb(main):001:0> string = \"ABCDEF\"\n=> \"ABCDEF\"\nirb(main):002:0> string.slice!(0)\n=> \"A\"\nirb(main):003:0> string\n=> \"BCDEF\"\n```\n\n文字列が戻り値になっているような気がします。確かにオーバーロード(?)されたメソッドで、戻り値が違うというのは少し違和感がありますね。\n\nちなみに[英語のRubyドキュメント](https://docs.ruby-lang.org/en/2.3.0/String.html#method-i-slice-21)をみたところ`String#slice!(nth)`でも文字列が返されるというような記述になっています。\n\n```\nslice!(fixnum) → new_str or nil \nslice!(fixnum, fixnum) → new_str or nil \nslice!(range) → new_str or nil \nslice!(regexp) → new_str or nil \nslice!(other_str) → new_str or nil \n```\n","coediting":false,"comments_count":1,"created_at":"2016-09-19T11:07:37+09:00","group":null,"id":"0ac786baf985f53faa90","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]}],"title":"String#slice!(nth)はIntegerではなく、Stringを返す。","updated_at":"2016-09-19T11:07:37+09:00","url":"https://qiita.com/neko_the_shadow/items/0ac786baf985f53faa90","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":198,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}