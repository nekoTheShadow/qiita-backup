{"rendered_body":"<p>通算すると10000回ぐらい(おおげさ)調べているので、自分用ですが、まとめておきたいと思います。なお以下の内容はSpring Bootのバージョン<code>2.1.2.RELEASE</code>で実行確認しています。Spring Bootは開発スピードが速いフレームワークとして知られているため、これより古いバージョンや新しいバージョンでは事情が変化している可能性があります。あらかじめご了承ください。</p>\n\n<p>Mavenを使ってライブラリ管理を行う際、<a href=\"https://mvnrepository.com/\" rel=\"nofollow noopener\" target=\"_blank\">Maven Repository</a>を利用することが多いと思いますが、場合によってはMaven Repositoryで管理されていないjarを使用してJavaアプリケーション開発を実施する必要があります。</p>\n\n<p>たとえば「third-party-jar-sample」という名前のSpring-Bootプロジェクト(Java)があって、このプロジェクトにおいてMaven Repositoryにはない「third-party.jar」を利用したいとします。まず第1ステップとして、プロジェクトのディレクトリ以下の任意の場所にthrid-party.jarを設置します。実をいうと「プロジェクトのディレクトリ以下」である必要はなく、ローカル環境であればどこでもよいのですが、以下の例では<code>${projectdir}/lib/thrid-party.jar</code>としています(理由は後述)。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/c37d305d08c632252578916ea605b5e25bc26411/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3130353835392f63623133623865322d636234642d626330392d333638622d3163303161653863333230372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2Fcb13b8e2-cb4d-bc09-368b-1c01ae8c3207.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2a8a895ceab0bc4b4573ac514c817d51\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/105859/cb13b8e2-cb4d-bc09-368b-1c01ae8c3207.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.amazonaws.com%2F0%2F105859%2Fcb13b8e2-cb4d-bc09-368b-1c01ae8c3207.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=58aceb2b1b2a0d117b551985a12d9ed0 1x\" loading=\"lazy\"></a></p>\n\n<p>あとは<code>pom.xml</code>に以下のようなdependencyを追加するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;dependency&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>com.example<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>third-party<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;version&gt;</span>1.0.0<span class=\"nt\">&lt;/version&gt;</span>\n  <span class=\"nt\">&lt;scope&gt;</span>system<span class=\"nt\">&lt;/scope&gt;</span>\n  <span class=\"nt\">&lt;systemPath&gt;</span>${project.basedir}/lib/third-party.jar<span class=\"nt\">&lt;/systemPath&gt;</span>\n<span class=\"nt\">&lt;/dependency&gt;</span>\n</code></pre></div></div>\n\n<p>ポイントとしては2点。ひとつは<code>scope</code>を<code>system</code>とすること。もうひとつは<code>systemPath</code>にローカル環境のjarのありかを指定することです。なお<code>project.basedir</code>はプロジェクトのディレクトリパスを格納している変数で、Mavenがビルド時に自動で解決してくれます。third-party.jarの設置場所をプロジェクトディレクトリ以下にしたのはこの変数<code>project.basedir</code>を使いたかったからですね。</p>\n\n<hr>\n\n<p>Spring-Bootにおいては、Fat-jarやUber-jarと呼ばれる、必要なjarをすべて格納した実行可能jarを作成します。さて<code>scope</code>が<code>system</code>のjarを実行可能jarに含めたい場合は<code>includeSystemScope</code>を<code>true</code>にする必要があります。逆にいうと、何も設定しない場合、<code>scope</code>が<code>system</code>のjarは実行可能jarに格納されません。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\"><div class=\"highlight\"><pre><code><span class=\"nt\">&lt;plugin&gt;</span>\n  <span class=\"nt\">&lt;groupId&gt;</span>org.springframework.boot<span class=\"nt\">&lt;/groupId&gt;</span>\n  <span class=\"nt\">&lt;artifactId&gt;</span>spring-boot-maven-plugin<span class=\"nt\">&lt;/artifactId&gt;</span>\n  <span class=\"nt\">&lt;configuration&gt;</span>\n    <span class=\"nt\">&lt;includeSystemScope&gt;</span>true<span class=\"nt\">&lt;/includeSystemScope&gt;</span>\n  <span class=\"nt\">&lt;/configuration&gt;</span>\n<span class=\"nt\">&lt;/plugin&gt;</span>\n</code></pre></div></div>\n","body":"通算すると10000回ぐらい(おおげさ)調べているので、自分用ですが、まとめておきたいと思います。なお以下の内容はSpring Bootのバージョン`2.1.2.RELEASE`で実行確認しています。Spring Bootは開発スピードが速いフレームワークとして知られているため、これより古いバージョンや新しいバージョンでは事情が変化している可能性があります。あらかじめご了承ください。\n\nMavenを使ってライブラリ管理を行う際、[Maven Repository](https://mvnrepository.com/)を利用することが多いと思いますが、場合によってはMaven Repositoryで管理されていないjarを使用してJavaアプリケーション開発を実施する必要があります。\n\nたとえば「third-party-jar-sample」という名前のSpring-Bootプロジェクト(Java)があって、このプロジェクトにおいてMaven Repositoryにはない「third-party.jar」を利用したいとします。まず第1ステップとして、プロジェクトのディレクトリ以下の任意の場所にthrid-party.jarを設置します。実をいうと「プロジェクトのディレクトリ以下」である必要はなく、ローカル環境であればどこでもよいのですが、以下の例では`${projectdir}/lib/thrid-party.jar`としています(理由は後述)。\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/105859/cb13b8e2-cb4d-bc09-368b-1c01ae8c3207.png)\n\nあとは`pom.xml`に以下のようなdependencyを追加するだけです。\n\n```xml\n<dependency>\n  <groupId>com.example</groupId>\n  <artifactId>third-party</artifactId>\n  <version>1.0.0</version>\n  <scope>system</scope>\n  <systemPath>${project.basedir}/lib/third-party.jar</systemPath>\n</dependency>\n```\n\nポイントとしては2点。ひとつは`scope`を`system`とすること。もうひとつは`systemPath`にローカル環境のjarのありかを指定することです。なお`project.basedir`はプロジェクトのディレクトリパスを格納している変数で、Mavenがビルド時に自動で解決してくれます。third-party.jarの設置場所をプロジェクトディレクトリ以下にしたのはこの変数`project.basedir`を使いたかったからですね。\n\n***\n\nSpring-Bootにおいては、Fat-jarやUber-jarと呼ばれる、必要なjarをすべて格納した実行可能jarを作成します。さて`scope`が`system`のjarを実行可能jarに含めたい場合は`includeSystemScope`を`true`にする必要があります。逆にいうと、何も設定しない場合、`scope`が`system`のjarは実行可能jarに格納されません。\n\n```xml\n<plugin>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-maven-plugin</artifactId>\n  <configuration>\n    <includeSystemScope>true</includeSystemScope>\n  </configuration>\n</plugin>\n```\n","coediting":false,"comments_count":0,"created_at":"2019-02-04T22:35:21+09:00","group":null,"id":"2d5b82c04dc109ebc0ee","likes_count":2,"private":false,"reactions_count":0,"stocks_count":8,"tags":[{"name":"Maven","versions":[]},{"name":"SpringBoot","versions":[]}],"title":"Maven Repositoryで管理されていないjarをプロジェクトで管理して、ビルド時に実行可能jarに格納する。","updated_at":"2019-02-04T22:35:21+09:00","url":"https://qiita.com/neko_the_shadow/items/2d5b82c04dc109ebc0ee","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":38,"github_login_name":"nekoTheShadow","id":"neko_the_shadow","items_count":224,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":14088,"team_membership":null,"organization_url_name":null,"slide":false}