{"rendered_body":"\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<p>いきなり個人的な事情で申し訳ないのですが、一連のファイルやディレクトリに対して、globを使ってフィルタリングしたいという場合、<code>Files::newDirectoryStream(Path, String)</code>を利用してきました。というより、その方法しか知りませんでした。</p>\n\n<p>このAPIでは第2引数にglobを指定します。以下がその例になります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kt\">var</span> <span class=\"n\">dir</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">);</span>\n<span class=\"k\">try</span> <span class=\"o\">(</span><span class=\"kt\">var</span> <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">newDirectoryStream</span><span class=\"o\">(</span><span class=\"n\">dir</span><span class=\"o\">,</span> <span class=\"s\">\"**.py\"</span><span class=\"o\">))</span> <span class=\"o\">{</span>\n    <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"kt\">var</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">paths</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span> <span class=\"k\">catch</span> <span class=\"o\">(</span><span class=\"nc\">IOException</span> <span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">printStackTrace</span><span class=\"o\">();</span>\n<span class=\"o\">}</span>\n</pre></div></div>\n\n<p>正直なところ<code>DirectoryStream</code>は使いにくいAPIで、とくに「<code>java.util.Stream</code>につなげづらい」というのが、個人的にはもっともつらい。<strong>要するに「globによるフィルタリングをStream処理に組み込みたい」わけです。</strong>そこで、いろいろと調べてまわったところ、<code>java.nio.file.PathMatcher</code>を利用すればよいということが判明。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kt\">var</span> <span class=\"n\">dir</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">);</span>\n<span class=\"kt\">var</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"nc\">FileSystems</span><span class=\"o\">.</span><span class=\"na\">getDefault</span><span class=\"o\">().</span><span class=\"na\">getPathMatcher</span><span class=\"o\">(</span><span class=\"s\">\"**.py\"</span><span class=\"o\">);</span>\n<span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">walk</span><span class=\"o\">(</span><span class=\"n\">dir</span><span class=\"o\">).</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">matcher:</span><span class=\"o\">:</span><span class=\"n\">matches</span><span class=\"o\">).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">-&gt;</span> <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">));</span>\n</pre></div></div>\n\n<p>さっそくこれを実行したところ、以下のように<code>IllegalArgumentException</code>が発生し、想定通りに動作しませんでした。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>\nException in thread \"main\" java.lang.IllegalArgumentException\n    at java.base/sun.nio.fs.WindowsFileSystem.getPathMatcher(WindowsFileSystem.java:262)\n    at Main.main(Main.java:19)\n</pre></div></div>\n\n<h1>\n<span id=\"原因と対処\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0%E3%81%A8%E5%AF%BE%E5%87%A6\"><i class=\"fa fa-link\"></i></a>原因と対処</h1>\n\n<p>今回は「JavaDocをちゃんと読みましょう」案件でした…。<a href=\"https://docs.oracle.com/javase/jp/7/api/java/nio/file/FileSystem.html\" rel=\"nofollow noopener\" target=\"_blank\"><code>FileSystem::getPathMatcher(String)</code>のJavaDoc</a>には次の通り記述されています。</p>\n\n<blockquote>\n<p>syntaxAndPattern パラメータは、構文とパターンを識別し、次の形式をとります。</p>\n\n<blockquote>\n<p><em>syntax:pattern</em></p>\n</blockquote>\n\n<p>ここでの ':' はそれ自体を表します。<br>\nFileSystem 実装では、「glob」および「regex」構文をサポートしますが、その他をサポートすることもできます。構文コンポーネントの値は大文字小文字に関係なく比較されます。</p>\n</blockquote>\n\n<p>今回のようにglobパターンを利用したい場合は<code>glob:**.py</code>というような書き方をする必要があるということです。それを使って上記の例を書き換えたものが以下になり、これを実行すると<code>IllegalArgumentException</code>が発生しなくなりました。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kt\">var</span> <span class=\"n\">dir</span> <span class=\"o\">=</span> <span class=\"nc\">Paths</span><span class=\"o\">.</span><span class=\"na\">get</span><span class=\"o\">(</span><span class=\"s\">\".\"</span><span class=\"o\">);</span>\n<span class=\"kt\">var</span> <span class=\"n\">matcher</span> <span class=\"o\">=</span> <span class=\"nc\">FileSystems</span><span class=\"o\">.</span><span class=\"na\">getDefault</span><span class=\"o\">().</span><span class=\"na\">getPathMatcher</span><span class=\"o\">(</span><span class=\"s\">\"glob:**.py\"</span><span class=\"o\">);</span>\n<span class=\"nc\">Files</span><span class=\"o\">.</span><span class=\"na\">walk</span><span class=\"o\">(</span><span class=\"n\">dir</span><span class=\"o\">).</span><span class=\"na\">filter</span><span class=\"o\">(</span><span class=\"nl\">matcher:</span><span class=\"o\">:</span><span class=\"n\">matches</span><span class=\"o\">).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">path</span> <span class=\"o\">-&gt;</span> <span class=\"n\">doSomething</span><span class=\"o\">(</span><span class=\"n\">path</span><span class=\"o\">));</span>\n</pre></div></div>\n","body":"# 事象\n\nいきなり個人的な事情で申し訳ないのですが、一連のファイルやディレクトリに対して、globを使ってフィルタリングしたいという場合、`Files::newDirectoryStream(Path, String)`を利用してきました。というより、その方法しか知りませんでした。\n\nこのAPIでは第2引数にglobを指定します。以下がその例になります。\n\n```java\nvar dir = Paths.get(\".\");\ntry (var paths = Files.newDirectoryStream(dir, \"**.py\")) {\n    for (var path : paths) {\n        doSomething(path);\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n正直なところ`DirectoryStream`は使いにくいAPIで、とくに「`java.util.Stream`につなげづらい」というのが、個人的にはもっともつらい。__要するに「globによるフィルタリングをStream処理に組み込みたい」わけです。__そこで、いろいろと調べてまわったところ、`java.nio.file.PathMatcher`を利用すればよいということが判明。\n\n```java\nvar dir = Paths.get(\".\");\nvar matcher = FileSystems.getDefault().getPathMatcher(\"**.py\");\nFiles.walk(dir).filter(matcher::matches).forEach(path -> doSomething(path));\n```\n\nさっそくこれを実行したところ、以下のように`IllegalArgumentException`が発生し、想定通りに動作しませんでした。\n\n```text\n\nException in thread \"main\" java.lang.IllegalArgumentException\n    at java.base/sun.nio.fs.WindowsFileSystem.getPathMatcher(WindowsFileSystem.java:262)\n    at Main.main(Main.java:19)\n```\n\n# 原因と対処\n\n今回は「JavaDocをちゃんと読みましょう」案件でした…。[`FileSystem::getPathMatcher(String)`のJavaDoc](https://docs.oracle.com/javase/jp/7/api/java/nio/file/FileSystem.html)には次の通り記述されています。\n\n> syntaxAndPattern パラメータは、構文とパターンを識別し、次の形式をとります。\n>> *syntax:pattern*\n\n> ここでの ':' はそれ自体を表します。\n> FileSystem 実装では、「glob」および「regex」構文をサポートしますが、その他をサポートすることもできます。構文コンポーネントの値は大文字小文字に関係なく比較されます。\n\n今回のようにglobパターンを利用したい場合は`glob:**.py`というような書き方をする必要があるということです。それを使って上記の例を書き換えたものが以下になり、これを実行すると`IllegalArgumentException`が発生しなくなりました。\n\n```java\nvar dir = Paths.get(\".\");\nvar matcher = FileSystems.getDefault().getPathMatcher(\"glob:**.py\");\nFiles.walk(dir).filter(matcher::matches).forEach(path -> doSomething(path));\n```\n","coediting":false,"comments_count":0,"created_at":"2019-09-15T01:23:42+09:00","group":null,"id":"bf53b5432363838e7c26","likes_count":2,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"PathMatcher::matchesでIllegalArgumentExceptionが発生する","updated_at":"2019-09-30T00:12:04+09:00","url":"https://qiita.com/neko_the_shadow/items/bf53b5432363838e7c26","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":166,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}