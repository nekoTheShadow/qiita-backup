{"rendered_body":"<p>最近はC#に凝っています。LINQと<code>var</code>が最高すぎて、Javaにはもどれない(´・ω・｀)</p>\n\n<p><strong>リストや配列を生成する際、すべての要素を特定の値で初期化したい</strong>という場合、プログラミング言語の種類によっては専用のコンストラクタが用意されているものもありますが、C#では<code>Enumerable#Repaeat</code>を利用する方法がよさそうです。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">list</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Repeat</span><span class=\"p\">(</span><span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"m\">20</span><span class=\"p\">).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n\n        <span class=\"kt\">var</span> <span class=\"n\">str</span> <span class=\"p\">=</span> <span class=\"s\">\"[\"</span> <span class=\"p\">+</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">list</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">;</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"c1\">// =&gt; [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>注意すべきは<strong>第1引数の値が要素ごとに複製されない</strong>ということです。<code>int</code>や<code>string</code>のようなimmutableなクラスでは問題ありませんが、この方法によりmutableなオブジェクトで配列やリストを初期化したいという場合には気を付ける必要があります。以下のサンプルコードでは、mutableなクラスのうち、もっとも代表的なもののひとつ<code>System.Collections.Generic.List</code>を例として、この方法が想定通り動作しないことを示しています。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">matrix</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Repeat</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span> <span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"s\">\"a\"</span> <span class=\"p\">},</span> <span class=\"m\">2</span><span class=\"p\">).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">][</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"s\">\"b\"</span><span class=\"p\">;</span>\n\n        <span class=\"kt\">var</span> <span class=\"n\">str</span> <span class=\"p\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"nf\">Aggregate</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">sum</span> <span class=\"p\">+</span> <span class=\"s\">\"[\"</span> <span class=\"p\">+</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">);</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"c1\">// 想定していた値: [b,a][a,a]</span>\n        <span class=\"c1\">// 実際の値: [b,a][b,a]</span>\n        <span class=\"c1\">// ===&gt; new List&lt;string&gt;() { \"a\", \"a\" }が複製されていないことが確認できます。</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>ちなみにこのサンプルコードを想定通りに機能させる場合は、以下のような初期化方法、つまり<code>Repeat</code>ではなく<code>Range</code>と<code>Select</code>を組み合わせる方法を採用すべきです。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">matrix</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">((</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span> <span class=\"s\">\"a\"</span><span class=\"p\">,</span> <span class=\"s\">\"a\"</span> <span class=\"p\">}).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"m\">0</span><span class=\"p\">][</span><span class=\"m\">0</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"s\">\"b\"</span><span class=\"p\">;</span>\n\n\n        <span class=\"kt\">var</span> <span class=\"n\">str</span> <span class=\"p\">=</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"nf\">Aggregate</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"n\">sum</span> <span class=\"p\">+</span> <span class=\"s\">\"[\"</span> <span class=\"p\">+</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">);</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">);</span>\n        <span class=\"c1\">// 想定していた値 =&gt; [b,a][a,a]</span>\n        <span class=\"c1\">// 実際の値       =&gt; [b,a][a,a]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n","body":"\n最近はC#に凝っています。LINQと`var`が最高すぎて、Javaにはもどれない(´・ω・｀)\n\n__リストや配列を生成する際、すべての要素を特定の値で初期化したい__という場合、プログラミング言語の種類によっては専用のコンストラクタが用意されているものもありますが、C#では`Enumerable#Repaeat`を利用する方法がよさそうです。\n\n```csharp\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var list = Enumerable.Repeat(\"a\", 20).ToList();\n\n        var str = \"[\" + string.Join(\",\", list) + \"]\";\n        Console.WriteLine(str);\n        // => [a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a,a]\n    }\n}\n```\n\n注意すべきは__第1引数の値が要素ごとに複製されない__ということです。`int`や`string`のようなimmutableなクラスでは問題ありませんが、この方法によりmutableなオブジェクトで配列やリストを初期化したいという場合には気を付ける必要があります。以下のサンプルコードでは、mutableなクラスのうち、もっとも代表的なもののひとつ`System.Collections.Generic.List`を例として、この方法が想定通り動作しないことを示しています。\n\n```csharp\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var matrix = Enumerable.Repeat(new List<string>() { \"a\", \"a\" }, 2).ToList();\n        matrix[0][0] = \"b\";\n\n        var str = matrix.Aggregate(\"\", (sum, row) => sum + \"[\" + string.Join(\",\", row) + \"]\");\n        Console.WriteLine(str);\n        // 想定していた値: [b,a][a,a]\n        // 実際の値: [b,a][b,a]\n        // ===> new List<string>() { \"a\", \"a\" }が複製されていないことが確認できます。\n    }\n}\n```\n\nちなみにこのサンプルコードを想定通りに機能させる場合は、以下のような初期化方法、つまり`Repeat`ではなく`Range`と`Select`を組み合わせる方法を採用すべきです。\n\n```csharp\nusing System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var matrix = Enumerable.Range(0, 2).Select((x) => new List<string>() { \"a\", \"a\" }).ToList();\n        matrix[0][0] = \"b\";\n\n\n        var str = matrix.Aggregate(\"\", (sum, row) => sum + \"[\" + string.Join(\",\", row) + \"]\");\n        Console.WriteLine(str);\n        // 想定していた値 => [b,a][a,a]\n        // 実際の値       => [b,a][a,a]\n    }\n}\n```\n","coediting":false,"comments_count":1,"created_at":"2017-10-28T22:09:57+09:00","group":null,"id":"ea0fbad2617b7e263a44","likes_count":10,"private":false,"reactions_count":0,"stocks_count":9,"tags":[{"name":"C#","versions":[]}],"title":"リストや配列を生成する際、すべての要素を特定の値で初期化したい","updated_at":"2017-10-28T22:09:57+09:00","url":"https://qiita.com/neko_the_shadow/items/ea0fbad2617b7e263a44","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":37,"github_login_name":"nekoTheShadow","id":"neko_the_shadow","items_count":218,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":27838,"team_membership":null,"organization_url_name":null,"slide":false}