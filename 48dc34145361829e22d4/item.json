{"rendered_body":"<p><a href=\"https://codeiq.jp/q/2821\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「『プライム・ホッパー』問題」</a>の掲載期間が終わったということで、自分の提出コードを公開します(´・ω・`)</p>\n\n<div class=\"code-frame\" data-lang=\"rb\"><div class=\"highlight\"><pre><span class=\"nb\">require</span> <span class=\"s2\">\"prime\"</span>\n\n<span class=\"c1\"># 問題のF(p, q) </span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"nb\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n    <span class=\"n\">ht</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"nb\">p</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">0</span><span class=\"p\">}</span> <span class=\"c1\"># pから始めてval回目にkeyへ到達した =&gt; ht[key] = val</span>\n    <span class=\"n\">que</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">p</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># キューが空になるか、目的のqに達するまで幅優先探索を続ける</span>\n    <span class=\"k\">until</span> <span class=\"n\">que</span><span class=\"p\">.</span><span class=\"nf\">empty?</span> <span class=\"o\">||</span> <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">que</span><span class=\"p\">.</span><span class=\"nf\">shift</span>\n\n        <span class=\"n\">g</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"nf\">each</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">y</span><span class=\"o\">|</span>\n            <span class=\"k\">next</span> <span class=\"k\">if</span> <span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"n\">q</span> <span class=\"o\">||</span> <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"c1\"># 新しく作られた素数がqより大きい or すでに訪問済み</span>\n\n            <span class=\"n\">que</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">y</span>\n            <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"k\">end</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span> <span class=\"p\">?</span> <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">q</span><span class=\"p\">]</span> <span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># 素数xが与えられたとき、変換1と変換2を実行して、作られる素数の一覧を返す</span>\n<span class=\"k\">def</span> <span class=\"nf\">g</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"n\">arr</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"no\">Math</span><span class=\"p\">.</span><span class=\"nf\">log10</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"nf\">to_i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"c1\"># 桁数</span>\n\n    <span class=\"c1\"># 変換1: 右端もしくは左端に数字を連結する</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..</span><span class=\"mi\">9</span><span class=\"p\">).</span><span class=\"nf\">each</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">i</span><span class=\"o\">|</span> <span class=\"n\">arr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">+</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"n\">k</span> <span class=\"o\">+</span> <span class=\"n\">x</span><span class=\"p\">}</span>\n\n    <span class=\"c1\"># 変換2: 右端もしくは左端の数字を取り除く</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span>\n        <span class=\"n\">arr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">10</span> \n\n        <span class=\"c1\"># 上2桁目が0でない場合は左端の数字を取り除くことができる</span>\n        <span class=\"n\">arr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">/</span> <span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">10</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">end</span>\n\n    <span class=\"n\">arr</span><span class=\"p\">.</span><span class=\"nf\">select</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:prime?</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># == main ==</span>\n\n<span class=\"nb\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"no\">STDIN</span><span class=\"p\">.</span><span class=\"nf\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"se\">\\s</span><span class=\"s2\">\"</span><span class=\"p\">).</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:to_i</span><span class=\"p\">)</span>\n<span class=\"nb\">puts</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"nb\">p</span><span class=\"p\">,</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n\n<span class=\"cp\">__END__\n\n基本方針は「幅優先探索」\nある素数から規則通りに素数を作ることを繰り返し、それを目的の素数にたどり着くまで続ける\nただし1度訪れた素数は訪問しないようにする\n</span></pre></div></div>\n\n<p>基本的には何の工夫もない解答です……。与えられた規則に基づいて素数を生成し、幅優先探索で目的の素数をひたすら探すだけ。素数判定も標準添付ライブラリを使って、楽をしています。</p>\n\n<p>かなりナイーブな実装でしたが、TLEを起こすこともなく、無事すべてのテストケースが通りましたので、これで良しとしましょう。終わり良ければ総て良し(｀・ω・´)ｼｬｷｰﾝ</p>\n","body":"[CodeIQ「『プライム・ホッパー』問題」](https://codeiq.jp/q/2821)の掲載期間が終わったということで、自分の提出コードを公開します(´・ω・`)\n\n```rb\nrequire \"prime\"\n\n# 問題のF(p, q) \ndef f(p, q)\n    ht = {p => 0} # pから始めてval回目にkeyへ到達した => ht[key] = val\n    que = [p]\n\n    # キューが空になるか、目的のqに達するまで幅優先探索を続ける\n    until que.empty? || ht[q]\n        x = que.shift\n\n        g(x).each do |y|\n            next if y > q || ht[y] # 新しく作られた素数がqより大きい or すでに訪問済み\n\n            que << y\n            ht[y] = ht[x] + 1\n        end\n    end\n    \n    ht[q] ? ht[q] : -1\nend\n\n# 素数xが与えられたとき、変換1と変換2を実行して、作られる素数の一覧を返す\ndef g(x)\n    arr = []\n    k = Math.log10(x).to_i + 1 # 桁数\n   \n    # 変換1: 右端もしくは左端に数字を連結する\n    (1..9).each{|i| arr << x * 10 + i << i * 10 ** k + x}\n\n    # 変換2: 右端もしくは左端の数字を取り除く\n    if x > 10\n        arr << x / 10 \n        \n        # 上2桁目が0でない場合は左端の数字を取り除くことができる\n        arr << x % 10 ** (k - 1) if x / 10 ** (k - 2) % 10 != 0\n    end\n    \n    arr.select(&:prime?)\nend\n\n# == main ==\n\np, q = STDIN.gets.split(\"\\s\").map(&:to_i)\nputs f(p, q)\n\n__END__\n\n基本方針は「幅優先探索」\nある素数から規則通りに素数を作ることを繰り返し、それを目的の素数にたどり着くまで続ける\nただし1度訪れた素数は訪問しないようにする\n```\n\n基本的には何の工夫もない解答です……。与えられた規則に基づいて素数を生成し、幅優先探索で目的の素数をひたすら探すだけ。素数判定も標準添付ライブラリを使って、楽をしています。\n\nかなりナイーブな実装でしたが、TLEを起こすこともなく、無事すべてのテストケースが通りましたので、これで良しとしましょう。終わり良ければ総て良し(｀・ω・´)ｼｬｷｰﾝ\n\n","coediting":false,"comments_count":0,"created_at":"2016-08-06T00:28:04+09:00","group":null,"id":"48dc34145361829e22d4","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"codeiq","versions":[]}],"title":"CodeIQ「『プライム・ホッパー』問題」に挑戦しました。","updated_at":"2016-08-06T00:28:04+09:00","url":"https://qiita.com/neko_the_shadow/items/48dc34145361829e22d4","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":165,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}