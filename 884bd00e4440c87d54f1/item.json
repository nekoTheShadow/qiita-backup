{"rendered_body":"<p>Db2には外部ファイルを読み込んでバルクインサートする機能としてimportが用意されています。importはいくつかのファイル形式に対応しているのですが、もっともよく利用される形式のひとつであるCSVについて、改行を含むcsvをimportするにはどのようにすべきでしょうか?</p>\n\n<p>まずCSVそのものは以下のルールにのっとるものとします。</p>\n\n<ul>\n<li>行の区切りはOS依存の改行文字。つまりWindows系ならCRLF(<code>\\r\\n</code>)、UNIX系ならLF(<code>\\n</code>)。</li>\n<li>フィールドの区切り文字はカンマ(<code>,</code>)。</li>\n<li>フィールドにカンマ(<code>,</code>)、ダブルクオーテーション(<code>\"</code>)、改行文字を含む場合は必ずそのフィールドをダブルクオーテーションで囲む。\n\n<ul>\n<li>このとき<code>,</code>は<code>\",\"</code>、<code>\"</code>は<code>\"\"</code>としてそれぞれエスケープする。</li>\n</ul>\n</li>\n</ul>\n\n<p>基本的にはRFC4180に準拠していますが、違いは2点ほどあります。</p>\n\n<ul>\n<li>RFC4180では行の区切り文字をCRLFに限定するが、今回はOS依存。つまりUNIX系の場合はLFを改行文字とする。</li>\n<li>RFC4180では「カンマ、ダブルクオーテーション、改行文字を含まないフィールドはダブルクオーテーションで囲っても囲わなくてもよい」とするが、今回はそのようなフィールドについてはダブルクオーテーションで囲まない。\n\n<ul>\n<li>「<code>modified by chardel\"</code>」とした場合、つまりimportのデフォルトの場合、Db2はダブルクオーテーションで囲まれたフィールドを文字列として認識するため、そのようなフィールドを数値型のカラムにimportしようとすると、失敗する場合があります。</li>\n<li>要はいろいろ考えるのが面倒なだけです(´・ω・｀)</li>\n</ul>\n</li>\n</ul>\n\n<p>このような規則にのっとり、かつフィールドに改行文字を含むCSVファイルは、たとえば以下のようにしてimportします。</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"n\">import</span> <span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"o\">/</span><span class=\"n\">sample</span><span class=\"p\">.</span><span class=\"n\">csv</span> <span class=\"k\">of</span> <span class=\"n\">del</span> \n<span class=\"n\">modified</span> <span class=\"k\">by</span> <span class=\"n\">delprioritychar</span> \n<span class=\"n\">insert_update</span> <span class=\"k\">into</span> <span class=\"n\">sample_table</span>\n</code></pre></div></div>\n\n<p>重要なのは<code>delprioritychar</code>オプションです。このオプションをしていしない場合、区切り文字の優先順位は以下の通りになります。</p>\n\n<p>1.行の区切り文字 = 改行文字<br>\n2.文字列の区切り文字 = <code>\"</code><br>\n3.フィールドの区切り文字 = <code>,</code></p>\n\n<p>つまり改行文字を見つけた場合、それがフィールドの一部である可能性を考えず、問答無用で行の区切り文字であると認識します。一方<code>delprioritychar</code>オプションを指定すると、この優先度が次のように変化します。</p>\n\n<p>1.文字列の区切り文字 = <code>\"</code><br>\n2.行の区切り文字 = 改行文字<br>\n3.フィールドの区切り文字 = <code>,</code></p>\n\n<p>1と2が入れ替わるわけですが、これによりcsvパーサが改行文字を見つけた場合、それがフィールドの一部なのか、行の区切り文字なのかをまず考えてから処理を進めてくれます(´・ω・｀)</p>\n\n<p>参考:</p>\n\n<ul>\n<li><a href=\"http://www.kasai.fm/wiki/rfc4180jp\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://www.kasai.fm/wiki/rfc4180jp</a></li>\n<li><a href=\"https://www.ibm.com/support/knowledgecenter/ja/SSEPGG_10.5.0/com.ibm.db2.luw.admin.cmd.doc/doc/r0008304.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.ibm.com/support/knowledgecenter/ja/SSEPGG_10.5.0/com.ibm.db2.luw.admin.cmd.doc/doc/r0008304.html</a></li>\n</ul>\n","body":"Db2には外部ファイルを読み込んでバルクインサートする機能としてimportが用意されています。importはいくつかのファイル形式に対応しているのですが、もっともよく利用される形式のひとつであるCSVについて、改行を含むcsvをimportするにはどのようにすべきでしょうか?\n\nまずCSVそのものは以下のルールにのっとるものとします。\n\n- 行の区切りはOS依存の改行文字。つまりWindows系ならCRLF(`\\r\\n`)、UNIX系ならLF(`\\n`)。\n- フィールドの区切り文字はカンマ(`,`)。\n- フィールドにカンマ(`,`)、ダブルクオーテーション(`\"`)、改行文字を含む場合は必ずそのフィールドをダブルクオーテーションで囲む。\n    - このとき`,`は`\",\"`、`\"`は`\"\"`としてそれぞれエスケープする。\n\n基本的にはRFC4180に準拠していますが、違いは2点ほどあります。\n\n- RFC4180では行の区切り文字をCRLFに限定するが、今回はOS依存。つまりUNIX系の場合はLFを改行文字とする。\n- RFC4180では「カンマ、ダブルクオーテーション、改行文字を含まないフィールドはダブルクオーテーションで囲っても囲わなくてもよい」とするが、今回はそのようなフィールドについてはダブルクオーテーションで囲まない。\n    - 「`modified by chardel\"`」とした場合、つまりimportのデフォルトの場合、Db2はダブルクオーテーションで囲まれたフィールドを文字列として認識するため、そのようなフィールドを数値型のカラムにimportしようとすると、失敗する場合があります。\n    - 要はいろいろ考えるのが面倒なだけです(´・ω・｀)\n\nこのような規則にのっとり、かつフィールドに改行文字を含むCSVファイルは、たとえば以下のようにしてimportします。\n\n```sql\nimport /hello/world/sample.csv of del \nmodified by delprioritychar \ninsert_update into sample_table\n```\n\n重要なのは`delprioritychar`オプションです。このオプションをしていしない場合、区切り文字の優先順位は以下の通りになります。\n\n1.行の区切り文字 = 改行文字\n2.文字列の区切り文字 = `\"`\n3.フィールドの区切り文字 = `,`\n\nつまり改行文字を見つけた場合、それがフィールドの一部である可能性を考えず、問答無用で行の区切り文字であると認識します。一方`delprioritychar`オプションを指定すると、この優先度が次のように変化します。\n\n1.文字列の区切り文字 = `\"`\n2.行の区切り文字 = 改行文字\n3.フィールドの区切り文字 = `,`\n\n1と2が入れ替わるわけですが、これによりcsvパーサが改行文字を見つけた場合、それがフィールドの一部なのか、行の区切り文字なのかをまず考えてから処理を進めてくれます(´・ω・｀)\n\n参考:\n\n- http://www.kasai.fm/wiki/rfc4180jp\n- https://www.ibm.com/support/knowledgecenter/ja/SSEPGG_10.5.0/com.ibm.db2.luw.admin.cmd.doc/doc/r0008304.html\n","coediting":false,"comments_count":0,"created_at":"2018-03-07T00:24:18+09:00","group":null,"id":"884bd00e4440c87d54f1","likes_count":13,"private":false,"reactions_count":0,"tags":[{"name":"db2","versions":[]}],"title":"改行を含むcsvをimportしたい","updated_at":"2018-03-07T10:43:37+09:00","url":"https://qiita.com/neko_the_shadow/items/884bd00e4440c87d54f1","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":197,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}