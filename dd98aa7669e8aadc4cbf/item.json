{"rendered_body":"<p><a href=\"https://codeiq.jp/q/3097\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「『キャリー・オーバー』問題」</a>の掲載期間が終わったということで、自分の提出コードを公開します。なおほかの方の解答は<a href=\"https://togetter.com/li/1070843\" rel=\"nofollow noopener\" target=\"_blank\">Togetter</a>にまとめられてます。また解説記事もCodeIQMagazineに掲載される――はずなので、その際はリンクを張りたいと思います。おぼえていたら(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"rb\">\n<div class=\"code-lang\"><span class=\"bold\">3097.rb</span></div>\n<div class=\"highlight\"><pre><code><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"no\">STDIN</span><span class=\"p\">.</span><span class=\"nf\">gets</span><span class=\"p\">.</span><span class=\"nf\">split</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:to_i</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ある一桁の足し算に着目したとき、繰り上がりに関する挙動は次の3種類に分類できる。</span>\n<span class=\"c1\"># type-a : 前桁の繰り上がりに関係なく、繰り上がりが発生する。</span>\n<span class=\"c1\"># type-b : 前桁が繰り上がったとき、繰り上がりが発生する。</span>\n<span class=\"c1\"># type-c : 前桁の栗が上がりに関係なく、繰り上がりは発生しない。</span>\n<span class=\"c1\"># まずはある一桁の計算において、上記のa,b,cに該当する組合せの総数をそれぞれ求める。</span>\n<span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"no\">Hash</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"o\">*</span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">9</span><span class=\"p\">].</span><span class=\"nf\">repeated_permutation</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">|</span>\n    <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"ss\">:a</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">&gt;</span> <span class=\"mi\">9</span>\n    <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"ss\">:b</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">9</span>\n    <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"ss\">:c</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"mi\">9</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># a,b,cを並べて、その並べ方において繰り上がりが発生する回数を記録しておく。</span>\n<span class=\"c1\"># a,b,cの並べ方は重複順列を利用すると過不足なく求めることができる。</span>\n<span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"no\">Hash</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"nb\">hash</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">|</span> <span class=\"nb\">hash</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]}</span>\n<span class=\"sx\">%i(a b c)</span><span class=\"p\">.</span><span class=\"nf\">repeated_permutation</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">digit</span><span class=\"o\">|</span>\n    <span class=\"n\">flg</span> <span class=\"o\">=</span> <span class=\"kp\">false</span> <span class=\"c1\"># 前桁が繰り上がったかどうかを示すフラグ。</span>\n    <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"o\">...</span><span class=\"n\">digit</span><span class=\"p\">.</span><span class=\"nf\">size</span><span class=\"p\">).</span><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"o\">|</span>\n        <span class=\"n\">flg</span> <span class=\"o\">=</span> <span class=\"n\">digit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"ss\">:a</span> <span class=\"o\">||</span> <span class=\"p\">(</span><span class=\"n\">flg</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">digit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"ss\">:b</span><span class=\"p\">)</span>\n        <span class=\"n\">flg</span> <span class=\"p\">?</span> <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"n\">sum</span>\n    <span class=\"k\">end</span>\n    <span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">digit</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># 繰り上がりの回数がc回になる、a,b,cの並べ方から求めるF(n, c)を計算する。</span>\n<span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">].</span><span class=\"nf\">reduce</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">sum</span><span class=\"p\">,</span> <span class=\"n\">digit</span><span class=\"o\">|</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"sx\">%i(a b c)</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">{</span><span class=\"o\">|</span><span class=\"n\">t</span><span class=\"o\">|</span> <span class=\"n\">digit</span><span class=\"p\">.</span><span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)}</span>\n    <span class=\"n\">sum</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">types</span><span class=\"p\">[</span><span class=\"ss\">:a</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"ss\">:b</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"ss\">:c</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"nb\">p</span> <span class=\"n\">ans</span>\n\n</code></pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"py\">\n<div class=\"code-lang\"><span class=\"bold\">3097.py</span></div>\n<div class=\"highlight\"><pre><code>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span><span class=\"p\">,</span> <span class=\"n\">collections</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"p\">().</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s\">' '</span><span class=\"p\">))</span>\n\n    <span class=\"n\">types</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">&gt;</span>  <span class=\"mi\">9</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">==</span> <span class=\"mi\">9</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s\">'b'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span>  <span class=\"mi\">9</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s\">'c'</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n    <span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"p\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">digit</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"p\">.</span><span class=\"n\">product</span><span class=\"p\">((</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">flg</span> <span class=\"o\">=</span> <span class=\"bp\">False</span>\n        <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">digit</span><span class=\"p\">)):</span>\n            <span class=\"n\">flg</span> <span class=\"o\">=</span> <span class=\"n\">digit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">'a'</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">flg</span> <span class=\"ow\">and</span> <span class=\"n\">digit</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">'b'</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">flg</span><span class=\"p\">:</span> <span class=\"n\">cnt</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"n\">cnt</span><span class=\"p\">].</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">digit</span><span class=\"p\">)</span>\n\n    <span class=\"n\">answer</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">digit</span> <span class=\"ow\">in</span> <span class=\"n\">digits</span><span class=\"p\">[</span><span class=\"n\">c</span><span class=\"p\">]:</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">digit</span><span class=\"p\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">symbol</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s\">'a'</span><span class=\"p\">,</span> <span class=\"s\">'b'</span><span class=\"p\">,</span> <span class=\"s\">'c'</span><span class=\"p\">))</span>\n        <span class=\"n\">answer</span> <span class=\"o\">+=</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s\">'a'</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s\">'b'</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"n\">b</span> <span class=\"o\">*</span> <span class=\"n\">types</span><span class=\"p\">[</span><span class=\"s\">'c'</span><span class=\"p\">]</span> <span class=\"o\">**</span> <span class=\"n\">c</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">answer</span><span class=\"p\">)</span>\n\n</code></pre></div>\n</div>\n\n<p>提出言語はRubyとPython3――ですが、違う言語なのに見た目がほぼ一緒ですね(´・ω・｀) 同一人物が同一の思想のもとコード書いているので、似通ってくるのは仕方ないといえばその通りかもしれません(言い訳)</p>\n\n<p>詳しい解き方はRubyのソース内コメントを参考にしていただくとして、簡単な感想だけ述べておきます。本問は足し算において繰り上がりの発生回数を求めるというものでした。考えられる整数の組み合わせすべてを求めたあとその総和を求める、つまりは全探索をすると計算量が大きくなりすぎるので、何とか計算量を減らす必要があります。わたしの場合は「繰り上がりのパターン」による場合分けを利用することにより、計算量を減らすことに成功しましたが、漸化式など、より数学的な回答方法もありそうですね。</p>\n","body":"\n[CodeIQ「『キャリー・オーバー』問題」](https://codeiq.jp/q/3097)の掲載期間が終わったということで、自分の提出コードを公開します。なおほかの方の解答は[Togetter](https://togetter.com/li/1070843)にまとめられてます。また解説記事もCodeIQMagazineに掲載される――はずなので、その際はリンクを張りたいと思います。おぼえていたら(´・ω・｀)\n\n```rb:3097.rb\nn, c = STDIN.gets.split.map(&:to_i)\n\n# ある一桁の足し算に着目したとき、繰り上がりに関する挙動は次の3種類に分類できる。\n# type-a : 前桁の繰り上がりに関係なく、繰り上がりが発生する。\n# type-b : 前桁が繰り上がったとき、繰り上がりが発生する。\n# type-c : 前桁の栗が上がりに関係なく、繰り上がりは発生しない。\n# まずはある一桁の計算において、上記のa,b,cに該当する組合せの総数をそれぞれ求める。\ntypes = Hash.new(0)\n[*0..9].repeated_permutation(2) do |x, y|\n    types[:a] += 1 if x + y > 9\n    types[:b] += 1 if x + y == 9\n    types[:c] += 1 if x + y < 9\nend\n\n# a,b,cを並べて、その並べ方において繰り上がりが発生する回数を記録しておく。\n# a,b,cの並べ方は重複順列を利用すると過不足なく求めることができる。\ndigits = Hash.new{|hash, key| hash[key] = []}\n%i(a b c).repeated_permutation(n) do |digit|\n    flg = false # 前桁が繰り上がったかどうかを示すフラグ。\n    cnt = (0...digit.size).reduce(0) do |sum, i|\n        flg = digit[i] == :a || (flg && digit[i] == :b)\n        flg ? sum + 1 : sum\n    end\n    digits[cnt] << digit\nend\n\n# 繰り上がりの回数がc回になる、a,b,cの並べ方から求めるF(n, c)を計算する。\nans = digits[c].reduce(0) do |sum, digit|\n    a, b, c = %i(a b c).map{|t| digit.count(t)}\n    sum + (types[:a] ** a * types[:b] ** b * types[:c] ** c)\nend\n\np ans\n\n```\n\n```py:3097.py\n\nimport itertools, collections\n\nif __name__ == '__main__':\n    n, c = map(int, input().split(' '))\n\n    types = collections.defaultdict(int)\n    for x, y in itertools.product(range(10), repeat=2):\n        if x + y >  9: types['a'] += 1\n        if x + y == 9: types['b'] += 1\n        if x + y <  9: types['c'] += 1\n\n    digits = collections.defaultdict(list)\n    for digit in itertools.product(('a', 'b', 'c'), repeat=n):\n        flg = False\n        cnt = 0\n        for i in range(len(digit)):\n            flg = digit[i] == 'a' or (flg and digit[i] == 'b')\n            if flg: cnt += 1\n\n        digits[cnt].append(digit)\n    \n    answer = 0\n    for digit in digits[c]:\n        a, b, c = (digit.count(symbol) for symbol in ('a', 'b', 'c'))\n        answer += types['a'] ** a * types['b'] ** b * types['c'] ** c\n    \n    print(answer)\n\n```\n\n提出言語はRubyとPython3――ですが、違う言語なのに見た目がほぼ一緒ですね(´・ω・｀) 同一人物が同一の思想のもとコード書いているので、似通ってくるのは仕方ないといえばその通りかもしれません(言い訳)\n\n詳しい解き方はRubyのソース内コメントを参考にしていただくとして、簡単な感想だけ述べておきます。本問は足し算において繰り上がりの発生回数を求めるというものでした。考えられる整数の組み合わせすべてを求めたあとその総和を求める、つまりは全探索をすると計算量が大きくなりすぎるので、何とか計算量を減らす必要があります。わたしの場合は「繰り上がりのパターン」による場合分けを利用することにより、計算量を減らすことに成功しましたが、漸化式など、より数学的な回答方法もありそうですね。\n","coediting":false,"comments_count":0,"created_at":"2017-01-24T23:27:21+09:00","group":null,"id":"dd98aa7669e8aadc4cbf","likes_count":0,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"codeiq","versions":[]},{"name":"Python3","versions":[]}],"title":"CodeIQ「『キャリー・オーバー』問題」に参加しました。","updated_at":"2017-01-24T23:27:21+09:00","url":"https://qiita.com/neko_the_shadow/items/dd98aa7669e8aadc4cbf","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":198,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}