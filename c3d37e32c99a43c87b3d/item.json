{"rendered_body":"<p><a href=\"https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%88%E3%82%A5%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88\" rel=\"nofollow noopener\" target=\"_blank\">ストゥージソート(stooge sort)というソートがあるそうです。</a>このソートアルゴリズムはとても<strong>効率の悪い</strong>ソートアルゴリズムらしく、バブルソートより効率が悪いとか。</p>\n\n<p>この記事ではストゥージソートをPython3で実装してみます。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre>\n<span class=\"c1\"># リストを破壊的にソートする。アルゴリズムは「ストゥージソート」\n</span><span class=\"k\">def</span> <span class=\"nf\">stooge_sort</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n        <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">3</span>\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">)))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n    <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">))</span>\n    <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n    <span class=\"n\">stooge_sort</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># [20, 4, 13, 28, 12, 0, 17, 19, 22, 21, 5, 23, 3, 27, 14, 2, 29, 11, 24, 7, 15, 9, 25, 6, 26, 18, 8, 1, 10, 16]\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n</span>\n</pre></div></div>\n\n<p>確かにちゃんとソートできているようですね。 工夫(?)としては再帰ではなく、繰り返しで実装している点ですが……効率のわるいアルゴリズムに対して、効率よく実装する意味はあるのか(´・ω・`)</p>\n\n<p>次に効率ですが、<a href=\"https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88\" rel=\"nofollow noopener\" target=\"_blank\">効率の悪い「バブルソート」</a>と<a href=\"https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88\" rel=\"nofollow noopener\" target=\"_blank\">効率のいい「クイックソート」</a>をそれぞれ実装し、1000個の要素を持つリストをソートする時間を計測してみたいと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"c1\"># リストを破壊的にソートする。アルゴリズムは「ストゥージソート」\n</span><span class=\"k\">def</span> <span class=\"nf\">stooge_sort</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n        <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">3</span>\n            <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">t</span><span class=\"p\">)))</span>\n\n\n<span class=\"c1\"># リストを破壊的にソートする。アルゴリズムは「バブルソート」\n</span><span class=\"k\">def</span> <span class=\"nf\">bubble_sort</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">):</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">t</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># リストを破壊的にソートする。アルゴリズムは「クイックソート」\n</span><span class=\"k\">def</span> <span class=\"nf\">quick_sort</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">):</span>\n    <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n        <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">left</span> <span class=\"o\">&gt;=</span> <span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n\n        <span class=\"n\">pivot</span> <span class=\"o\">=</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">left</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">right</span> <span class=\"o\">-</span> <span class=\"n\">left</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">right</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">while</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">pivot</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">while</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">pivot</span><span class=\"p\">:</span> <span class=\"n\">j</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n\n            <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">ls</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n            <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\n        <span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend</span><span class=\"p\">(((</span><span class=\"n\">j</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">left</span><span class=\"p\">,</span> <span class=\"n\">i</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">random</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">,</span> <span class=\"n\">time</span>\n\n    <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">))</span>\n    <span class=\"n\">random</span><span class=\"p\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n\n    <span class=\"n\">bubble_ls</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n    <span class=\"n\">bubble_start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">bubble_sort</span><span class=\"p\">(</span><span class=\"n\">bubble_ls</span><span class=\"p\">)</span>\n    <span class=\"n\">bubble_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">bubble_start</span>\n\n    <span class=\"n\">quick_ls</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n    <span class=\"n\">quick_start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">quick_sort</span><span class=\"p\">(</span><span class=\"n\">quick_ls</span><span class=\"p\">)</span>\n    <span class=\"n\">quick_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">quick_start</span>\n\n    <span class=\"n\">stooge_ls</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"p\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span>\n    <span class=\"n\">stooge_start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n    <span class=\"n\">stooge_sort</span><span class=\"p\">(</span><span class=\"n\">stooge_ls</span><span class=\"p\">)</span>\n    <span class=\"n\">stooge_time</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">stooge_start</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"bubble : {}\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">bubble_time</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"quick  : {}\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">quick_time</span><span class=\"p\">))</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"stooge : {}\"</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">stooge_time</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># bubble : 0.0938718318939209\n</span>    <span class=\"c1\"># quick  : 0.0\n</span>    <span class=\"c1\"># stooge : 33.47836709022522\n</span></pre></div></div>\n\n<p>遅い ((((´・ω・`))))</p>\n","body":"[ストゥージソート(stooge sort)というソートがあるそうです。](https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%88%E3%82%A5%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88)このソートアルゴリズムはとても__効率の悪い__ソートアルゴリズムらしく、バブルソートより効率が悪いとか。\n\nこの記事ではストゥージソートをPython3で実装してみます。\n\n```py3\n\n# リストを破壊的にソートする。アルゴリズムは「ストゥージソート」\ndef stooge_sort(ls):\n    stack = [(0, len(ls) - 1)]\n    \n    while stack:\n        i, j = stack.pop()\n        if ls[i] > ls[j]: ls[i], ls[j] = ls[j], ls[i]\n        \n        if j - i + 1 >= 3:\n            t = (j - i + 1) // 3\n            stack.extend(((i, j - t), (i + t, j), (i, j - t)))\n\nif __name__ == '__main__':\n    import random\n\n    ls = list(range(30))\n    random.shuffle(ls)\n\n    print(ls)\n    stooge_sort(ls)\n    print(ls)\n\n# [20, 4, 13, 28, 12, 0, 17, 19, 22, 21, 5, 23, 3, 27, 14, 2, 29, 11, 24, 7, 15, 9, 25, 6, 26, 18, 8, 1, 10, 16]\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n\n```\n\n確かにちゃんとソートできているようですね。 工夫(?)としては再帰ではなく、繰り返しで実装している点ですが……効率のわるいアルゴリズムに対して、効率よく実装する意味はあるのか(´・ω・`)\n\n次に効率ですが、[効率の悪い「バブルソート」](https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%96%E3%83%AB%E3%82%BD%E3%83%BC%E3%83%88)と[効率のいい「クイックソート」](https://ja.wikipedia.org/wiki/%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%82%BD%E3%83%BC%E3%83%88)をそれぞれ実装し、1000個の要素を持つリストをソートする時間を計測してみたいと思います。\n\n```py3\n# リストを破壊的にソートする。アルゴリズムは「ストゥージソート」\ndef stooge_sort(ls):\n    stack = [(0, len(ls) - 1)]\n    \n    while stack:\n        i, j = stack.pop()\n        if ls[i] > ls[j]: ls[i], ls[j] = ls[j], ls[i]\n        \n        if j - i + 1 >= 3:\n            t = (j - i + 1) // 3\n            stack.extend(((i, j - t), (i + t, j), (i, j - t)))\n\n\n# リストを破壊的にソートする。アルゴリズムは「バブルソート」\ndef bubble_sort(ls):\n    t = len(ls)\n\n    for i in range(t - 1):\n        for j in range(i + 1, t):\n            if ls[i] > ls[j]: ls[i], ls[j] = ls[j], ls[i]\n\n\n# リストを破壊的にソートする。アルゴリズムは「クイックソート」\ndef quick_sort(ls):\n    stack = [(0, len(ls) - 1)]\n\n    while stack:\n        left, right = stack.pop()\n        if left >= right: continue\n\n        pivot = ls[left + (right - left) // 2]\n        i, j = left, right\n        while True:\n            while ls[i] < pivot: i += 1\n            while ls[j] > pivot: j -= 1\n\n            if i >= j: break\n            \n            ls[i], ls[j] = ls[j], ls[i]\n            i, j = i + 1, j - 1\n\n        stack.extend(((j + 1, right), (left, i - 1)))\n\nif __name__ == '__main__':\n    import random, copy, time\n\n    ls = list(range(1000))\n    random.shuffle(ls)\n    \n    bubble_ls = copy.deepcopy(ls)\n    bubble_start = time.time()\n    bubble_sort(bubble_ls)\n    bubble_time = time.time() - bubble_start\n\n    quick_ls = copy.deepcopy(ls)\n    quick_start = time.time()\n    quick_sort(quick_ls)\n    quick_time = time.time() - quick_start\n\n    stooge_ls = copy.deepcopy(ls)\n    stooge_start = time.time()\n    stooge_sort(stooge_ls)\n    stooge_time = time.time() - stooge_start\n\n    print(\"bubble : {}\".format(bubble_time))\n    print(\"quick  : {}\".format(quick_time))\n    print(\"stooge : {}\".format(stooge_time))\n\n    # bubble : 0.0938718318939209\n    # quick  : 0.0\n    # stooge : 33.47836709022522\n```\n\n遅い ((((´・ω・`))))\n","coediting":false,"comments_count":0,"created_at":"2016-07-31T21:58:56+09:00","group":null,"id":"c3d37e32c99a43c87b3d","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"Python","versions":[]},{"name":"Python3","versions":[]}],"title":"ストゥージソートをPython3で実装(バブルソート&クイックソート)","updated_at":"2016-07-31T21:58:56+09:00","url":"https://qiita.com/neko_the_shadow/items/c3d37e32c99a43c87b3d","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}