{"rendered_body":"<p>配列やリストの列挙処理において、列挙される値だけではなく、同時にインデックス/添え字を利用したいということが多々あります。いいかえれば「インデックス付きのループを回したい」というとき、C言語スタイルのforループ(<code>for (int i = 0; i &lt; len; i++)</code>)を避けて、これを実現する方法を考えてみます(´・ω・｀)</p>\n\n<p>まずメソッドチェーンの一環としてwith index的なことをしたい場合、<a href=\"https://msdn.microsoft.com/ja-jp/library/bb534869(v=vs.110).aspx\" rel=\"nofollow noopener\" target=\"_blank\"><code>Select</code>のオーバライド</a>を利用します。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">alphabets</span> <span class=\"p\">=</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">;</span>\n<span class=\"kt\">var</span> <span class=\"n\">formats</span> <span class=\"p\">=</span> <span class=\"n\">alphabets</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">((</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Format</span><span class=\"p\">(</span><span class=\"s\">\"{0} =&gt; {1}\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">alphabet</span><span class=\"p\">)).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n<span class=\"k\">foreach</span><span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">format</span> <span class=\"k\">in</span> <span class=\"n\">formats</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">format</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// 0 =&gt; A</span>\n<span class=\"c1\">// 1 =&gt; B</span>\n<span class=\"c1\">// 2 =&gt; C</span>\n</code></pre></div></div>\n\n<p>ではメソッドチェーンではない場合、より具体的には<code>foreach</code>においてインデックス付きのループを回したい場合はどうすればよいでしょうか? まず思い浮かぶのは匿名型を利用する方法です。匿名型の精製コストが気になるのと、やや見た目がもっさり(?)しますが、大半のケースで問題を解決してくれそうです。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">alphabets</span> <span class=\"p\">=</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">;</span>\n<span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">item</span> <span class=\"k\">in</span> <span class=\"n\">alphabets</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">((</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"p\">{</span> <span class=\"n\">Value</span> <span class=\"p\">=</span> <span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">Index</span> <span class=\"p\">=</span> <span class=\"n\">index</span><span class=\"p\">}))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"{0} =&gt; {1}\"</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">Index</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">.</span><span class=\"n\">Value</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>C#7以降は言語機能としてタプルによる多値がサポートされているので、これを利用することもできます。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">alphabets</span> <span class=\"p\">=</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">;</span>\n<span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"p\">(</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">alphabets</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">((</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"{0} =&gt; {1}\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">alphabet</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>C#7以降で、かつ<code>System.ValueTuple</code>が導入されていることが前提にはなりますが、これが一番すっきりしていると個人的には感じます。たとえば以下のような拡張メソッドを定義しておくと、便利かもしれませんね(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><code><span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">class</span> <span class=\"nc\">IEnumerableExtension</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;(</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">)&gt;</span> <span class=\"n\">WithIndex</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"k\">this</span> <span class=\"n\">IEnumerable</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;</span> <span class=\"n\">ts</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">ts</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">((</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">=&gt;</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">));</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 利用例</span>\n    <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">alphabets</span> <span class=\"p\">=</span> <span class=\"s\">\"ABC\"</span><span class=\"p\">;</span>\n        <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"p\">(</span><span class=\"n\">alphabet</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"k\">in</span> <span class=\"n\">alphabets</span><span class=\"p\">.</span><span class=\"nf\">WithIndex</span><span class=\"p\">())</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"s\">\"{0} =&gt; {1}\"</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">alphabet</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n","body":"配列やリストの列挙処理において、列挙される値だけではなく、同時にインデックス/添え字を利用したいということが多々あります。いいかえれば「インデックス付きのループを回したい」というとき、C言語スタイルのforループ(`for (int i = 0; i < len; i++)`)を避けて、これを実現する方法を考えてみます(´・ω・｀)\n\nまずメソッドチェーンの一環としてwith index的なことをしたい場合、[`Select`のオーバライド](https://msdn.microsoft.com/ja-jp/library/bb534869(v=vs.110).aspx)を利用します。\n\n```csharp\nvar alphabets = \"ABC\";\nvar formats = alphabets.Select((alphabet, index) => string.Format(\"{0} => {1}\", index, alphabet)).ToList();\nforeach(var format in formats)\n{\n    Console.WriteLine(format);\n}\n\n// 0 => A\n// 1 => B\n// 2 => C\n```\n\nではメソッドチェーンではない場合、より具体的には`foreach`においてインデックス付きのループを回したい場合はどうすればよいでしょうか? まず思い浮かぶのは匿名型を利用する方法です。匿名型の精製コストが気になるのと、やや見た目がもっさり(?)しますが、大半のケースで問題を解決してくれそうです。\n\n```csharp\nvar alphabets = \"ABC\";\nforeach (var item in alphabets.Select((alphabet, index) => new { Value = alphabet, Index = index}))\n{\n    Console.WriteLine(\"{0} => {1}\", item.Index, item.Value);\n}\n```\n\nC#7以降は言語機能としてタプルによる多値がサポートされているので、これを利用することもできます。\n\n```csharp\nvar alphabets = \"ABC\";\nforeach (var (alphabet, index) in alphabets.Select((alphabet, index) => (alphabet, index)))\n{\n    Console.WriteLine(\"{0} => {1}\", index, alphabet);\n}\n```\n\nC#7以降で、かつ`System.ValueTuple`が導入されていることが前提にはなりますが、これが一番すっきりしていると個人的には感じます。たとえば以下のような拡張メソッドを定義しておくと、便利かもしれませんね(´・ω・｀)\n\n```csharp\npublic static class IEnumerableExtension\n{\n    public static IEnumerable<(T, int)> WithIndex<T>(this IEnumerable<T> ts)\n    {\n        return ts.Select((t, i) => (t, i));\n    }\n    \n    // 利用例\n    public static void Main(string[] args)\n    {\n        var alphabets = \"ABC\";\n        foreach (var (alphabet, index) in alphabets.WithIndex())\n        {\n            Console.WriteLine(\"{0} => {1}\", index, alphabet);\n        }\n    }\n}\n```\n\n\n\n","coediting":false,"comments_count":0,"created_at":"2018-02-10T15:50:33+09:00","group":null,"id":"5cebdeb99e0e029e0905","likes_count":14,"private":false,"reactions_count":0,"tags":[{"name":"C#","versions":[]}],"title":"Selectとforeachでインデックス付きのループを実現したい","updated_at":"2018-02-10T15:50:33+09:00","url":"https://qiita.com/neko_the_shadow/items/5cebdeb99e0e029e0905","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":197,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}