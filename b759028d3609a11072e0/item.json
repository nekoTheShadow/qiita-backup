{"rendered_body":"<p>たとえば、ユーザとそのユーザが支払った金額が以下のような形で与えられるとします。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Payment</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">payments</span> <span class=\"o\">=</span> <span class=\"nc\">List</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"s\">\"A\"</span><span class=\"o\">,</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"s\">\"B\"</span><span class=\"o\">,</span> <span class=\"mi\">20</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"s\">\"B\"</span><span class=\"o\">,</span> <span class=\"mi\">30</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"s\">\"C\"</span><span class=\"o\">,</span> <span class=\"mi\">40</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"s\">\"C\"</span><span class=\"o\">,</span> <span class=\"mi\">50</span><span class=\"o\">),</span>\n            <span class=\"k\">new</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"s\">\"C\"</span><span class=\"o\">,</span> <span class=\"mi\">60</span><span class=\"o\">)</span>\n        <span class=\"o\">);</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">Payment</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">name</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">value</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"o\">;</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getName</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n    <span class=\"kd\">public</span> <span class=\"kt\">int</span> <span class=\"nf\">getValue</span><span class=\"o\">()</span> <span class=\"o\">{</span> <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">;</span> <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>では各々のユーザについて、支払いの個数を支払いの回数や支払った金額の合計、あるいは金額の最大値を求めたい。SQLであれば<code>GROUP BY</code>とウィンドウ関数の組み合わせで簡単に求めることができそうですが、JavaのStreamではどのように書くべきでしょうか?</p>\n\n<div class=\"code-frame\" data-lang=\"sql\"><div class=\"highlight\"><pre><code><span class=\"k\">select</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"k\">count</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span> <span class=\"k\">from</span> <span class=\"n\">payment</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"k\">select</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"k\">sum</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">from</span> <span class=\"n\">payment</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"k\">select</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">from</span> <span class=\"n\">payment</span> <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">name</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>全体的な方針としては<code>Collectors.groupingBy</code>を利用します。まず支払いの回数、つまり<code>group-by-count</code>。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">counts</span> <span class=\"o\">=</span> <span class=\"n\">payments</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">groupingBy</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getName</span><span class=\"o\">,</span> <span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">counting</span><span class=\"o\">()));</span>\n<span class=\"n\">counts</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">().</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"=\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n<span class=\"c1\">// A=1</span>\n<span class=\"c1\">// B=2</span>\n<span class=\"c1\">// C=3</span>\n</code></pre></div></div>\n\n<p><code>Collectors.counting</code>というその名もずばりなメソッドが用意されているので、これを使うのがよさそう。次に支払った金額の合計。要は<code>group-by-sum</code>ですが、これも<code>Collectors.summingInt</code>というわかりやすい名前のメソッドがあるので、これを利用するだけです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">sums</span> <span class=\"o\">=</span> <span class=\"n\">payments</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">groupingBy</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getName</span><span class=\"o\">,</span> <span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">summingInt</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getValue</span><span class=\"o\">)));</span>\n<span class=\"n\">sums</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">().</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"=\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">()).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n<span class=\"c1\">// A=10</span>\n<span class=\"c1\">// B=50</span>\n<span class=\"c1\">// C=150</span>\n</code></pre></div></div>\n\n<p>最後に「支払った金額の最大値」=<code>group-by-max</code>ですが、個人的にはもっとも議論の余地があるように感じます。基本的な方針としては<code>Collectors.maxBy</code>を利用するのが手っ取り早そうです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">payments</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">groupingBy</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getName</span><span class=\"o\">,</span> <span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">maxBy</span><span class=\"o\">(</span><span class=\"nc\">Comparator</span><span class=\"o\">.</span><span class=\"na\">comparingInt</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getValue</span><span class=\"o\">))));</span>\n<span class=\"n\">maxs</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">().</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"=\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">().</span><span class=\"na\">get</span><span class=\"o\">().</span><span class=\"na\">getValue</span><span class=\"o\">()).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n<span class=\"c1\">// A=10</span>\n<span class=\"c1\">// B=30</span>\n<span class=\"c1\">// C=60</span>\n</code></pre></div></div>\n\n<p>このとき変数<code>maxs</code>の型は<code>Map&lt;String, Optional&lt;Payment&gt;&gt;</code>です。<code>Optional</code>は「nullかもしれない」ことを注意喚起するマーカのようなものですが、ここではビジネスロジック上、<code>maxs</code>のvalueがnullになることはありえません。要はここでの<code>Optional</code>はあまり意味がないので、取っ払いたい。言い換えれば<code>maxs</code>の型を<code>Map&lt;String, Payment&gt;</code>にしたいわけですが、このような場合は次のようにするのが手っ取り早そうです。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><code><span class=\"kt\">var</span> <span class=\"n\">maxs</span> <span class=\"o\">=</span> <span class=\"n\">payments</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">collect</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">groupingBy</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getName</span><span class=\"o\">,</span> <span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">collectingAndThen</span><span class=\"o\">(</span><span class=\"nc\">Collectors</span><span class=\"o\">.</span><span class=\"na\">maxBy</span><span class=\"o\">(</span><span class=\"nc\">Comparator</span><span class=\"o\">.</span><span class=\"na\">comparing</span><span class=\"o\">(</span><span class=\"nl\">Payment:</span><span class=\"o\">:</span><span class=\"n\">getValue</span><span class=\"o\">)),</span> <span class=\"nl\">Optional:</span><span class=\"o\">:</span><span class=\"n\">get</span><span class=\"o\">)));</span>\n<span class=\"n\">maxs</span><span class=\"o\">.</span><span class=\"na\">entrySet</span><span class=\"o\">().</span><span class=\"na\">stream</span><span class=\"o\">().</span><span class=\"na\">map</span><span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">-&gt;</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getKey</span><span class=\"o\">()</span> <span class=\"o\">+</span> <span class=\"s\">\"=\"</span> <span class=\"o\">+</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"na\">getValue</span><span class=\"o\">().</span><span class=\"na\">getValue</span><span class=\"o\">()).</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">::</span><span class=\"n\">println</span><span class=\"o\">);</span>\n<span class=\"c1\">// A=10</span>\n<span class=\"c1\">// B=30</span>\n<span class=\"c1\">// C=60</span>\n</code></pre></div></div>\n\n<p>ただここまでくると、黒魔術感がただよいはじめるので、ほどほどにしたい(´・ω・｀)</p>\n","body":"たとえば、ユーザとそのユーザが支払った金額が以下のような形で与えられるとします。\n\n```java\npublic class Payment {\n    \n    public static void main(String[] args) {\n        var payments = List.of(\n            new Payment(\"A\", 10),\n            new Payment(\"B\", 20),\n            new Payment(\"B\", 30),\n            new Payment(\"C\", 40),\n            new Payment(\"C\", 50),\n            new Payment(\"C\", 60)\n        );\n    }\n\n    private String name;\n    private int value;\n    \n    public Payment(String name, int value) {\n        this.name = name;\n        this.value = value;\n    }\n    public String getName() { return name; }\n    public int getValue() { return value; }\n}\n```\n\nでは各々のユーザについて、支払いの個数を支払いの回数や支払った金額の合計、あるいは金額の最大値を求めたい。SQLであれば`GROUP BY`とウィンドウ関数の組み合わせで簡単に求めることができそうですが、JavaのStreamではどのように書くべきでしょうか?\n\n```sql\nselect name, count(*) from payment group by name;\nselect name, sum(value) from payment group by name;\nselect name, max(value) from payment group by name;\n```\n\n全体的な方針としては`Collectors.groupingBy`を利用します。まず支払いの回数、つまり`group-by-count`。\n\n```java\nvar counts = payments.stream().collect(Collectors.groupingBy(Payment::getName, Collectors.counting()));\ncounts.entrySet().stream().map(e -> e.getKey() + \"=\" + e.getValue()).forEach(System.out::println);\n// A=1\n// B=2\n// C=3\n```\n\n`Collectors.counting`というその名もずばりなメソッドが用意されているので、これを使うのがよさそう。次に支払った金額の合計。要は`group-by-sum`ですが、これも`Collectors.summingInt`というわかりやすい名前のメソッドがあるので、これを利用するだけです。\n\n```java\nvar sums = payments.stream().collect(Collectors.groupingBy(Payment::getName, Collectors.summingInt(Payment::getValue)));\nsums.entrySet().stream().map(e -> e.getKey() + \"=\" + e.getValue()).forEach(System.out::println);\n// A=10\n// B=50\n// C=150\n```\n\n最後に「支払った金額の最大値」=`group-by-max`ですが、個人的にはもっとも議論の余地があるように感じます。基本的な方針としては`Collectors.maxBy`を利用するのが手っ取り早そうです。\n\n```java\nvar maxs = payments.stream().collect(Collectors.groupingBy(Payment::getName, Collectors.maxBy(Comparator.comparingInt(Payment::getValue))));\nmaxs.entrySet().stream().map(e -> e.getKey() + \"=\" + e.getValue().get().getValue()).forEach(System.out::println);\n// A=10\n// B=30\n// C=60\n```\n\nこのとき変数`maxs`の型は`Map<String, Optional<Payment>>`です。`Optional`は「nullかもしれない」ことを注意喚起するマーカのようなものですが、ここではビジネスロジック上、`maxs`のvalueがnullになることはありえません。要はここでの`Optional`はあまり意味がないので、取っ払いたい。言い換えれば`maxs`の型を`Map<String, Payment>`にしたいわけですが、このような場合は次のようにするのが手っ取り早そうです。\n\n```java\nvar maxs = payments.stream().collect(Collectors.groupingBy(Payment::getName, Collectors.collectingAndThen(Collectors.maxBy(Comparator.comparing(Payment::getValue)), Optional::get)));\nmaxs.entrySet().stream().map(e -> e.getKey() + \"=\" + e.getValue().getValue()).forEach(System.out::println);\n// A=10\n// B=30\n// C=60\n```\n\nただここまでくると、黒魔術感がただよいはじめるので、ほどほどにしたい(´・ω・｀)\n","coediting":false,"comments_count":0,"created_at":"2018-07-12T21:24:10+09:00","group":null,"id":"b759028d3609a11072e0","likes_count":5,"private":false,"reactions_count":0,"stocks_count":6,"tags":[{"name":"Java","versions":[]}],"title":"StreamでGroup By処理を行いたい(group-by-count, group-by-sum, group-by-max)","updated_at":"2018-07-12T21:24:43+09:00","url":"https://qiita.com/neko_the_shadow/items/b759028d3609a11072e0","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":210,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":18468,"team_membership":null,"organization_url_name":null}