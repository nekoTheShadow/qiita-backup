{"rendered_body":"<p><code>| while read</code>はbashプログラミングにおいてもっとも使われるイディオムのひとつですが、<strong>この<code>while</code>ループを脱出する際は<code>break</code>ではなく<code>exit</code>を使います。</strong>これは<code>while</code>がサブシェルになる影響――すなわち<code>while</code>から脱出するにはサブシェルを抜ける必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nb\">cat</span> <span class=\"k\">${</span><span class=\"nv\">file</span><span class=\"k\">}</span> | <span class=\"k\">while </span><span class=\"nb\">read </span>line<span class=\"p\">;</span> <span class=\"k\">do</span>\n    <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">line</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"END\"</span> <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">exit </span>0\n<span class=\"k\">done</span>\n</code></pre></div></div>\n\n<p>シェルコマンドは終了ステータスを持ち、<code>while</code>は通常<code>0</code>を返しますが、<code>exit</code>を明示した場合にはその<code>exit</code>の引数が終了ステータスになります。以下のサンプルに示すように、この性質は多重ループの脱出などに利用すると便利です。<strong>ただし以下のサンプルでは<code>-e</code>オプション、つまり<code>0</code>以外の終了ステータスを検知するとシェル自体を終了してしまうオプションは利用できなくなります。</strong></p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"nb\">echo</span> <span class=\"k\">${</span><span class=\"nv\">files</span><span class=\"p\">[@]</span><span class=\"k\">}</span> | <span class=\"k\">while </span><span class=\"nb\">read </span>file<span class=\"p\">;</span> <span class=\"k\">do\n    </span><span class=\"nb\">cat</span> <span class=\"k\">${</span><span class=\"nv\">file</span><span class=\"k\">}</span> | <span class=\"k\">while </span><span class=\"nb\">read </span>line<span class=\"p\">;</span> <span class=\"k\">do</span>\n        <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">line</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"END\"</span> <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">exit </span>99\n    <span class=\"k\">done</span>\n\n    <span class=\"o\">[[</span> <span class=\"nv\">$?</span> <span class=\"nt\">-eq</span> 99 <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">exit </span>99\n<span class=\"k\">done</span>\n</code></pre></div></div>\n\n<p><code>while</code>ループ脱出に<code>exit</code>を利用するのは、パイプの流し込み先に<code>while</code>が指定されたときだけです。<strong>つまり単なる<code>while</code>ループの脱出には<code>break</code>を利用します。<code>exit</code>を利用すると、当然ですがシェル自体が終了してしまい、想定通りの動作を示しません。</strong></p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><code><span class=\"k\">while</span> :<span class=\"p\">;</span> <span class=\"k\">do\n    </span>do_something\n    <span class=\"o\">[[</span> <span class=\"nv\">$?</span> - ne 0 <span class=\"o\">]]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">break\n</span><span class=\"k\">done</span>\n</code></pre></div></div>\n","body":"\n`| while read`はbashプログラミングにおいてもっとも使われるイディオムのひとつですが、__この`while`ループを脱出する際は`break`ではなく`exit`を使います。__これは`while`がサブシェルになる影響――すなわち`while`から脱出するにはサブシェルを抜ける必要があります。\n\n```bash\ncat ${file} | while read line; do\n    [[ \"${line}\" = \"END\" ]] && exit 0\ndone\n```\n\nシェルコマンドは終了ステータスを持ち、`while`は通常`0`を返しますが、`exit`を明示した場合にはその`exit`の引数が終了ステータスになります。以下のサンプルに示すように、この性質は多重ループの脱出などに利用すると便利です。__ただし以下のサンプルでは`-e`オプション、つまり`0`以外の終了ステータスを検知するとシェル自体を終了してしまうオプションは利用できなくなります。__\n\n```bash\necho ${files[@]} | while read file; do\n    cat ${file} | while read line; do\n        [[ \"${line}\" = \"END\" ]] && exit 99\n    done\n    \n    [[ $? -eq 99 ]] && exit 99\ndone\n```\n\n`while`ループ脱出に`exit`を利用するのは、パイプの流し込み先に`while`が指定されたときだけです。__つまり単なる`while`ループの脱出には`break`を利用します。`exit`を利用すると、当然ですがシェル自体が終了してしまい、想定通りの動作を示しません。__\n\n```bash\nwhile :; do\n    do_something\n    [[ $? - ne 0 ]] && break\ndone\n```\n","coediting":false,"comments_count":1,"created_at":"2017-05-13T23:22:32+09:00","group":null,"id":"39d35d09dd58c26002bb","likes_count":20,"private":false,"reactions_count":0,"stocks_count":22,"tags":[{"name":"ShellScript","versions":[]},{"name":"Bash","versions":[]}],"title":"| while read のwhileループ脱出にはbreakではなくexitを利用する(+それに関連するTips)","updated_at":"2017-05-14T11:30:21+09:00","url":"https://qiita.com/neko_the_shadow/items/39d35d09dd58c26002bb","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":211,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://github.com/nekoTheShadow"},"page_views_count":44360,"team_membership":null,"organization_url_name":null}