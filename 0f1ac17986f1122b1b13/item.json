{"rendered_body":"<p>需要あるのかしら(´・ω・｀) まずはエラトステネスのふるい。</p>\n\n<div class=\"code-frame\" data-lang=\"awk\"><div class=\"highlight\"><pre><span class=\"kr\">BEGIN</span> <span class=\"p\">{</span>\n  <span class=\"nx\">upper_bound</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">upper_bound</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"nx\">is_prime</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">sqrt</span><span class=\"p\">(</span><span class=\"nx\">upper_bound</span><span class=\"p\">);</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">is_prime</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">j</span> <span class=\"o\">=</span> <span class=\"nx\">i</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">j</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">upper_bound</span><span class=\"p\">;</span> <span class=\"nx\">j</span> <span class=\"o\">+=</span> <span class=\"nx\">i</span><span class=\"p\">)</span> <span class=\"nx\">is_prime</span><span class=\"p\">[</span><span class=\"nx\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">upper_bound</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">is_prime</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">])</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>実装は以上。実行結果は以下の通りになります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">awk</span> <span class=\"nt\">-f</span> eratosthenes.AWK\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n</pre></div></div>\n\n<p>次に試し割りですが、ここでは疑似素数、つまり<strong>「2と3と、3 より大きくて 2 でも 3 でも割り切れない全ての整数」</strong>により次々割っていく方法を採用しています。</p>\n\n<div class=\"code-frame\" data-lang=\"awk\"><div class=\"highlight\"><pre><span class=\"kr\">BEGIN</span> <span class=\"p\">{</span>\n  <span class=\"nx\">upper_bound</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"nx\">i</span> <span class=\"o\">&lt;=</span> <span class=\"nx\">upper_bound</span><span class=\"p\">;</span> <span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">is_prime</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">))</span> <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">is_prime</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">,</span>     <span class=\"nx\">prime</span><span class=\"p\">,</span> <span class=\"nx\">step</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">==</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"nx\">x</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n  <span class=\"nx\">prime</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n  <span class=\"nx\">step</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"nx\">prime</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">sqrt</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">x</span> <span class=\"o\">%</span> <span class=\"nx\">prime</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"nx\">prime</span> <span class=\"o\">+=</span> <span class=\"nx\">step</span>\n    <span class=\"nx\">step</span> <span class=\"o\">=</span> <span class=\"mi\">6</span> <span class=\"o\">-</span> <span class=\"nx\">step</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">return</span> <span class=\"mi\">1</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>これも実行結果は以下の通りになります。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">awk</span> <span class=\"nt\">-f</span> prime.AWK\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n</pre></div></div>\n\n<hr>\n\n<p>確認用のRubyコードをここに張り付けておきますね(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>ruby <span class=\"nt\">-e</span> <span class=\"s1\">'require \"prime\"; Prime.each(100){|x| puts x}'</span>\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n</pre></div></div>\n\n<p>ちなみに次のようにしても素数列挙は可能です(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span><span class=\"nb\">seq </span>1 100 | xargs <span class=\"nb\">factor</span> | <span class=\"nb\">awk</span> <span class=\"s1\">'NF==2{print $2}'</span>\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n</pre></div></div>\n","body":"\n需要あるのかしら(´・ω・｀) まずはエラトステネスのふるい。\n\n```awk\nBEGIN {\n  upper_bound = 100\n\n  for (i = 2; i <= upper_bound; i++) is_prime[i] = 1;\n\n  for (i = 2; i <= sqrt(upper_bound); i++) {\n    if (!is_prime[i]) continue;\n    for (j = i * 2; j <= upper_bound; j += i) is_prime[j] = 0;\n  }\n\n  for (i = 2; i <= upper_bound; i++) {\n    if (is_prime[i]) print(i);\n  }\n}\n```\n\n実装は以上。実行結果は以下の通りになります。\n\n```bash\n$ awk -f eratosthenes.AWK\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n```\n\n次に試し割りですが、ここでは疑似素数、つまり__「2と3と、3 より大きくて 2 でも 3 でも割り切れない全ての整数」__により次々割っていく方法を採用しています。\n\n```awk\nBEGIN {\n  upper_bound = 100\n\n  for (i = 0; i <= upper_bound; i++) {\n    if (is_prime(i)) print(i);\n  }\n}\n\nfunction is_prime(x,     prime, step) {\n  if (x < 2) return 0;\n  if (x == 2 || x == 3 || x == 5) return 1;\n  if (x % 2 == 0 || x % 3 == 0 || x % 5 == 0) return 0;\n\n  prime = 7\n  step = 4\n  while (prime <= sqrt(x)) {\n    if (x % prime == 0) return 0;\n    prime += step\n    step = 6 - step\n  }\n\n  return 1\n}\n```\n\nこれも実行結果は以下の通りになります。\n\n```bash\n$ awk -f prime.AWK\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n```\n\n***\n\n確認用のRubyコードをここに張り付けておきますね(´・ω・｀)\n\n```bash\n$ ruby -e 'require \"prime\"; Prime.each(100){|x| puts x}'\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n```\n\nちなみに次のようにしても素数列挙は可能です(´・ω・｀)\n\n```bash\n$ seq 1 100 | xargs factor | awk 'NF==2{print $2}'\n2\n3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n53\n59\n61\n67\n71\n73\n79\n83\n89\n97\n```\n","coediting":false,"comments_count":1,"created_at":"2017-11-23T20:12:35+09:00","group":null,"id":"0f1ac17986f1122b1b13","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Ruby","versions":[]},{"name":"Bash","versions":[]},{"name":"awk","versions":[]}],"title":"AWKで素数列挙(エラトステネスのふるい・疑似素数による試し割り)","updated_at":"2017-11-23T20:12:35+09:00","url":"https://qiita.com/neko_the_shadow/items/0f1ac17986f1122b1b13","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":173,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}