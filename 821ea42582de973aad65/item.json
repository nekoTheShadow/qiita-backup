{"rendered_body":"<p><a href=\"https://codeiq.jp/q/3526\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「進捗ヴェリーグッドマーク」問題</a>の公開が終了したということで、自分の解答を公開したいと思います。なおCodeIQはそのサービスの都合上、解答の公開は基本的にNG。ただ<a href=\"https://twitter.com/tbpgr/status/953643033991438336\" rel=\"nofollow noopener\" target=\"_blank\">今回は出題者の@tbpgrさんの許可が出ている</a>ということもあり、解答を公開しています。</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\">\n<div class=\"code-lang\"><span class=\"bold\">Program.cs</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n\n<span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"kt\">var</span> <span class=\"n\">n</span> <span class=\"p\">=</span> <span class=\"kt\">int</span><span class=\"p\">.</span><span class=\"nf\">Parse</span><span class=\"p\">(</span><span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">ReadLine</span><span class=\"p\">());</span>\n        <span class=\"kt\">var</span> <span class=\"n\">ans</span> <span class=\"p\">=</span> <span class=\"nf\">Draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>\n        <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">ans</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"kt\">string</span> <span class=\"nf\">Draw</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"p\">%</span> <span class=\"m\">2</span> <span class=\"p\">==</span> <span class=\"m\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"s\">\"invalid\"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kt\">var</span> <span class=\"n\">matrix</span> <span class=\"p\">=</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">=&gt;</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Repeat</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">).</span><span class=\"nf\">ToList</span><span class=\"p\">()).</span><span class=\"nf\">ToList</span><span class=\"p\">();</span>\n        <span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">))</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">j</span> <span class=\"p\">=</span> <span class=\"n\">i</span> <span class=\"p\">/</span> <span class=\"m\">2</span><span class=\"p\">;</span>\n            <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"p\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">n</span> <span class=\"p\">-</span> <span class=\"n\">j</span> <span class=\"p\">-</span> <span class=\"m\">1</span><span class=\"p\">]</span> <span class=\"p\">=</span>  <span class=\"s\">\"v\"</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n\n\n        <span class=\"k\">return</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"n\">NewLine</span><span class=\"p\">,</span> <span class=\"n\">matrix</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">row</span> <span class=\"p\">=&gt;</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">)));</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>まずは二次元配列を文字列<code>.</code>で初期化したあと、適当な要素を文字列部分で<code>v</code>で上書きする――というシンプルなロジックになっています。もう少しC#らしい書き方があるような気もしますが、C#初心者としては満足な出来上がりです。</p>\n\n<p>次にテストコード。かなり雑、というかコピペで作った感満載(´・ω・｀) 正直なところNUnitがよくわかっておらず、雰囲気で使っている面は多々あります。鍛錬が足りぬ(´・ω・｀)</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\">\n<div class=\"code-lang\"><span class=\"bold\">ProgramTest.cs</span></div>\n<div class=\"highlight\"><pre><span class=\"k\">using</span> <span class=\"nn\">Microsoft.VisualStudio.TestTools.UnitTesting</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">Tests</span>\n<span class=\"p\">{</span>\n    <span class=\"p\">[</span><span class=\"nf\">TestClass</span><span class=\"p\">()]</span>\n    <span class=\"k\">public</span> <span class=\"k\">class</span> <span class=\"nc\">ProgramTests</span>\n    <span class=\"p\">{</span>\n        <span class=\"p\">[</span><span class=\"nf\">TestMethod</span><span class=\"p\">()]</span>\n        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">DrawTest1</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"s\">\"v\"</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">.</span><span class=\"nf\">Draw</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"p\">[</span><span class=\"nf\">TestMethod</span><span class=\"p\">()]</span>\n        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">DrawTest2</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"s\">\"invalid\"</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">.</span><span class=\"nf\">Draw</span><span class=\"p\">(</span><span class=\"m\">2</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"p\">[</span><span class=\"nf\">TestMethod</span><span class=\"p\">()]</span>\n        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">DrawTest3</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n            <span class=\"kt\">var</span> <span class=\"n\">expected</span> <span class=\"p\">=</span> <span class=\"s\">\"v.v?v.v?.v.\"</span><span class=\"p\">.</span><span class=\"nf\">Replace</span><span class=\"p\">(</span><span class=\"s\">\"?\"</span><span class=\"p\">,</span> <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"n\">NewLine</span><span class=\"p\">);</span>\n            <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">.</span><span class=\"nf\">Draw</span><span class=\"p\">(</span><span class=\"m\">3</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"p\">[</span><span class=\"nf\">TestMethod</span><span class=\"p\">()]</span>\n        <span class=\"k\">public</span> <span class=\"k\">void</span> <span class=\"nf\">DrawTest5</span><span class=\"p\">()</span>\n        <span class=\"p\">{</span>\n\n            <span class=\"kt\">var</span> <span class=\"n\">expected</span> <span class=\"p\">=</span> <span class=\"s\">\"v...v?v...v?.v.v.?.v.v.?..v..\"</span><span class=\"p\">.</span><span class=\"nf\">Replace</span><span class=\"p\">(</span><span class=\"s\">\"?\"</span><span class=\"p\">,</span> <span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Environment</span><span class=\"p\">.</span><span class=\"n\">NewLine</span><span class=\"p\">);</span>\n            <span class=\"n\">Assert</span><span class=\"p\">.</span><span class=\"nf\">AreEqual</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">Program</span><span class=\"p\">.</span><span class=\"nf\">Draw</span><span class=\"p\">(</span><span class=\"m\">5</span><span class=\"p\">));</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<p>関連リンク:</p>\n\n<ul>\n<li><a href=\"https://codeiq.jp/q/3526\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codeiq.jp/q/3526</a></li>\n<li><a href=\"https://twitter.com/tbpgr/status/953643033991438336\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://twitter.com/tbpgr/status/953643033991438336</a></li>\n<li><a href=\"http://tbpgr.hatenablog.com/entry/2018/01/17/235711\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://tbpgr.hatenablog.com/entry/2018/01/17/235711</a></li>\n<li><a href=\"https://togetter.com/li/1184198\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://togetter.com/li/1184198</a></li>\n</ul>\n","body":"[CodeIQ「進捗ヴェリーグッドマーク」問題](https://codeiq.jp/q/3526)の公開が終了したということで、自分の解答を公開したいと思います。なおCodeIQはそのサービスの都合上、解答の公開は基本的にNG。ただ[今回は出題者の@tbpgrさんの許可が出ている](https://twitter.com/tbpgr/status/953643033991438336)ということもあり、解答を公開しています。\n\n```csharp:Program.cs\nusing System;\nusing System.Linq;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        var n = int.Parse(Console.ReadLine());\n        var ans = Draw(n);\n        Console.WriteLine(ans);\n    }\n\n    public static string Draw(int n)\n    {\n        if (n % 2 == 0)\n        {\n            return \"invalid\";\n        }\n\n        var matrix = Enumerable.Range(0, n).Select(i => Enumerable.Repeat(\".\", n).ToList()).ToList();\n        foreach (var i in Enumerable.Range(0, n))\n        {\n            var j = i / 2;\n            matrix[i][j] = matrix[i][n - j - 1] =  \"v\";\n        }\n\n\n        return string.Join(System.Environment.NewLine, matrix.Select(row => string.Join(\"\", row)));\n    }\n}\n```\n\nまずは二次元配列を文字列`.`で初期化したあと、適当な要素を文字列部分で`v`で上書きする――というシンプルなロジックになっています。もう少しC#らしい書き方があるような気もしますが、C#初心者としては満足な出来上がりです。\n\n次にテストコード。かなり雑、というかコピペで作った感満載(´・ω・｀) 正直なところNUnitがよくわかっておらず、雰囲気で使っている面は多々あります。鍛錬が足りぬ(´・ω・｀)\n\n```csharp:ProgramTest.cs\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace Tests\n{\n    [TestClass()]\n    public class ProgramTests\n    {\n        [TestMethod()]\n        public void DrawTest1()\n        {\n            Assert.AreEqual(\"v\", Program.Draw(1));\n        }\n\n        [TestMethod()]\n        public void DrawTest2()\n        {\n            Assert.AreEqual(\"invalid\", Program.Draw(2));\n        }\n\n        [TestMethod()]\n        public void DrawTest3()\n        {\n            var expected = \"v.v?v.v?.v.\".Replace(\"?\", System.Environment.NewLine);\n            Assert.AreEqual(expected, Program.Draw(3));\n        }\n\n        [TestMethod()]\n        public void DrawTest5()\n        {\n\n            var expected = \"v...v?v...v?.v.v.?.v.v.?..v..\".Replace(\"?\", System.Environment.NewLine);\n            Assert.AreEqual(expected, Program.Draw(5));\n        }\n    }\n}\n```\n\n関連リンク:\n\n- https://codeiq.jp/q/3526\n- https://twitter.com/tbpgr/status/953643033991438336\n- http://tbpgr.hatenablog.com/entry/2018/01/17/235711\n- https://togetter.com/li/1184198\n","coediting":false,"comments_count":0,"created_at":"2018-01-18T21:40:53+09:00","group":null,"id":"821ea42582de973aad65","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"C#","versions":[]},{"name":"codeiq","versions":[]}],"title":"CodeIQ「進捗ヴェリーグッドマーク」問題に参加しました","updated_at":"2018-01-18T21:40:53+09:00","url":"https://qiita.com/neko_the_shadow/items/821ea42582de973aad65","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":32,"github_login_name":null,"id":"neko_the_shadow","items_count":162,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}