{"rendered_body":"<p><a href=\"https://codeiq.jp/q/3539\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ「進捗ジエンドマーク」</a>の公開期限が終了したということで、自分の解答をさらしてみたいと思います(´・ω・｀) なおCodeIQはそのサービスの性質上、解答の公開は原則禁止ですが、本問については<a href=\"https://twitter.com/tbpgr/status/967443014950961152\" rel=\"nofollow noopener\" target=\"_blank\">出題者の@tbpgrさんの許可</a>のもと、解答を公開しています。</p>\n\n<p>さて「進捗ジエンドマーク」はおおよそ以下のような問題でした。</p>\n\n<ul>\n<li>標準入力から1から100までの整数が与えられる。これをnとする。</li>\n<li>nが偶数の場合はinvalidを標準出力に出力する。</li>\n<li>nが奇数の場合は「進捗ジエンドマーク」を出力する。\n\n<ul>\n<li>n×nの正方形に半角小文字のjでJを描く。\n\n<ul>\n<li>右辺と下辺はすべてjで埋める。</li>\n<li>左辺は下半分をすべてjで埋める。</li>\n<li>残りはすべて.で埋める。</li>\n</ul>\n</li>\n<li>具体例は以下の<code>test</code>メソッドを参照。</li>\n</ul>\n</li>\n</ul>\n\n<p>解答コードは以下の通り。言語はPython3で一発合格でした(｀・ω・´)ｼｬｷｰﾝ 実際のビジネスロジック(?)よりもテスト用のコードのほうが長くなってしまったのは内緒。よいこのみんなはきちんと<a href=\"https://docs.python.jp/3/library/unittest.html\" rel=\"nofollow noopener\" target=\"_blank\">unittest</a>を使いましょう…。</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s\">'invalid'</span>\n\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">'.'</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'j'</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'j'</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"n\">expects</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"s\">'j'</span><span class=\"p\">,</span>\n        <span class=\"mi\">2</span> <span class=\"p\">:</span> <span class=\"s\">'invalid'</span><span class=\"p\">,</span>\n        <span class=\"mi\">3</span> <span class=\"p\">:</span> <span class=\"s\">\"\"\"\n          ..j\n          ..j\n          jjj\n        \"\"\"</span><span class=\"p\">,</span>\n        <span class=\"mi\">5</span> <span class=\"p\">:</span> <span class=\"s\">\"\"\"\n          ....j\n          ....j\n          ....j\n          j...j\n          jjjjj\n        \"\"\"</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">expects</span><span class=\"p\">:</span>\n        <span class=\"n\">expected</span> <span class=\"o\">=</span> <span class=\"n\">expects</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">].</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">' '</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">).</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">actual</span> <span class=\"o\">=</span> <span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">expected</span> <span class=\"o\">==</span> <span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"s\">'expected: {0}, actual: {1}'</span><span class=\"p\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">actual</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># test()\n</span></pre></div></div>\n\n<p>参考:</p>\n\n<ul>\n<li><a href=\"https://codeiq.jp/q/3539\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codeiq.jp/q/3539</a></li>\n<li><a href=\"https://togetter.com/li/1193329\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://togetter.com/li/1193329</a></li>\n<li><a href=\"http://tbpgr.hatenablog.com/entry/2018/02/25/215356\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://tbpgr.hatenablog.com/entry/2018/02/25/215356</a></li>\n</ul>\n","body":"[CodeIQ「進捗ジエンドマーク」](https://codeiq.jp/q/3539)の公開期限が終了したということで、自分の解答をさらしてみたいと思います(´・ω・｀) なおCodeIQはそのサービスの性質上、解答の公開は原則禁止ですが、本問については[出題者の@tbpgrさんの許可](https://twitter.com/tbpgr/status/967443014950961152)のもと、解答を公開しています。\n\nさて「進捗ジエンドマーク」はおおよそ以下のような問題でした。\n\n- 標準入力から1から100までの整数が与えられる。これをnとする。\n- nが偶数の場合はinvalidを標準出力に出力する。\n- nが奇数の場合は「進捗ジエンドマーク」を出力する。\n    - n×nの正方形に半角小文字のjでJを描く。\n        - 右辺と下辺はすべてjで埋める。\n        - 左辺は下半分をすべてjで埋める。\n        - 残りはすべて.で埋める。\n    - 具体例は以下の`test`メソッドを参照。\n\n解答コードは以下の通り。言語はPython3で一発合格でした(｀・ω・´)ｼｬｷｰﾝ 実際のビジネスロジック(?)よりもテスト用のコードのほうが長くなってしまったのは内緒。よいこのみんなはきちんと[unittest](https://docs.python.jp/3/library/unittest.html)を使いましょう…。\n\n```python\ndef draw(n):\n    if n % 2 == 0:\n        return 'invalid'\n\n    matrix = [['.' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        matrix[n - 1][i] = matrix[i][n - 1] = 'j'\n    for i in range(n // 2 + 1, n):\n        matrix[i][0] = 'j'\n\n    return '\\n'.join(''.join(row) for row in matrix)\n\ndef test():\n    expects = {\n        1 : 'j',\n        2 : 'invalid',\n        3 : \"\"\"\n          ..j\n          ..j\n          jjj\n        \"\"\",\n        5 : \"\"\"\n          ....j\n          ....j\n          ....j\n          j...j\n          jjjjj\n        \"\"\"\n    }\n    for n in expects:\n        expected = expects[n].replace(' ', '').strip()\n        actual = draw(n)\n        assert expected == actual, 'expected: {0}, actual: {1}'.format(expected, actual)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(draw(n))\n\n    # test()\n```\n\n参考:\n\n- https://codeiq.jp/q/3539\n- https://togetter.com/li/1193329\n- http://tbpgr.hatenablog.com/entry/2018/02/25/215356\n","coediting":false,"comments_count":0,"created_at":"2018-02-25T22:17:24+09:00","group":null,"id":"52b82ff046aab8e2dc96","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"codeiq","versions":[]},{"name":"Python3","versions":[]}],"title":"CodeIQ「進捗ジエンドマーク」に参加しました。","updated_at":"2018-02-25T22:17:24+09:00","url":"https://qiita.com/neko_the_shadow/items/52b82ff046aab8e2dc96","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":35,"github_login_name":null,"id":"neko_the_shadow","items_count":178,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}