{"rendered_body":"<p>AtCoder Beginner Contest 124に参戦したので、提出時にどのようなことを考えていたのかと実際の提出コードをまとめておきたいと思います。利用した言語はPython3。Python3や競技プログラミングに取り組まれている方の一助になれば幸いです。</p>\n\n<p>基本的には参戦記録のようなものをまとめることはあまりないのですが、今回は総合成績115位と自分にしてはかなりよい結果だったので、浮かれてこんな記事を書いています(´・ω・｀) </p>\n\n<h1>\n<span id=\"a---buttons\" class=\"fragment\"></span><a href=\"#a---buttons\"><i class=\"fa fa-link\"></i></a>A - Buttons</h1>\n\n<ul>\n<li>問題: <a href=\"https://atcoder.jp/contests/abc124/tasks/abc124_a\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/tasks/abc124_a</a>\n</li>\n<li>提出: <a href=\"https://atcoder.jp/contests/abc124/submissions/4950205\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/submissions/4950205</a>\n</li>\n</ul>\n\n<p>取りうる行動は以下の3通りなので、それぞれの行動で獲得できるコインの数の最大数を求めます。</p>\n\n<ul>\n<li>大きさAのボタンを2回押す</li>\n<li>大きさBのボタンを2回押す</li>\n<li>大きさAのボタンと大きさBのボタンを1回づつ押す</li>\n</ul>\n\n<h1>\n<span id=\"b---great-ocean-view\" class=\"fragment\"></span><a href=\"#b---great-ocean-view\"><i class=\"fa fa-link\"></i></a>B - Great Ocean View</h1>\n\n<ul>\n<li>問題: <a href=\"https://atcoder.jp/contests/abc124/tasks/abc124_b\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/tasks/abc124_b</a>\n</li>\n<li>提出: <a href=\"https://atcoder.jp/contests/abc124/submissions/4949719\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/submissions/4949719</a>\n</li>\n</ul>\n\n<p>すべての旅館について、海を見ることができるかどうかを判定し、見ることができる旅館の数を数えるだけです。$O(n^2)$ですが、旅館の数Nの最大値が20とかなり小さいので、この解法でもACします。Nが大きいと工夫する必要があるかもしれません。</p>\n\n<h1>\n<span id=\"c---coloring-colorfully\" class=\"fragment\"></span><a href=\"#c---coloring-colorfully\"><i class=\"fa fa-link\"></i></a>C - Coloring Colorfully</h1>\n\n<ul>\n<li>問題: <a href=\"https://atcoder.jp/contests/abc124/tasks/abc124_c\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/tasks/abc124_c</a>\n</li>\n<li>提出: <a href=\"https://atcoder.jp/contests/abc124/submissions/4948961\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/submissions/4948961</a>\n</li>\n</ul>\n\n<p>市松模様のパターンは以下の2通りです。</p>\n\n<ul>\n<li>□■□■□■□■□■...</li>\n<li>■□■□■□■□■□...</li>\n</ul>\n\n<p>よって「与えられたタイルの並び」から2つの市松模様に変えるためのコストを求め、よりコストが低いほうが答えになります。</p>\n\n<h1>\n<span id=\"d---handstand\" class=\"fragment\"></span><a href=\"#d---handstand\"><i class=\"fa fa-link\"></i></a>D - Handstand</h1>\n\n<ul>\n<li>問題: <a href=\"https://atcoder.jp/contests/abc124/tasks/abc124_d\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/tasks/abc124_d</a>\n</li>\n<li>提出: <a href=\"https://atcoder.jp/contests/abc124/submissions/4947894\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://atcoder.jp/contests/abc124/submissions/4947894</a>\n</li>\n</ul>\n\n<p>左端のインデックスを<code>i</code>、右端のインデックスを<code>j</code>とすると、<code>S[i:j]</code>に属する人を$K$回の操作で全員逆立ちにできた場合、右端を広げます。つまり<code>j += 1</code>とします。一方、$K$回の操作をしても全員を逆立ちにできなかった場合、左端を狭めます。つまり<code>i -= 1</code>とするわけですね。</p>\n\n<p>ところで「<code>S[i:j]</code>に属する人を$K$回の操作で全員逆立ちにできるか」の判定はどのようにすべきでしょうか? たとえば次のように人が並べられていたとします: <code>01001000</code>。これは3回の操作で全員を逆立ちにすることができます。</p>\n\n<ol>\n<li>先頭の人を逆立ちにする。</li>\n<li>真ん中の2人を一度に逆立ちにする。</li>\n<li>最後尾の3人を逆立ちにする。</li>\n</ol>\n\n<p>つまり<code>S[i:j]</code>のうち0が連続する区間の数が$K$以下の場合、「$K$回までの操作で全員逆立ちにできる」といえそうです。すると問題は「<code>S[i:j]</code>のうち0が連続する区間の数」をいかに効率よく求めるかになります。わたしは尺取り法を利用しましたが、累積和でもなんとかなりそう。並んでいる人の数$N$の最大値が$10^5$というかなり微妙なラインではあるので、工夫次第では区間をなめるコードでもなんとかなるかも。</p>\n","body":"AtCoder Beginner Contest 124に参戦したので、提出時にどのようなことを考えていたのかと実際の提出コードをまとめておきたいと思います。利用した言語はPython3。Python3や競技プログラミングに取り組まれている方の一助になれば幸いです。\n\n基本的には参戦記録のようなものをまとめることはあまりないのですが、今回は総合成績115位と自分にしてはかなりよい結果だったので、浮かれてこんな記事を書いています(´・ω・｀) \n\n# A - Buttons\n\n- 問題: https://atcoder.jp/contests/abc124/tasks/abc124_a\n- 提出: https://atcoder.jp/contests/abc124/submissions/4950205\n\n取りうる行動は以下の3通りなので、それぞれの行動で獲得できるコインの数の最大数を求めます。\n\n- 大きさAのボタンを2回押す\n- 大きさBのボタンを2回押す\n- 大きさAのボタンと大きさBのボタンを1回づつ押す\n\n# B - Great Ocean View\n\n- 問題: https://atcoder.jp/contests/abc124/tasks/abc124_b\n- 提出: https://atcoder.jp/contests/abc124/submissions/4949719\n\nすべての旅館について、海を見ることができるかどうかを判定し、見ることができる旅館の数を数えるだけです。$O(n^2)$ですが、旅館の数Nの最大値が20とかなり小さいので、この解法でもACします。Nが大きいと工夫する必要があるかもしれません。\n\n# C - Coloring Colorfully\n\n- 問題: https://atcoder.jp/contests/abc124/tasks/abc124_c\n- 提出: https://atcoder.jp/contests/abc124/submissions/4948961\n\n市松模様のパターンは以下の2通りです。\n\n- □■□■□■□■□■...\n- ■□■□■□■□■□...\n\nよって「与えられたタイルの並び」から2つの市松模様に変えるためのコストを求め、よりコストが低いほうが答えになります。\n\n# D - Handstand\n\n- 問題: https://atcoder.jp/contests/abc124/tasks/abc124_d\n- 提出: https://atcoder.jp/contests/abc124/submissions/4947894\n\n左端のインデックスを`i`、右端のインデックスを`j`とすると、`S[i:j]`に属する人を$K$回の操作で全員逆立ちにできた場合、右端を広げます。つまり`j += 1`とします。一方、$K$回の操作をしても全員を逆立ちにできなかった場合、左端を狭めます。つまり`i -= 1`とするわけですね。\n\nところで「`S[i:j]`に属する人を$K$回の操作で全員逆立ちにできるか」の判定はどのようにすべきでしょうか? たとえば次のように人が並べられていたとします: `01001000`。これは3回の操作で全員を逆立ちにすることができます。\n\n1. 先頭の人を逆立ちにする。\n2. 真ん中の2人を一度に逆立ちにする。\n3. 最後尾の3人を逆立ちにする。\n\nつまり`S[i:j]`のうち0が連続する区間の数が$K$以下の場合、「$K$回までの操作で全員逆立ちにできる」といえそうです。すると問題は「`S[i:j]`のうち0が連続する区間の数」をいかに効率よく求めるかになります。わたしは尺取り法を利用しましたが、累積和でもなんとかなりそう。並んでいる人の数$N$の最大値が$10^5$というかなり微妙なラインではあるので、工夫次第では区間をなめるコードでもなんとかなるかも。\n","coediting":false,"comments_count":0,"created_at":"2019-04-14T18:00:46+09:00","group":null,"id":"8320829ac908ce963319","likes_count":0,"private":false,"reactions_count":0,"stocks_count":0,"tags":[{"name":"AtCoder","versions":[]},{"name":"Python3","versions":[]}],"title":"AtCoder Beginner Contest 124 の参戦記録","updated_at":"2019-04-14T18:03:30+09:00","url":"https://qiita.com/neko_the_shadow/items/8320829ac908ce963319","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":204,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":786,"team_membership":null}