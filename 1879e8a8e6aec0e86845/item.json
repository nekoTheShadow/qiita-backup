{"rendered_body":"<p>Javaプログラミングの古典のひとつ『Effective Java』ではSingleton実現にあたって<code>enum</code>を利用することが推奨されています(「項目4: privateのコンストラクタかenum型でシングルトン特性を強制する」)。先日業務において<code>enum</code>を利用したSingletonの実装を行う機会があったので、そのサンプルコードを残しておきたいと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Singleton.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">enum</span> <span class=\"nc\">Singleton</span> <span class=\"o\">{</span>\n\n    <span class=\"cm\">/** クラス外部から呼び出してはならない. */</span>\n    <span class=\"no\">INSTANCE</span><span class=\"o\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"nc\">String</span> <span class=\"n\">field</span><span class=\"o\">;</span>\n\n    <span class=\"cm\">/**\n     * 事実上のコンストラクタ。\n     * インスタンスの取得にはこのメソッド以外を利用してはならない。\n     * @return インスタンス\n     */</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"nc\">Singleton</span> <span class=\"nf\">getInstance</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"no\">INSTANCE</span><span class=\"o\">.</span><span class=\"na\">field</span> <span class=\"o\">==</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"no\">INSTANCE</span><span class=\"o\">.</span><span class=\"na\">field</span> <span class=\"o\">=</span>  <span class=\"s\">\"field\"</span><span class=\"o\">;</span>\n        <span class=\"o\">}</span>\n        <span class=\"k\">return</span> <span class=\"no\">INSTANCE</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"nc\">String</span> <span class=\"nf\">getField</span><span class=\"o\">()</span> <span class=\"o\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">field</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">setField</span><span class=\"o\">(</span><span class=\"nc\">String</span> <span class=\"n\">field</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">field</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">;</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">Main.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"nc\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"nc\">Singleton</span> <span class=\"n\">instance1</span> <span class=\"o\">=</span> <span class=\"nc\">Singleton</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">instance1</span><span class=\"o\">.</span><span class=\"na\">getField</span><span class=\"o\">());</span> <span class=\"c1\">//=&gt; field</span>\n\n        <span class=\"n\">instance1</span><span class=\"o\">.</span><span class=\"na\">setField</span><span class=\"o\">(</span><span class=\"s\">\"changed field\"</span><span class=\"o\">);</span>\n\n        <span class=\"c1\">// 別のインスタンスを生成しているように見えるが、</span>\n        <span class=\"c1\">// 実は同じインスタンスを使いまわしている。</span>\n        <span class=\"nc\">Singleton</span> <span class=\"n\">instance2</span> <span class=\"o\">=</span> <span class=\"nc\">Singleton</span><span class=\"o\">.</span><span class=\"na\">getInstance</span><span class=\"o\">();</span>\n        <span class=\"nc\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">instance2</span><span class=\"o\">.</span><span class=\"na\">getField</span><span class=\"o\">());</span> <span class=\"c1\">//=&gt; changed field</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p><code>class</code>を用いた方法だと、とりわけ並列プログラミングにおいて考慮すべき点が増え、それに比例して実装も複雑化するのですが、<code>enum</code>を使うと、ごくごくシンプルにSingletonを実現することができます。とはいえこの利用方法は<code>enum</code>本来の使い方からは逸脱している――ありていにいえば「裏技」のようにも思えるので、「実装するだけでシングルトンになるinterface」が標準ライブラリにあればいいのになあと節に思う次第です(´・ω・｀)</p>\n","body":"\nJavaプログラミングの古典のひとつ『Effective Java』ではSingleton実現にあたって`enum`を利用することが推奨されています(「項目4: privateのコンストラクタかenum型でシングルトン特性を強制する」)。先日業務において`enum`を利用したSingletonの実装を行う機会があったので、そのサンプルコードを残しておきたいと思います。\n\n```java:Singleton.java\npublic enum Singleton {\n    \n    /** クラス外部から呼び出してはならない. */\n    INSTANCE;\n    \n    private String field;\n    \n    /**\n     * 事実上のコンストラクタ。\n     * インスタンスの取得にはこのメソッド以外を利用してはならない。\n     * @return インスタンス\n     */\n    public static Singleton getInstance() {\n        if (INSTANCE.field == null) {\n            INSTANCE.field =  \"field\";\n        }\n        return INSTANCE;\n    }\n\n    public String getField() {\n        return field;\n    }\n\n    public void setField(String field) {\n        this.field = field;\n    }\n}\n```\n\n```java:Main.java\npublic class Main {\n    public static void main(String[] args) {\n        Singleton instance1 = Singleton.getInstance();\n        System.out.println(instance1.getField()); //=> field\n        \n        instance1.setField(\"changed field\");\n        \n        // 別のインスタンスを生成しているように見えるが、\n        // 実は同じインスタンスを使いまわしている。\n        Singleton instance2 = Singleton.getInstance();\n        System.out.println(instance2.getField()); //=> changed field\n    }\n}\n```\n\n`class`を用いた方法だと、とりわけ並列プログラミングにおいて考慮すべき点が増え、それに比例して実装も複雑化するのですが、`enum`を使うと、ごくごくシンプルにSingletonを実現することができます。とはいえこの利用方法は`enum`本来の使い方からは逸脱している――ありていにいえば「裏技」のようにも思えるので、「実装するだけでシングルトンになるinterface」が標準ライブラリにあればいいのになあと節に思う次第です(´・ω・｀)\n","coediting":false,"comments_count":2,"created_at":"2017-06-05T00:26:34+09:00","group":null,"id":"1879e8a8e6aec0e86845","likes_count":4,"private":false,"reactions_count":0,"tags":[{"name":"Java","versions":[]}],"title":"enumを利用したSingleton実装のサンプルコード","updated_at":"2017-06-05T00:26:34+09:00","url":"https://qiita.com/neko_the_shadow/items/1879e8a8e6aec0e86845","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":33,"github_login_name":null,"id":"neko_the_shadow","items_count":171,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null}