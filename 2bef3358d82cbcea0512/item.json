{"rendered_body":"\n<h1>\n<span id=\"環境情報\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>環境情報</h1>\n\n<p>この記事は以下の環境で稼働確認を実施しました。</p>\n\n<ul>\n<li>Windows\n\n<ul>\n<li>Microsoft Windows [Version 10.0.19041.84]</li>\n<li>go version go1.13.5 windows/amd64</li>\n</ul>\n</li>\n<li>Linux\n\n<ul>\n<li>Ubuntu 18.04 LTS (Bionic Beaver)</li>\n<li>go version go1.13.8 linux/amd64</li>\n</ul>\n</li>\n</ul>\n\n<h1>\n<span id=\"事象\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>事象</h1>\n\n<p>Open状態のファイルに対して、<code>os.Rename</code>を呼び出すと、LinuxとWindowsでは結果が異なります。具体的にはLinuxでは<code>os.Rename</code>に成功しますが、Windowsではエラーになります。</p>\n\n<p>以下はOpen状態のファイルに対して、<code>os.Rename</code>を利用するコマンドです。</p>\n\n<div class=\"code-frame\" data-lang=\"go\">\n<div class=\"code-lang\"><span class=\"bold\">main.go</span></div>\n<div class=\"highlight\"><pre><code><span class=\"k\">package</span> <span class=\"n\">main</span>\n\n<span class=\"k\">import</span> <span class=\"s\">\"os\"</span>\n\n<span class=\"k\">func</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"s\">\"old.txt\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">defer</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">Close</span><span class=\"p\">()</span>\n\n    <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Rename</span><span class=\"p\">(</span><span class=\"s\">\"old.txt\"</span><span class=\"p\">,</span> <span class=\"s\">\"new.txt\"</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"o\">!=</span> <span class=\"no\">nil</span> <span class=\"p\">{</span>\n        <span class=\"nb\">panic</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n\n<p>これをLinux(Ubuntu)環境でこのコードを実行すると、<code>os.Rename</code>が想定通り動作することが分かります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ ls -ltr\ntotal 0\n-rwxrwxrwx 1 developer developer 214 Feb 23 22:01 main.go\n-rwxrwxrwx 1 developer developer   0 Feb 23 22:05 old.txt\n$ go run main.go\n$ ls -ltr\ntotal 0\n-rwxrwxrwx 1 developer developer 214 Feb 23 22:01 main.go\n-rwxrwxrwx 1 developer developer   0 Feb 23 22:05 new.txt\n</code></pre></div></div>\n\n<p>一方、Windows環境でこのプログラムを実行すると、panicが発生しました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>C:\\qiita&gt;go run main.go\npanic: rename old.txt new.txt: The process cannot access the file because it is being used by another process.\n\ngoroutine 1 [running]:\nmain.main()\n        C:/qiita/main.go:14 +0x131\nexit status 2\n</code></pre></div></div>\n\n<h1>\n<span id=\"原因\" class=\"fragment\"></span><a href=\"#%E5%8E%9F%E5%9B%A0\"><i class=\"fa fa-link\"></i></a>原因</h1>\n\n<h2>\n<span id=\"linux\" class=\"fragment\"></span><a href=\"#linux\"><i class=\"fa fa-link\"></i></a>Linux</h2>\n\n<p>Linuxの場合、<code>os.Rename</code>の実体は<code>renameat</code>になります。これは以下のように<code>strace</code>を利用すすことで確かめることができます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre><code>$ go build -o main\n$ strace -o strace.log ./main\n</code></pre></div></div>\n\n<p><code>renameat</code>は相対パスでファイル名の変更を行うAPIで、その<code>man</code>ページを見ると以下の通りに記述されており、<strong>Open状態のファイルでも名称変更ができることがわかります。</strong>_</p>\n\n<blockquote>\n<p>Open file descriptors for oldpath are also unaffected.</p>\n</blockquote>\n\n<h2>\n<span id=\"windows\" class=\"fragment\"></span><a href=\"#windows\"><i class=\"fa fa-link\"></i></a>Windows</h2>\n\n<p><a href=\"https://ascii.jp/elem/000/001/423/1423022/\" rel=\"nofollow noopener\" target=\"_blank\">「Goならわかるシステムプログラミング 第10回 - ファイルシステムと、その上のGo言語の関数たち（1）」</a> によると、Windowsでの<code>os.Rename</code>の実体は<code>MoveFileEx</code>というWin32 apiとのことです。<a href=\"https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-movefileexa\" rel=\"nofollow noopener\" target=\"_blank\"><code>MoveFileEx</code>のドキュメント</a>を見たところ、このAPIは対象ファイルの削除権限を要するとのことでした。</p>\n\n<blockquote>\n<p>To delete or rename a file, you must have either delete permission on the file or delete child permission in the parent directory.</p>\n</blockquote>\n\n<p>ここでGo言語本体のソースコードを見たところ、ファイルのオープンには<code>CreateFile</code>というWin32 APIを利用しているようです。<code>CreateFile</code>は開いたファイルの共有状態を指定するのですが、Go言語では<code>FILE_SHARE_DELETE</code>を指定していません (該当のソースコードは<a href=\"https://github.com/golang/go/blob/master/src/syscall/syscall_windows.go#L316\" rel=\"nofollow noopener\" target=\"_blank\">このあたり</a>) </p>\n\n<p><strong>つまり削除権限なしの状態でオープンされているファイルに対して、削除権限を要するリネーム処理を行っているわけで、エラーになるのは当然といえます。</strong></p>\n\n<h1>\n<span id=\"対策\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E7%AD%96\"><i class=\"fa fa-link\"></i></a>対策</h1>\n\n<p>作成したプログラムがさまざまなプラットフォーム・OSで利用されることが分かっている場合は、<code>os.Rename</code>の前には必ずファイルを閉じておくことが大事です。</p>\n\n<h1>\n<span id=\"余談1\" class=\"fragment\"></span><a href=\"#%E4%BD%99%E8%AB%871\"><i class=\"fa fa-link\"></i></a>余談1</h1>\n\n<p><code>CreateFile</code>を呼び出す際に<code>FILE_SHARE_DELETE</code>を付与して、WindowsでもLinuxと同じ挙動になるようにしてほしいという要望は実際あるようです(該当のIssueは<a href=\"https://github.com/golang/go/issues/32088\" rel=\"nofollow noopener\" target=\"_blank\">これ</a>)。ただ<a href=\"https://mattn.kaoriya.net/software/lang/go/20170817113831.htm\" rel=\"nofollow noopener\" target=\"_blank\">この記事</a>を読むと、単に<code>FILE_SHARE_DELETE</code>を付与すればよいだけでもないらしく、なかなか難しい問題をはらんでいることがが分かります。</p>\n\n<h1>\n<span id=\"余談2\" class=\"fragment\"></span><a href=\"#%E4%BD%99%E8%AB%872\"><i class=\"fa fa-link\"></i></a>余談2</h1>\n\n<p>とあるライブラリを利用しているときに、ドキュメントの記述と実際の挙動が一致しなかったことが、今回の問題に行き着いた個人的なきっかけになります。ちなみにそのライブラリのコードは次のようになっていました。</p>\n\n<div class=\"code-frame\" data-lang=\"go\"><div class=\"highlight\"><pre><code><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"n\">err</span> <span class=\"o\">:=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Open</span><span class=\"p\">(</span><span class=\"s\">\"old.txt\"</span><span class=\"p\">)</span>\n<span class=\"n\">DoSomething</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">Rename</span><span class=\"p\">(</span><span class=\"s\">\"old.txt\"</span><span class=\"p\">,</span> <span class=\"s\">\"new.txt\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Windowsでは<code>os.Rename</code>がエラーを返すのですが、そのエラーをハンドリングせずに捨てており、結果として奇妙な動作になっていたのでした。<strong>APIが返してくるエラーを無視しないというのも大事な教訓ですね。</strong></p>\n","body":"# 環境情報\n\nこの記事は以下の環境で稼働確認を実施しました。\n\n- Windows\n    - Microsoft Windows [Version 10.0.19041.84]\n    - go version go1.13.5 windows/amd64\n- Linux\n    - Ubuntu 18.04 LTS (Bionic Beaver)\n    - go version go1.13.8 linux/amd64\n\n# 事象\n\nOpen状態のファイルに対して、`os.Rename`を呼び出すと、LinuxとWindowsでは結果が異なります。具体的にはLinuxでは`os.Rename`に成功しますが、Windowsではエラーになります。\n\n以下はOpen状態のファイルに対して、`os.Rename`を利用するコマンドです。\n\n```go:main.go\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tfp, err := os.Open(\"old.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tdefer fp.Close()\n\n\terr = os.Rename(\"old.txt\", \"new.txt\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\nこれをLinux(Ubuntu)環境でこのコードを実行すると、`os.Rename`が想定通り動作することが分かります。\n\n```\n$ ls -ltr\ntotal 0\n-rwxrwxrwx 1 developer developer 214 Feb 23 22:01 main.go\n-rwxrwxrwx 1 developer developer   0 Feb 23 22:05 old.txt\n$ go run main.go\n$ ls -ltr\ntotal 0\n-rwxrwxrwx 1 developer developer 214 Feb 23 22:01 main.go\n-rwxrwxrwx 1 developer developer   0 Feb 23 22:05 new.txt\n```\n\n一方、Windows環境でこのプログラムを実行すると、panicが発生しました。\n\n```\nC:\\qiita>go run main.go\npanic: rename old.txt new.txt: The process cannot access the file because it is being used by another process.\n\ngoroutine 1 [running]:\nmain.main()\n        C:/qiita/main.go:14 +0x131\nexit status 2\n```\n\n# 原因\n\n## Linux\n\nLinuxの場合、`os.Rename`の実体は`renameat`になります。これは以下のように`strace`を利用すすことで確かめることができます。\n\n```\n$ go build -o main\n$ strace -o strace.log ./main\n```\n\n`renameat`は相対パスでファイル名の変更を行うAPIで、その`man`ページを見ると以下の通りに記述されており、__Open状態のファイルでも名称変更ができることがわかります。___\n\n> Open file descriptors for oldpath are also unaffected.\n\n## Windows\n\n[「Goならわかるシステムプログラミング 第10回 - ファイルシステムと、その上のGo言語の関数たち（1）」](https://ascii.jp/elem/000/001/423/1423022/) によると、Windowsでの`os.Rename`の実体は`MoveFileEx`というWin32 apiとのことです。[`MoveFileEx`のドキュメント](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-movefileexa)を見たところ、このAPIは対象ファイルの削除権限を要するとのことでした。\n\n> To delete or rename a file, you must have either delete permission on the file or delete child permission in the parent directory.\n\nここでGo言語本体のソースコードを見たところ、ファイルのオープンには`CreateFile`というWin32 APIを利用しているようです。`CreateFile`は開いたファイルの共有状態を指定するのですが、Go言語では`FILE_SHARE_DELETE`を指定していません (該当のソースコードは[このあたり](https://github.com/golang/go/blob/master/src/syscall/syscall_windows.go#L316)) \n\n__つまり削除権限なしの状態でオープンされているファイルに対して、削除権限を要するリネーム処理を行っているわけで、エラーになるのは当然といえます。__\n\n# 対策\n\n作成したプログラムがさまざまなプラットフォーム・OSで利用されることが分かっている場合は、`os.Rename`の前には必ずファイルを閉じておくことが大事です。\n\n\n# 余談1\n\n`CreateFile`を呼び出す際に`FILE_SHARE_DELETE`を付与して、WindowsでもLinuxと同じ挙動になるようにしてほしいという要望は実際あるようです(該当のIssueは[これ](https://github.com/golang/go/issues/32088))。ただ[この記事](https://mattn.kaoriya.net/software/lang/go/20170817113831.htm)を読むと、単に`FILE_SHARE_DELETE`を付与すればよいだけでもないらしく、なかなか難しい問題をはらんでいることがが分かります。\n\n# 余談2\n\nとあるライブラリを利用しているときに、ドキュメントの記述と実際の挙動が一致しなかったことが、今回の問題に行き着いた個人的なきっかけになります。ちなみにそのライブラリのコードは次のようになっていました。\n\n```go\nfp, err := os.Open(\"old.txt\")\nDoSomething(fp)\nos.Rename(\"old.txt\", \"new.txt\")\n```\n\nWindowsでは`os.Rename`がエラーを返すのですが、そのエラーをハンドリングせずに捨てており、結果として奇妙な動作になっていたのでした。__APIが返してくるエラーを無視しないというのも大事な教訓ですね。__\n\n\n\n\n","coediting":false,"comments_count":0,"created_at":"2020-03-01T15:25:33+09:00","group":null,"id":"2bef3358d82cbcea0512","likes_count":1,"private":false,"reactions_count":0,"tags":[{"name":"Go","versions":[]}],"title":"Open状態のファイルに対して、Linuxだとos.Renameに成功するが、Windowsだとエラーになる","updated_at":"2020-03-01T15:25:33+09:00","url":"https://qiita.com/neko_the_shadow/items/2bef3358d82cbcea0512","user":{"description":"IT業界の片隅でひっそり生きるシステムエンジニアです(´・ω・｀)","facebook_id":"","followees_count":0,"followers_count":36,"github_login_name":null,"id":"neko_the_shadow","items_count":199,"linkedin_id":"","location":"神奈川県川崎市","name":"","organization":"","permanent_id":105859,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753","team_only":false,"twitter_screen_name":"neko_the_shadow","website_url":"https://nekotheshadow.github.io/"},"page_views_count":null,"team_membership":null}