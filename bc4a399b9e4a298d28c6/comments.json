[{"body":"`sys.maxsize`について何故かドキュメントに一切その旨の記述がない整数型の最大値と勘違いされている方が多いのですが、`Python 3`環境なら整数型はメモリの許す限りです。\n[4.4. 数値型 int, float, comple](https://docs.python.jp/3/library/stdtypes.html#typesnumeric)\n> 数値型には 3 種類あります: 整数 、 浮動小数点数 、 複素数 です。さらに、ブール型は整数のサブタイプです。整数には精度の制限がありません。\n\n```Python\nimport sys\nprint(\"maxsize\")\nprint(sys.maxsize)\n\nfor i in range(sys.maxsize, sys.maxsize + 5):\n    print(i)\n    print(type(i))\n```\n\n[sys.maxsize](https://docs.python.jp/3/library/sys.html#sys.maxsize)より 引用部分は筆者強調\n> **Py_ssize_t 型の変数**が取りうる最大値を示す整数です。`通常、32 ビットプラットフォームでは 2**31 - 1、64 ビットプラットフォームでは 2**63 - 1 になります。`\n","created_at":"2018-08-07T08:03:58+09:00","id":"36173c7eae92e5cde18c","rendered_body":"<p><code>sys.maxsize</code>について何故かドキュメントに一切その旨の記述がない整数型の最大値と勘違いされている方が多いのですが、<code>Python 3</code>環境なら整数型はメモリの許す限りです。<br>\n<a href=\"https://docs.python.jp/3/library/stdtypes.html#typesnumeric\" rel=\"nofollow noopener\" target=\"_blank\">4.4. 数値型 int, float, comple</a></p>\n\n<blockquote>\n<p>数値型には 3 種類あります: 整数 、 浮動小数点数 、 複素数 です。さらに、ブール型は整数のサブタイプです。整数には精度の制限がありません。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"Python\"><div class=\"highlight\"><pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"maxsize\"</span><span class=\"p\">)</span>\n<span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">maxsize</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">maxsize</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">maxsize</span> <span class=\"o\">+</span> <span class=\"mi\">5</span><span class=\"p\">):</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">))</span>\n</pre></div></div>\n\n<p><a href=\"https://docs.python.jp/3/library/sys.html#sys.maxsize\" rel=\"nofollow noopener\" target=\"_blank\">sys.maxsize</a>より 引用部分は筆者強調</p>\n\n<blockquote>\n<p><strong>Py_ssize_t 型の変数</strong>が取りうる最大値を示す整数です。<code>通常、32 ビットプラットフォームでは 2**31 - 1、64 ビットプラットフォームでは 2**63 - 1 になります。</code></p>\n</blockquote>\n","updated_at":"2018-08-07T08:10:05+09:00","user":{"description":"","facebook_id":"","followees_count":3,"followers_count":3,"github_login_name":"umyuu","id":"umyu","items_count":0,"linkedin_id":"","location":"","name":"","organization":"","permanent_id":168591,"profile_image_url":"https://avatars0.githubusercontent.com/u/25532860?v=3","team_only":false,"twitter_screen_name":null,"website_url":"https://twitter.com/umyu_1105"}},{"body":"> sys.maxsizeを利用しない場合は次のような書き方になりますが、iのインクリメント(i += 1)を忘れて大変な目にあいがちなので、個人的には好きではありません(´・ω・｀)\n\nこんな書き方もできますよ。\n\n```py\nfrom itertools import count\n\nfor i in count(1):\n    if is_ok(i):\n        break\n    do_something(i)\n```\n\n自分でcount関数を定義してもいいと思います。\n\n```py\ndef count(i, step=1):\n    while True:\n        yield i\n        i += step\n```\n","created_at":"2018-03-05T00:28:52+09:00","id":"c76949c3137f4b9dd306","rendered_body":"<blockquote>\n<p>sys.maxsizeを利用しない場合は次のような書き方になりますが、iのインクリメント(i += 1)を忘れて大変な目にあいがちなので、個人的には好きではありません(´・ω・｀)</p>\n</blockquote>\n\n<p>こんな書き方もできますよ。</p>\n\n<div class=\"code-frame\" data-lang=\"py\"><div class=\"highlight\"><pre><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">count</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">count</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_ok</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n        <span class=\"k\">break</span>\n    <span class=\"n\">do_something</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n</pre></div></div>\n\n<p>自分でcount関数を定義してもいいと思います。</p>\n\n<div class=\"code-frame\" data-lang=\"py\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">i</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">step</span>\n</pre></div></div>\n","updated_at":"2018-03-05T00:58:18+09:00","user":{"description":"元、低レイヤーエンジニア。\r\n現、サイバーセキュリティ研究者。\r\n使用言語は、C, Lisp, Java, Python, C#, JavaScript/Node.js。\r\n経験アセンブリ言語は Z80, 6502, 6809, 68000, SPARC, PowerPC, ARM, x86/x64。\r\n","facebook_id":"","followees_count":5,"followers_count":638,"github_login_name":null,"id":"shiracamus","items_count":78,"linkedin_id":"","location":"日本","name":"しらかみゅ","organization":"某セキュリティマイスター、SECCON実行委員","permanent_id":29070,"profile_image_url":"https://qiita-image-store.s3.amazonaws.com/0/29070/profile-images/1473685289","team_only":false,"twitter_screen_name":"shiracamus","website_url":""}}]